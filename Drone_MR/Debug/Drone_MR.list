
Drone_MR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073b4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800764c  0800764c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800764c  0800764c  0001764c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007654  08007654  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007658  08007658  00017658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800765c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ac  2000000c  08007668  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012b8  08007668  000212b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012353  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002515  00000000  00000000  00032387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  000348a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  000357e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc0d  00000000  00000000  00036638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b25  00000000  00000000  00052245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6c2d  00000000  00000000  00064d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b997  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a24  00000000  00000000  0011b9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007458 	.word	0x08007458

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08007458 	.word	0x08007458

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fc59 	bl	8000cb0 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fbe5 	bl	8000bd8 <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fc4b 	bl	8000cb0 <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fc41 	bl	8000cb0 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fbf1 	bl	8000c24 <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fbe7 	bl	8000c24 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_uldivmod>:
 8000464:	2b00      	cmp	r3, #0
 8000466:	d111      	bne.n	800048c <__aeabi_uldivmod+0x28>
 8000468:	2a00      	cmp	r2, #0
 800046a:	d10f      	bne.n	800048c <__aeabi_uldivmod+0x28>
 800046c:	2900      	cmp	r1, #0
 800046e:	d100      	bne.n	8000472 <__aeabi_uldivmod+0xe>
 8000470:	2800      	cmp	r0, #0
 8000472:	d002      	beq.n	800047a <__aeabi_uldivmod+0x16>
 8000474:	2100      	movs	r1, #0
 8000476:	43c9      	mvns	r1, r1
 8000478:	0008      	movs	r0, r1
 800047a:	b407      	push	{r0, r1, r2}
 800047c:	4802      	ldr	r0, [pc, #8]	; (8000488 <__aeabi_uldivmod+0x24>)
 800047e:	a102      	add	r1, pc, #8	; (adr r1, 8000488 <__aeabi_uldivmod+0x24>)
 8000480:	1840      	adds	r0, r0, r1
 8000482:	9002      	str	r0, [sp, #8]
 8000484:	bd03      	pop	{r0, r1, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	ffffff65 	.word	0xffffff65
 800048c:	b403      	push	{r0, r1}
 800048e:	4668      	mov	r0, sp
 8000490:	b501      	push	{r0, lr}
 8000492:	9802      	ldr	r0, [sp, #8]
 8000494:	f000 f81e 	bl	80004d4 <__udivmoddi4>
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	469e      	mov	lr, r3
 800049c:	b002      	add	sp, #8
 800049e:	bc0c      	pop	{r2, r3}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_f2uiz>:
 80004a4:	219e      	movs	r1, #158	; 0x9e
 80004a6:	b510      	push	{r4, lr}
 80004a8:	05c9      	lsls	r1, r1, #23
 80004aa:	1c04      	adds	r4, r0, #0
 80004ac:	f7ff ffd0 	bl	8000450 <__aeabi_fcmpge>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d103      	bne.n	80004bc <__aeabi_f2uiz+0x18>
 80004b4:	1c20      	adds	r0, r4, #0
 80004b6:	f000 ff13 	bl	80012e0 <__aeabi_f2iz>
 80004ba:	bd10      	pop	{r4, pc}
 80004bc:	219e      	movs	r1, #158	; 0x9e
 80004be:	1c20      	adds	r0, r4, #0
 80004c0:	05c9      	lsls	r1, r1, #23
 80004c2:	f000 fd5f 	bl	8000f84 <__aeabi_fsub>
 80004c6:	f000 ff0b 	bl	80012e0 <__aeabi_f2iz>
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	061b      	lsls	r3, r3, #24
 80004ce:	469c      	mov	ip, r3
 80004d0:	4460      	add	r0, ip
 80004d2:	e7f2      	b.n	80004ba <__aeabi_f2uiz+0x16>

080004d4 <__udivmoddi4>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	4657      	mov	r7, sl
 80004d8:	464e      	mov	r6, r9
 80004da:	4645      	mov	r5, r8
 80004dc:	46de      	mov	lr, fp
 80004de:	b5e0      	push	{r5, r6, r7, lr}
 80004e0:	0004      	movs	r4, r0
 80004e2:	000d      	movs	r5, r1
 80004e4:	4692      	mov	sl, r2
 80004e6:	4699      	mov	r9, r3
 80004e8:	b083      	sub	sp, #12
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d830      	bhi.n	8000550 <__udivmoddi4+0x7c>
 80004ee:	d02d      	beq.n	800054c <__udivmoddi4+0x78>
 80004f0:	4649      	mov	r1, r9
 80004f2:	4650      	mov	r0, sl
 80004f4:	f002 f9fc 	bl	80028f0 <__clzdi2>
 80004f8:	0029      	movs	r1, r5
 80004fa:	0006      	movs	r6, r0
 80004fc:	0020      	movs	r0, r4
 80004fe:	f002 f9f7 	bl	80028f0 <__clzdi2>
 8000502:	1a33      	subs	r3, r6, r0
 8000504:	4698      	mov	r8, r3
 8000506:	3b20      	subs	r3, #32
 8000508:	469b      	mov	fp, r3
 800050a:	d433      	bmi.n	8000574 <__udivmoddi4+0xa0>
 800050c:	465a      	mov	r2, fp
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	4642      	mov	r2, r8
 8000514:	001f      	movs	r7, r3
 8000516:	4653      	mov	r3, sl
 8000518:	4093      	lsls	r3, r2
 800051a:	001e      	movs	r6, r3
 800051c:	42af      	cmp	r7, r5
 800051e:	d83a      	bhi.n	8000596 <__udivmoddi4+0xc2>
 8000520:	42af      	cmp	r7, r5
 8000522:	d100      	bne.n	8000526 <__udivmoddi4+0x52>
 8000524:	e078      	b.n	8000618 <__udivmoddi4+0x144>
 8000526:	465b      	mov	r3, fp
 8000528:	1ba4      	subs	r4, r4, r6
 800052a:	41bd      	sbcs	r5, r7
 800052c:	2b00      	cmp	r3, #0
 800052e:	da00      	bge.n	8000532 <__udivmoddi4+0x5e>
 8000530:	e075      	b.n	800061e <__udivmoddi4+0x14a>
 8000532:	2200      	movs	r2, #0
 8000534:	2300      	movs	r3, #0
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	465a      	mov	r2, fp
 800053e:	4093      	lsls	r3, r2
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	4642      	mov	r2, r8
 8000546:	4093      	lsls	r3, r2
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	e028      	b.n	800059e <__udivmoddi4+0xca>
 800054c:	4282      	cmp	r2, r0
 800054e:	d9cf      	bls.n	80004f0 <__udivmoddi4+0x1c>
 8000550:	2200      	movs	r2, #0
 8000552:	2300      	movs	r3, #0
 8000554:	9200      	str	r2, [sp, #0]
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <__udivmoddi4+0x8e>
 800055e:	601c      	str	r4, [r3, #0]
 8000560:	605d      	str	r5, [r3, #4]
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	b003      	add	sp, #12
 8000568:	bcf0      	pop	{r4, r5, r6, r7}
 800056a:	46bb      	mov	fp, r7
 800056c:	46b2      	mov	sl, r6
 800056e:	46a9      	mov	r9, r5
 8000570:	46a0      	mov	r8, r4
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	4642      	mov	r2, r8
 8000576:	2320      	movs	r3, #32
 8000578:	1a9b      	subs	r3, r3, r2
 800057a:	4652      	mov	r2, sl
 800057c:	40da      	lsrs	r2, r3
 800057e:	4641      	mov	r1, r8
 8000580:	0013      	movs	r3, r2
 8000582:	464a      	mov	r2, r9
 8000584:	408a      	lsls	r2, r1
 8000586:	0017      	movs	r7, r2
 8000588:	4642      	mov	r2, r8
 800058a:	431f      	orrs	r7, r3
 800058c:	4653      	mov	r3, sl
 800058e:	4093      	lsls	r3, r2
 8000590:	001e      	movs	r6, r3
 8000592:	42af      	cmp	r7, r5
 8000594:	d9c4      	bls.n	8000520 <__udivmoddi4+0x4c>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	4643      	mov	r3, r8
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d0d9      	beq.n	8000558 <__udivmoddi4+0x84>
 80005a4:	07fb      	lsls	r3, r7, #31
 80005a6:	0872      	lsrs	r2, r6, #1
 80005a8:	431a      	orrs	r2, r3
 80005aa:	4646      	mov	r6, r8
 80005ac:	087b      	lsrs	r3, r7, #1
 80005ae:	e00e      	b.n	80005ce <__udivmoddi4+0xfa>
 80005b0:	42ab      	cmp	r3, r5
 80005b2:	d101      	bne.n	80005b8 <__udivmoddi4+0xe4>
 80005b4:	42a2      	cmp	r2, r4
 80005b6:	d80c      	bhi.n	80005d2 <__udivmoddi4+0xfe>
 80005b8:	1aa4      	subs	r4, r4, r2
 80005ba:	419d      	sbcs	r5, r3
 80005bc:	2001      	movs	r0, #1
 80005be:	1924      	adds	r4, r4, r4
 80005c0:	416d      	adcs	r5, r5
 80005c2:	2100      	movs	r1, #0
 80005c4:	3e01      	subs	r6, #1
 80005c6:	1824      	adds	r4, r4, r0
 80005c8:	414d      	adcs	r5, r1
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d006      	beq.n	80005dc <__udivmoddi4+0x108>
 80005ce:	42ab      	cmp	r3, r5
 80005d0:	d9ee      	bls.n	80005b0 <__udivmoddi4+0xdc>
 80005d2:	3e01      	subs	r6, #1
 80005d4:	1924      	adds	r4, r4, r4
 80005d6:	416d      	adcs	r5, r5
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d1f8      	bne.n	80005ce <__udivmoddi4+0xfa>
 80005dc:	9800      	ldr	r0, [sp, #0]
 80005de:	9901      	ldr	r1, [sp, #4]
 80005e0:	465b      	mov	r3, fp
 80005e2:	1900      	adds	r0, r0, r4
 80005e4:	4169      	adcs	r1, r5
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db24      	blt.n	8000634 <__udivmoddi4+0x160>
 80005ea:	002b      	movs	r3, r5
 80005ec:	465a      	mov	r2, fp
 80005ee:	4644      	mov	r4, r8
 80005f0:	40d3      	lsrs	r3, r2
 80005f2:	002a      	movs	r2, r5
 80005f4:	40e2      	lsrs	r2, r4
 80005f6:	001c      	movs	r4, r3
 80005f8:	465b      	mov	r3, fp
 80005fa:	0015      	movs	r5, r2
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db2a      	blt.n	8000656 <__udivmoddi4+0x182>
 8000600:	0026      	movs	r6, r4
 8000602:	409e      	lsls	r6, r3
 8000604:	0033      	movs	r3, r6
 8000606:	0026      	movs	r6, r4
 8000608:	4647      	mov	r7, r8
 800060a:	40be      	lsls	r6, r7
 800060c:	0032      	movs	r2, r6
 800060e:	1a80      	subs	r0, r0, r2
 8000610:	4199      	sbcs	r1, r3
 8000612:	9000      	str	r0, [sp, #0]
 8000614:	9101      	str	r1, [sp, #4]
 8000616:	e79f      	b.n	8000558 <__udivmoddi4+0x84>
 8000618:	42a3      	cmp	r3, r4
 800061a:	d8bc      	bhi.n	8000596 <__udivmoddi4+0xc2>
 800061c:	e783      	b.n	8000526 <__udivmoddi4+0x52>
 800061e:	4642      	mov	r2, r8
 8000620:	2320      	movs	r3, #32
 8000622:	2100      	movs	r1, #0
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	2200      	movs	r2, #0
 8000628:	9100      	str	r1, [sp, #0]
 800062a:	9201      	str	r2, [sp, #4]
 800062c:	2201      	movs	r2, #1
 800062e:	40da      	lsrs	r2, r3
 8000630:	9201      	str	r2, [sp, #4]
 8000632:	e786      	b.n	8000542 <__udivmoddi4+0x6e>
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	002a      	movs	r2, r5
 800063c:	4646      	mov	r6, r8
 800063e:	409a      	lsls	r2, r3
 8000640:	0023      	movs	r3, r4
 8000642:	40f3      	lsrs	r3, r6
 8000644:	4644      	mov	r4, r8
 8000646:	4313      	orrs	r3, r2
 8000648:	002a      	movs	r2, r5
 800064a:	40e2      	lsrs	r2, r4
 800064c:	001c      	movs	r4, r3
 800064e:	465b      	mov	r3, fp
 8000650:	0015      	movs	r5, r2
 8000652:	2b00      	cmp	r3, #0
 8000654:	dad4      	bge.n	8000600 <__udivmoddi4+0x12c>
 8000656:	4642      	mov	r2, r8
 8000658:	002f      	movs	r7, r5
 800065a:	2320      	movs	r3, #32
 800065c:	0026      	movs	r6, r4
 800065e:	4097      	lsls	r7, r2
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	40de      	lsrs	r6, r3
 8000664:	003b      	movs	r3, r7
 8000666:	4333      	orrs	r3, r6
 8000668:	e7cd      	b.n	8000606 <__udivmoddi4+0x132>
 800066a:	46c0      	nop			; (mov r8, r8)

0800066c <__aeabi_fadd>:
 800066c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066e:	46c6      	mov	lr, r8
 8000670:	0243      	lsls	r3, r0, #9
 8000672:	0a5b      	lsrs	r3, r3, #9
 8000674:	024e      	lsls	r6, r1, #9
 8000676:	0045      	lsls	r5, r0, #1
 8000678:	004f      	lsls	r7, r1, #1
 800067a:	00da      	lsls	r2, r3, #3
 800067c:	0fc4      	lsrs	r4, r0, #31
 800067e:	469c      	mov	ip, r3
 8000680:	0a70      	lsrs	r0, r6, #9
 8000682:	4690      	mov	r8, r2
 8000684:	b500      	push	{lr}
 8000686:	0e2d      	lsrs	r5, r5, #24
 8000688:	0e3f      	lsrs	r7, r7, #24
 800068a:	0fc9      	lsrs	r1, r1, #31
 800068c:	09b6      	lsrs	r6, r6, #6
 800068e:	428c      	cmp	r4, r1
 8000690:	d04b      	beq.n	800072a <__aeabi_fadd+0xbe>
 8000692:	1bea      	subs	r2, r5, r7
 8000694:	2a00      	cmp	r2, #0
 8000696:	dd36      	ble.n	8000706 <__aeabi_fadd+0x9a>
 8000698:	2f00      	cmp	r7, #0
 800069a:	d061      	beq.n	8000760 <__aeabi_fadd+0xf4>
 800069c:	2dff      	cmp	r5, #255	; 0xff
 800069e:	d100      	bne.n	80006a2 <__aeabi_fadd+0x36>
 80006a0:	e0ad      	b.n	80007fe <__aeabi_fadd+0x192>
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	04db      	lsls	r3, r3, #19
 80006a6:	431e      	orrs	r6, r3
 80006a8:	2a1b      	cmp	r2, #27
 80006aa:	dc00      	bgt.n	80006ae <__aeabi_fadd+0x42>
 80006ac:	e0d3      	b.n	8000856 <__aeabi_fadd+0x1ea>
 80006ae:	2001      	movs	r0, #1
 80006b0:	4643      	mov	r3, r8
 80006b2:	1a18      	subs	r0, r3, r0
 80006b4:	0143      	lsls	r3, r0, #5
 80006b6:	d400      	bmi.n	80006ba <__aeabi_fadd+0x4e>
 80006b8:	e08c      	b.n	80007d4 <__aeabi_fadd+0x168>
 80006ba:	0180      	lsls	r0, r0, #6
 80006bc:	0987      	lsrs	r7, r0, #6
 80006be:	0038      	movs	r0, r7
 80006c0:	f002 f8f8 	bl	80028b4 <__clzsi2>
 80006c4:	3805      	subs	r0, #5
 80006c6:	4087      	lsls	r7, r0
 80006c8:	4285      	cmp	r5, r0
 80006ca:	dc00      	bgt.n	80006ce <__aeabi_fadd+0x62>
 80006cc:	e0b6      	b.n	800083c <__aeabi_fadd+0x1d0>
 80006ce:	1a2d      	subs	r5, r5, r0
 80006d0:	48b3      	ldr	r0, [pc, #716]	; (80009a0 <__aeabi_fadd+0x334>)
 80006d2:	4038      	ands	r0, r7
 80006d4:	0743      	lsls	r3, r0, #29
 80006d6:	d004      	beq.n	80006e2 <__aeabi_fadd+0x76>
 80006d8:	230f      	movs	r3, #15
 80006da:	4003      	ands	r3, r0
 80006dc:	2b04      	cmp	r3, #4
 80006de:	d000      	beq.n	80006e2 <__aeabi_fadd+0x76>
 80006e0:	3004      	adds	r0, #4
 80006e2:	0143      	lsls	r3, r0, #5
 80006e4:	d400      	bmi.n	80006e8 <__aeabi_fadd+0x7c>
 80006e6:	e078      	b.n	80007da <__aeabi_fadd+0x16e>
 80006e8:	1c6a      	adds	r2, r5, #1
 80006ea:	2dfe      	cmp	r5, #254	; 0xfe
 80006ec:	d065      	beq.n	80007ba <__aeabi_fadd+0x14e>
 80006ee:	0180      	lsls	r0, r0, #6
 80006f0:	0a43      	lsrs	r3, r0, #9
 80006f2:	469c      	mov	ip, r3
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	4663      	mov	r3, ip
 80006f8:	05d0      	lsls	r0, r2, #23
 80006fa:	4318      	orrs	r0, r3
 80006fc:	07e4      	lsls	r4, r4, #31
 80006fe:	4320      	orrs	r0, r4
 8000700:	bc80      	pop	{r7}
 8000702:	46b8      	mov	r8, r7
 8000704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000706:	2a00      	cmp	r2, #0
 8000708:	d035      	beq.n	8000776 <__aeabi_fadd+0x10a>
 800070a:	1b7a      	subs	r2, r7, r5
 800070c:	2d00      	cmp	r5, #0
 800070e:	d000      	beq.n	8000712 <__aeabi_fadd+0xa6>
 8000710:	e0af      	b.n	8000872 <__aeabi_fadd+0x206>
 8000712:	4643      	mov	r3, r8
 8000714:	2b00      	cmp	r3, #0
 8000716:	d100      	bne.n	800071a <__aeabi_fadd+0xae>
 8000718:	e0a7      	b.n	800086a <__aeabi_fadd+0x1fe>
 800071a:	1e53      	subs	r3, r2, #1
 800071c:	2a01      	cmp	r2, #1
 800071e:	d100      	bne.n	8000722 <__aeabi_fadd+0xb6>
 8000720:	e12f      	b.n	8000982 <__aeabi_fadd+0x316>
 8000722:	2aff      	cmp	r2, #255	; 0xff
 8000724:	d069      	beq.n	80007fa <__aeabi_fadd+0x18e>
 8000726:	001a      	movs	r2, r3
 8000728:	e0aa      	b.n	8000880 <__aeabi_fadd+0x214>
 800072a:	1be9      	subs	r1, r5, r7
 800072c:	2900      	cmp	r1, #0
 800072e:	dd70      	ble.n	8000812 <__aeabi_fadd+0x1a6>
 8000730:	2f00      	cmp	r7, #0
 8000732:	d037      	beq.n	80007a4 <__aeabi_fadd+0x138>
 8000734:	2dff      	cmp	r5, #255	; 0xff
 8000736:	d062      	beq.n	80007fe <__aeabi_fadd+0x192>
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	04db      	lsls	r3, r3, #19
 800073c:	431e      	orrs	r6, r3
 800073e:	291b      	cmp	r1, #27
 8000740:	dc00      	bgt.n	8000744 <__aeabi_fadd+0xd8>
 8000742:	e0b0      	b.n	80008a6 <__aeabi_fadd+0x23a>
 8000744:	2001      	movs	r0, #1
 8000746:	4440      	add	r0, r8
 8000748:	0143      	lsls	r3, r0, #5
 800074a:	d543      	bpl.n	80007d4 <__aeabi_fadd+0x168>
 800074c:	3501      	adds	r5, #1
 800074e:	2dff      	cmp	r5, #255	; 0xff
 8000750:	d033      	beq.n	80007ba <__aeabi_fadd+0x14e>
 8000752:	2301      	movs	r3, #1
 8000754:	4a93      	ldr	r2, [pc, #588]	; (80009a4 <__aeabi_fadd+0x338>)
 8000756:	4003      	ands	r3, r0
 8000758:	0840      	lsrs	r0, r0, #1
 800075a:	4010      	ands	r0, r2
 800075c:	4318      	orrs	r0, r3
 800075e:	e7b9      	b.n	80006d4 <__aeabi_fadd+0x68>
 8000760:	2e00      	cmp	r6, #0
 8000762:	d100      	bne.n	8000766 <__aeabi_fadd+0xfa>
 8000764:	e083      	b.n	800086e <__aeabi_fadd+0x202>
 8000766:	1e51      	subs	r1, r2, #1
 8000768:	2a01      	cmp	r2, #1
 800076a:	d100      	bne.n	800076e <__aeabi_fadd+0x102>
 800076c:	e0d8      	b.n	8000920 <__aeabi_fadd+0x2b4>
 800076e:	2aff      	cmp	r2, #255	; 0xff
 8000770:	d045      	beq.n	80007fe <__aeabi_fadd+0x192>
 8000772:	000a      	movs	r2, r1
 8000774:	e798      	b.n	80006a8 <__aeabi_fadd+0x3c>
 8000776:	27fe      	movs	r7, #254	; 0xfe
 8000778:	1c6a      	adds	r2, r5, #1
 800077a:	4217      	tst	r7, r2
 800077c:	d000      	beq.n	8000780 <__aeabi_fadd+0x114>
 800077e:	e086      	b.n	800088e <__aeabi_fadd+0x222>
 8000780:	2d00      	cmp	r5, #0
 8000782:	d000      	beq.n	8000786 <__aeabi_fadd+0x11a>
 8000784:	e0b7      	b.n	80008f6 <__aeabi_fadd+0x28a>
 8000786:	4643      	mov	r3, r8
 8000788:	2b00      	cmp	r3, #0
 800078a:	d100      	bne.n	800078e <__aeabi_fadd+0x122>
 800078c:	e0f3      	b.n	8000976 <__aeabi_fadd+0x30a>
 800078e:	2200      	movs	r2, #0
 8000790:	2e00      	cmp	r6, #0
 8000792:	d0b0      	beq.n	80006f6 <__aeabi_fadd+0x8a>
 8000794:	1b98      	subs	r0, r3, r6
 8000796:	0143      	lsls	r3, r0, #5
 8000798:	d400      	bmi.n	800079c <__aeabi_fadd+0x130>
 800079a:	e0fa      	b.n	8000992 <__aeabi_fadd+0x326>
 800079c:	4643      	mov	r3, r8
 800079e:	000c      	movs	r4, r1
 80007a0:	1af0      	subs	r0, r6, r3
 80007a2:	e797      	b.n	80006d4 <__aeabi_fadd+0x68>
 80007a4:	2e00      	cmp	r6, #0
 80007a6:	d100      	bne.n	80007aa <__aeabi_fadd+0x13e>
 80007a8:	e0c8      	b.n	800093c <__aeabi_fadd+0x2d0>
 80007aa:	1e4a      	subs	r2, r1, #1
 80007ac:	2901      	cmp	r1, #1
 80007ae:	d100      	bne.n	80007b2 <__aeabi_fadd+0x146>
 80007b0:	e0ae      	b.n	8000910 <__aeabi_fadd+0x2a4>
 80007b2:	29ff      	cmp	r1, #255	; 0xff
 80007b4:	d023      	beq.n	80007fe <__aeabi_fadd+0x192>
 80007b6:	0011      	movs	r1, r2
 80007b8:	e7c1      	b.n	800073e <__aeabi_fadd+0xd2>
 80007ba:	2300      	movs	r3, #0
 80007bc:	22ff      	movs	r2, #255	; 0xff
 80007be:	469c      	mov	ip, r3
 80007c0:	e799      	b.n	80006f6 <__aeabi_fadd+0x8a>
 80007c2:	21fe      	movs	r1, #254	; 0xfe
 80007c4:	1c6a      	adds	r2, r5, #1
 80007c6:	4211      	tst	r1, r2
 80007c8:	d077      	beq.n	80008ba <__aeabi_fadd+0x24e>
 80007ca:	2aff      	cmp	r2, #255	; 0xff
 80007cc:	d0f5      	beq.n	80007ba <__aeabi_fadd+0x14e>
 80007ce:	0015      	movs	r5, r2
 80007d0:	4446      	add	r6, r8
 80007d2:	0870      	lsrs	r0, r6, #1
 80007d4:	0743      	lsls	r3, r0, #29
 80007d6:	d000      	beq.n	80007da <__aeabi_fadd+0x16e>
 80007d8:	e77e      	b.n	80006d8 <__aeabi_fadd+0x6c>
 80007da:	08c3      	lsrs	r3, r0, #3
 80007dc:	2dff      	cmp	r5, #255	; 0xff
 80007de:	d00e      	beq.n	80007fe <__aeabi_fadd+0x192>
 80007e0:	025b      	lsls	r3, r3, #9
 80007e2:	0a5b      	lsrs	r3, r3, #9
 80007e4:	469c      	mov	ip, r3
 80007e6:	b2ea      	uxtb	r2, r5
 80007e8:	e785      	b.n	80006f6 <__aeabi_fadd+0x8a>
 80007ea:	2e00      	cmp	r6, #0
 80007ec:	d007      	beq.n	80007fe <__aeabi_fadd+0x192>
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	03d2      	lsls	r2, r2, #15
 80007f2:	4213      	tst	r3, r2
 80007f4:	d003      	beq.n	80007fe <__aeabi_fadd+0x192>
 80007f6:	4210      	tst	r0, r2
 80007f8:	d101      	bne.n	80007fe <__aeabi_fadd+0x192>
 80007fa:	000c      	movs	r4, r1
 80007fc:	0003      	movs	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d0db      	beq.n	80007ba <__aeabi_fadd+0x14e>
 8000802:	2080      	movs	r0, #128	; 0x80
 8000804:	03c0      	lsls	r0, r0, #15
 8000806:	4318      	orrs	r0, r3
 8000808:	0240      	lsls	r0, r0, #9
 800080a:	0a43      	lsrs	r3, r0, #9
 800080c:	469c      	mov	ip, r3
 800080e:	22ff      	movs	r2, #255	; 0xff
 8000810:	e771      	b.n	80006f6 <__aeabi_fadd+0x8a>
 8000812:	2900      	cmp	r1, #0
 8000814:	d0d5      	beq.n	80007c2 <__aeabi_fadd+0x156>
 8000816:	1b7a      	subs	r2, r7, r5
 8000818:	2d00      	cmp	r5, #0
 800081a:	d160      	bne.n	80008de <__aeabi_fadd+0x272>
 800081c:	4643      	mov	r3, r8
 800081e:	2b00      	cmp	r3, #0
 8000820:	d024      	beq.n	800086c <__aeabi_fadd+0x200>
 8000822:	1e53      	subs	r3, r2, #1
 8000824:	2a01      	cmp	r2, #1
 8000826:	d073      	beq.n	8000910 <__aeabi_fadd+0x2a4>
 8000828:	2aff      	cmp	r2, #255	; 0xff
 800082a:	d0e7      	beq.n	80007fc <__aeabi_fadd+0x190>
 800082c:	001a      	movs	r2, r3
 800082e:	2a1b      	cmp	r2, #27
 8000830:	dc00      	bgt.n	8000834 <__aeabi_fadd+0x1c8>
 8000832:	e085      	b.n	8000940 <__aeabi_fadd+0x2d4>
 8000834:	2001      	movs	r0, #1
 8000836:	003d      	movs	r5, r7
 8000838:	1980      	adds	r0, r0, r6
 800083a:	e785      	b.n	8000748 <__aeabi_fadd+0xdc>
 800083c:	2320      	movs	r3, #32
 800083e:	003a      	movs	r2, r7
 8000840:	1b45      	subs	r5, r0, r5
 8000842:	0038      	movs	r0, r7
 8000844:	3501      	adds	r5, #1
 8000846:	40ea      	lsrs	r2, r5
 8000848:	1b5d      	subs	r5, r3, r5
 800084a:	40a8      	lsls	r0, r5
 800084c:	1e43      	subs	r3, r0, #1
 800084e:	4198      	sbcs	r0, r3
 8000850:	2500      	movs	r5, #0
 8000852:	4310      	orrs	r0, r2
 8000854:	e73e      	b.n	80006d4 <__aeabi_fadd+0x68>
 8000856:	2320      	movs	r3, #32
 8000858:	0030      	movs	r0, r6
 800085a:	1a9b      	subs	r3, r3, r2
 800085c:	0031      	movs	r1, r6
 800085e:	4098      	lsls	r0, r3
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1e43      	subs	r3, r0, #1
 8000864:	4198      	sbcs	r0, r3
 8000866:	4308      	orrs	r0, r1
 8000868:	e722      	b.n	80006b0 <__aeabi_fadd+0x44>
 800086a:	000c      	movs	r4, r1
 800086c:	0003      	movs	r3, r0
 800086e:	0015      	movs	r5, r2
 8000870:	e7b4      	b.n	80007dc <__aeabi_fadd+0x170>
 8000872:	2fff      	cmp	r7, #255	; 0xff
 8000874:	d0c1      	beq.n	80007fa <__aeabi_fadd+0x18e>
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	4640      	mov	r0, r8
 800087a:	04db      	lsls	r3, r3, #19
 800087c:	4318      	orrs	r0, r3
 800087e:	4680      	mov	r8, r0
 8000880:	2a1b      	cmp	r2, #27
 8000882:	dd51      	ble.n	8000928 <__aeabi_fadd+0x2bc>
 8000884:	2001      	movs	r0, #1
 8000886:	000c      	movs	r4, r1
 8000888:	003d      	movs	r5, r7
 800088a:	1a30      	subs	r0, r6, r0
 800088c:	e712      	b.n	80006b4 <__aeabi_fadd+0x48>
 800088e:	4643      	mov	r3, r8
 8000890:	1b9f      	subs	r7, r3, r6
 8000892:	017b      	lsls	r3, r7, #5
 8000894:	d42b      	bmi.n	80008ee <__aeabi_fadd+0x282>
 8000896:	2f00      	cmp	r7, #0
 8000898:	d000      	beq.n	800089c <__aeabi_fadd+0x230>
 800089a:	e710      	b.n	80006be <__aeabi_fadd+0x52>
 800089c:	2300      	movs	r3, #0
 800089e:	2400      	movs	r4, #0
 80008a0:	2200      	movs	r2, #0
 80008a2:	469c      	mov	ip, r3
 80008a4:	e727      	b.n	80006f6 <__aeabi_fadd+0x8a>
 80008a6:	2320      	movs	r3, #32
 80008a8:	0032      	movs	r2, r6
 80008aa:	0030      	movs	r0, r6
 80008ac:	40ca      	lsrs	r2, r1
 80008ae:	1a59      	subs	r1, r3, r1
 80008b0:	4088      	lsls	r0, r1
 80008b2:	1e43      	subs	r3, r0, #1
 80008b4:	4198      	sbcs	r0, r3
 80008b6:	4310      	orrs	r0, r2
 80008b8:	e745      	b.n	8000746 <__aeabi_fadd+0xda>
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d14a      	bne.n	8000954 <__aeabi_fadd+0x2e8>
 80008be:	4643      	mov	r3, r8
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d063      	beq.n	800098c <__aeabi_fadd+0x320>
 80008c4:	2200      	movs	r2, #0
 80008c6:	2e00      	cmp	r6, #0
 80008c8:	d100      	bne.n	80008cc <__aeabi_fadd+0x260>
 80008ca:	e714      	b.n	80006f6 <__aeabi_fadd+0x8a>
 80008cc:	0030      	movs	r0, r6
 80008ce:	4440      	add	r0, r8
 80008d0:	0143      	lsls	r3, r0, #5
 80008d2:	d400      	bmi.n	80008d6 <__aeabi_fadd+0x26a>
 80008d4:	e77e      	b.n	80007d4 <__aeabi_fadd+0x168>
 80008d6:	4b32      	ldr	r3, [pc, #200]	; (80009a0 <__aeabi_fadd+0x334>)
 80008d8:	3501      	adds	r5, #1
 80008da:	4018      	ands	r0, r3
 80008dc:	e77a      	b.n	80007d4 <__aeabi_fadd+0x168>
 80008de:	2fff      	cmp	r7, #255	; 0xff
 80008e0:	d08c      	beq.n	80007fc <__aeabi_fadd+0x190>
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	4641      	mov	r1, r8
 80008e6:	04db      	lsls	r3, r3, #19
 80008e8:	4319      	orrs	r1, r3
 80008ea:	4688      	mov	r8, r1
 80008ec:	e79f      	b.n	800082e <__aeabi_fadd+0x1c2>
 80008ee:	4643      	mov	r3, r8
 80008f0:	000c      	movs	r4, r1
 80008f2:	1af7      	subs	r7, r6, r3
 80008f4:	e6e3      	b.n	80006be <__aeabi_fadd+0x52>
 80008f6:	4642      	mov	r2, r8
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	d000      	beq.n	80008fe <__aeabi_fadd+0x292>
 80008fc:	e775      	b.n	80007ea <__aeabi_fadd+0x17e>
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d000      	beq.n	8000904 <__aeabi_fadd+0x298>
 8000902:	e77a      	b.n	80007fa <__aeabi_fadd+0x18e>
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	03db      	lsls	r3, r3, #15
 8000908:	2400      	movs	r4, #0
 800090a:	469c      	mov	ip, r3
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	e6f2      	b.n	80006f6 <__aeabi_fadd+0x8a>
 8000910:	0030      	movs	r0, r6
 8000912:	4440      	add	r0, r8
 8000914:	2501      	movs	r5, #1
 8000916:	0143      	lsls	r3, r0, #5
 8000918:	d400      	bmi.n	800091c <__aeabi_fadd+0x2b0>
 800091a:	e75b      	b.n	80007d4 <__aeabi_fadd+0x168>
 800091c:	2502      	movs	r5, #2
 800091e:	e718      	b.n	8000752 <__aeabi_fadd+0xe6>
 8000920:	4643      	mov	r3, r8
 8000922:	2501      	movs	r5, #1
 8000924:	1b98      	subs	r0, r3, r6
 8000926:	e6c5      	b.n	80006b4 <__aeabi_fadd+0x48>
 8000928:	2320      	movs	r3, #32
 800092a:	4644      	mov	r4, r8
 800092c:	4640      	mov	r0, r8
 800092e:	40d4      	lsrs	r4, r2
 8000930:	1a9a      	subs	r2, r3, r2
 8000932:	4090      	lsls	r0, r2
 8000934:	1e43      	subs	r3, r0, #1
 8000936:	4198      	sbcs	r0, r3
 8000938:	4320      	orrs	r0, r4
 800093a:	e7a4      	b.n	8000886 <__aeabi_fadd+0x21a>
 800093c:	000d      	movs	r5, r1
 800093e:	e74d      	b.n	80007dc <__aeabi_fadd+0x170>
 8000940:	2320      	movs	r3, #32
 8000942:	4641      	mov	r1, r8
 8000944:	4640      	mov	r0, r8
 8000946:	40d1      	lsrs	r1, r2
 8000948:	1a9a      	subs	r2, r3, r2
 800094a:	4090      	lsls	r0, r2
 800094c:	1e43      	subs	r3, r0, #1
 800094e:	4198      	sbcs	r0, r3
 8000950:	4308      	orrs	r0, r1
 8000952:	e770      	b.n	8000836 <__aeabi_fadd+0x1ca>
 8000954:	4642      	mov	r2, r8
 8000956:	2a00      	cmp	r2, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fadd+0x2f0>
 800095a:	e74f      	b.n	80007fc <__aeabi_fadd+0x190>
 800095c:	2e00      	cmp	r6, #0
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0x2f6>
 8000960:	e74d      	b.n	80007fe <__aeabi_fadd+0x192>
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	03d2      	lsls	r2, r2, #15
 8000966:	4213      	tst	r3, r2
 8000968:	d100      	bne.n	800096c <__aeabi_fadd+0x300>
 800096a:	e748      	b.n	80007fe <__aeabi_fadd+0x192>
 800096c:	4210      	tst	r0, r2
 800096e:	d000      	beq.n	8000972 <__aeabi_fadd+0x306>
 8000970:	e745      	b.n	80007fe <__aeabi_fadd+0x192>
 8000972:	0003      	movs	r3, r0
 8000974:	e743      	b.n	80007fe <__aeabi_fadd+0x192>
 8000976:	2e00      	cmp	r6, #0
 8000978:	d090      	beq.n	800089c <__aeabi_fadd+0x230>
 800097a:	000c      	movs	r4, r1
 800097c:	4684      	mov	ip, r0
 800097e:	2200      	movs	r2, #0
 8000980:	e6b9      	b.n	80006f6 <__aeabi_fadd+0x8a>
 8000982:	4643      	mov	r3, r8
 8000984:	000c      	movs	r4, r1
 8000986:	1af0      	subs	r0, r6, r3
 8000988:	3501      	adds	r5, #1
 800098a:	e693      	b.n	80006b4 <__aeabi_fadd+0x48>
 800098c:	4684      	mov	ip, r0
 800098e:	2200      	movs	r2, #0
 8000990:	e6b1      	b.n	80006f6 <__aeabi_fadd+0x8a>
 8000992:	2800      	cmp	r0, #0
 8000994:	d000      	beq.n	8000998 <__aeabi_fadd+0x32c>
 8000996:	e71d      	b.n	80007d4 <__aeabi_fadd+0x168>
 8000998:	2300      	movs	r3, #0
 800099a:	2400      	movs	r4, #0
 800099c:	469c      	mov	ip, r3
 800099e:	e6aa      	b.n	80006f6 <__aeabi_fadd+0x8a>
 80009a0:	fbffffff 	.word	0xfbffffff
 80009a4:	7dffffff 	.word	0x7dffffff

080009a8 <__aeabi_fdiv>:
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009aa:	464f      	mov	r7, r9
 80009ac:	4646      	mov	r6, r8
 80009ae:	46d6      	mov	lr, sl
 80009b0:	0245      	lsls	r5, r0, #9
 80009b2:	b5c0      	push	{r6, r7, lr}
 80009b4:	0047      	lsls	r7, r0, #1
 80009b6:	1c0c      	adds	r4, r1, #0
 80009b8:	0a6d      	lsrs	r5, r5, #9
 80009ba:	0e3f      	lsrs	r7, r7, #24
 80009bc:	0fc6      	lsrs	r6, r0, #31
 80009be:	2f00      	cmp	r7, #0
 80009c0:	d100      	bne.n	80009c4 <__aeabi_fdiv+0x1c>
 80009c2:	e070      	b.n	8000aa6 <__aeabi_fdiv+0xfe>
 80009c4:	2fff      	cmp	r7, #255	; 0xff
 80009c6:	d100      	bne.n	80009ca <__aeabi_fdiv+0x22>
 80009c8:	e075      	b.n	8000ab6 <__aeabi_fdiv+0x10e>
 80009ca:	00eb      	lsls	r3, r5, #3
 80009cc:	2580      	movs	r5, #128	; 0x80
 80009ce:	04ed      	lsls	r5, r5, #19
 80009d0:	431d      	orrs	r5, r3
 80009d2:	2300      	movs	r3, #0
 80009d4:	4699      	mov	r9, r3
 80009d6:	469a      	mov	sl, r3
 80009d8:	3f7f      	subs	r7, #127	; 0x7f
 80009da:	0260      	lsls	r0, r4, #9
 80009dc:	0a43      	lsrs	r3, r0, #9
 80009de:	4698      	mov	r8, r3
 80009e0:	0063      	lsls	r3, r4, #1
 80009e2:	0e1b      	lsrs	r3, r3, #24
 80009e4:	0fe4      	lsrs	r4, r4, #31
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d04e      	beq.n	8000a88 <__aeabi_fdiv+0xe0>
 80009ea:	2bff      	cmp	r3, #255	; 0xff
 80009ec:	d046      	beq.n	8000a7c <__aeabi_fdiv+0xd4>
 80009ee:	4642      	mov	r2, r8
 80009f0:	00d0      	lsls	r0, r2, #3
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	04d2      	lsls	r2, r2, #19
 80009f6:	4302      	orrs	r2, r0
 80009f8:	4690      	mov	r8, r2
 80009fa:	2200      	movs	r2, #0
 80009fc:	3b7f      	subs	r3, #127	; 0x7f
 80009fe:	0031      	movs	r1, r6
 8000a00:	1aff      	subs	r7, r7, r3
 8000a02:	464b      	mov	r3, r9
 8000a04:	4061      	eors	r1, r4
 8000a06:	b2c9      	uxtb	r1, r1
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	2b0f      	cmp	r3, #15
 8000a0c:	d900      	bls.n	8000a10 <__aeabi_fdiv+0x68>
 8000a0e:	e0b5      	b.n	8000b7c <__aeabi_fdiv+0x1d4>
 8000a10:	486e      	ldr	r0, [pc, #440]	; (8000bcc <__aeabi_fdiv+0x224>)
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	58c3      	ldr	r3, [r0, r3]
 8000a16:	469f      	mov	pc, r3
 8000a18:	2300      	movs	r3, #0
 8000a1a:	4698      	mov	r8, r3
 8000a1c:	0026      	movs	r6, r4
 8000a1e:	4645      	mov	r5, r8
 8000a20:	4692      	mov	sl, r2
 8000a22:	4653      	mov	r3, sl
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d100      	bne.n	8000a2a <__aeabi_fdiv+0x82>
 8000a28:	e089      	b.n	8000b3e <__aeabi_fdiv+0x196>
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fdiv+0x88>
 8000a2e:	e09e      	b.n	8000b6e <__aeabi_fdiv+0x1c6>
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d018      	beq.n	8000a66 <__aeabi_fdiv+0xbe>
 8000a34:	003b      	movs	r3, r7
 8000a36:	337f      	adds	r3, #127	; 0x7f
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	dd69      	ble.n	8000b10 <__aeabi_fdiv+0x168>
 8000a3c:	076a      	lsls	r2, r5, #29
 8000a3e:	d004      	beq.n	8000a4a <__aeabi_fdiv+0xa2>
 8000a40:	220f      	movs	r2, #15
 8000a42:	402a      	ands	r2, r5
 8000a44:	2a04      	cmp	r2, #4
 8000a46:	d000      	beq.n	8000a4a <__aeabi_fdiv+0xa2>
 8000a48:	3504      	adds	r5, #4
 8000a4a:	012a      	lsls	r2, r5, #4
 8000a4c:	d503      	bpl.n	8000a56 <__aeabi_fdiv+0xae>
 8000a4e:	4b60      	ldr	r3, [pc, #384]	; (8000bd0 <__aeabi_fdiv+0x228>)
 8000a50:	401d      	ands	r5, r3
 8000a52:	003b      	movs	r3, r7
 8000a54:	3380      	adds	r3, #128	; 0x80
 8000a56:	2bfe      	cmp	r3, #254	; 0xfe
 8000a58:	dd00      	ble.n	8000a5c <__aeabi_fdiv+0xb4>
 8000a5a:	e070      	b.n	8000b3e <__aeabi_fdiv+0x196>
 8000a5c:	01ad      	lsls	r5, r5, #6
 8000a5e:	0a6d      	lsrs	r5, r5, #9
 8000a60:	b2d8      	uxtb	r0, r3
 8000a62:	e002      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000a64:	000e      	movs	r6, r1
 8000a66:	2000      	movs	r0, #0
 8000a68:	2500      	movs	r5, #0
 8000a6a:	05c0      	lsls	r0, r0, #23
 8000a6c:	4328      	orrs	r0, r5
 8000a6e:	07f6      	lsls	r6, r6, #31
 8000a70:	4330      	orrs	r0, r6
 8000a72:	bce0      	pop	{r5, r6, r7}
 8000a74:	46ba      	mov	sl, r7
 8000a76:	46b1      	mov	r9, r6
 8000a78:	46a8      	mov	r8, r5
 8000a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a7c:	4643      	mov	r3, r8
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d13f      	bne.n	8000b02 <__aeabi_fdiv+0x15a>
 8000a82:	2202      	movs	r2, #2
 8000a84:	3fff      	subs	r7, #255	; 0xff
 8000a86:	e003      	b.n	8000a90 <__aeabi_fdiv+0xe8>
 8000a88:	4643      	mov	r3, r8
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d12d      	bne.n	8000aea <__aeabi_fdiv+0x142>
 8000a8e:	2201      	movs	r2, #1
 8000a90:	0031      	movs	r1, r6
 8000a92:	464b      	mov	r3, r9
 8000a94:	4061      	eors	r1, r4
 8000a96:	b2c9      	uxtb	r1, r1
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	2b0f      	cmp	r3, #15
 8000a9c:	d834      	bhi.n	8000b08 <__aeabi_fdiv+0x160>
 8000a9e:	484d      	ldr	r0, [pc, #308]	; (8000bd4 <__aeabi_fdiv+0x22c>)
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	58c3      	ldr	r3, [r0, r3]
 8000aa4:	469f      	mov	pc, r3
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d113      	bne.n	8000ad2 <__aeabi_fdiv+0x12a>
 8000aaa:	2304      	movs	r3, #4
 8000aac:	4699      	mov	r9, r3
 8000aae:	3b03      	subs	r3, #3
 8000ab0:	2700      	movs	r7, #0
 8000ab2:	469a      	mov	sl, r3
 8000ab4:	e791      	b.n	80009da <__aeabi_fdiv+0x32>
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d105      	bne.n	8000ac6 <__aeabi_fdiv+0x11e>
 8000aba:	2308      	movs	r3, #8
 8000abc:	4699      	mov	r9, r3
 8000abe:	3b06      	subs	r3, #6
 8000ac0:	27ff      	movs	r7, #255	; 0xff
 8000ac2:	469a      	mov	sl, r3
 8000ac4:	e789      	b.n	80009da <__aeabi_fdiv+0x32>
 8000ac6:	230c      	movs	r3, #12
 8000ac8:	4699      	mov	r9, r3
 8000aca:	3b09      	subs	r3, #9
 8000acc:	27ff      	movs	r7, #255	; 0xff
 8000ace:	469a      	mov	sl, r3
 8000ad0:	e783      	b.n	80009da <__aeabi_fdiv+0x32>
 8000ad2:	0028      	movs	r0, r5
 8000ad4:	f001 feee 	bl	80028b4 <__clzsi2>
 8000ad8:	2776      	movs	r7, #118	; 0x76
 8000ada:	1f43      	subs	r3, r0, #5
 8000adc:	409d      	lsls	r5, r3
 8000ade:	2300      	movs	r3, #0
 8000ae0:	427f      	negs	r7, r7
 8000ae2:	4699      	mov	r9, r3
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	1a3f      	subs	r7, r7, r0
 8000ae8:	e777      	b.n	80009da <__aeabi_fdiv+0x32>
 8000aea:	4640      	mov	r0, r8
 8000aec:	f001 fee2 	bl	80028b4 <__clzsi2>
 8000af0:	4642      	mov	r2, r8
 8000af2:	1f43      	subs	r3, r0, #5
 8000af4:	409a      	lsls	r2, r3
 8000af6:	2376      	movs	r3, #118	; 0x76
 8000af8:	425b      	negs	r3, r3
 8000afa:	4690      	mov	r8, r2
 8000afc:	1a1b      	subs	r3, r3, r0
 8000afe:	2200      	movs	r2, #0
 8000b00:	e77d      	b.n	80009fe <__aeabi_fdiv+0x56>
 8000b02:	23ff      	movs	r3, #255	; 0xff
 8000b04:	2203      	movs	r2, #3
 8000b06:	e77a      	b.n	80009fe <__aeabi_fdiv+0x56>
 8000b08:	000e      	movs	r6, r1
 8000b0a:	20ff      	movs	r0, #255	; 0xff
 8000b0c:	2500      	movs	r5, #0
 8000b0e:	e7ac      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000b10:	2001      	movs	r0, #1
 8000b12:	1ac0      	subs	r0, r0, r3
 8000b14:	281b      	cmp	r0, #27
 8000b16:	dca6      	bgt.n	8000a66 <__aeabi_fdiv+0xbe>
 8000b18:	379e      	adds	r7, #158	; 0x9e
 8000b1a:	002a      	movs	r2, r5
 8000b1c:	40bd      	lsls	r5, r7
 8000b1e:	40c2      	lsrs	r2, r0
 8000b20:	1e6b      	subs	r3, r5, #1
 8000b22:	419d      	sbcs	r5, r3
 8000b24:	4315      	orrs	r5, r2
 8000b26:	076b      	lsls	r3, r5, #29
 8000b28:	d004      	beq.n	8000b34 <__aeabi_fdiv+0x18c>
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	402b      	ands	r3, r5
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d000      	beq.n	8000b34 <__aeabi_fdiv+0x18c>
 8000b32:	3504      	adds	r5, #4
 8000b34:	016b      	lsls	r3, r5, #5
 8000b36:	d544      	bpl.n	8000bc2 <__aeabi_fdiv+0x21a>
 8000b38:	2001      	movs	r0, #1
 8000b3a:	2500      	movs	r5, #0
 8000b3c:	e795      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000b3e:	20ff      	movs	r0, #255	; 0xff
 8000b40:	2500      	movs	r5, #0
 8000b42:	e792      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000b44:	2580      	movs	r5, #128	; 0x80
 8000b46:	2600      	movs	r6, #0
 8000b48:	20ff      	movs	r0, #255	; 0xff
 8000b4a:	03ed      	lsls	r5, r5, #15
 8000b4c:	e78d      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	4698      	mov	r8, r3
 8000b52:	2080      	movs	r0, #128	; 0x80
 8000b54:	03c0      	lsls	r0, r0, #15
 8000b56:	4205      	tst	r5, r0
 8000b58:	d009      	beq.n	8000b6e <__aeabi_fdiv+0x1c6>
 8000b5a:	4643      	mov	r3, r8
 8000b5c:	4203      	tst	r3, r0
 8000b5e:	d106      	bne.n	8000b6e <__aeabi_fdiv+0x1c6>
 8000b60:	4645      	mov	r5, r8
 8000b62:	4305      	orrs	r5, r0
 8000b64:	026d      	lsls	r5, r5, #9
 8000b66:	0026      	movs	r6, r4
 8000b68:	20ff      	movs	r0, #255	; 0xff
 8000b6a:	0a6d      	lsrs	r5, r5, #9
 8000b6c:	e77d      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000b6e:	2080      	movs	r0, #128	; 0x80
 8000b70:	03c0      	lsls	r0, r0, #15
 8000b72:	4305      	orrs	r5, r0
 8000b74:	026d      	lsls	r5, r5, #9
 8000b76:	20ff      	movs	r0, #255	; 0xff
 8000b78:	0a6d      	lsrs	r5, r5, #9
 8000b7a:	e776      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000b7c:	4642      	mov	r2, r8
 8000b7e:	016b      	lsls	r3, r5, #5
 8000b80:	0150      	lsls	r0, r2, #5
 8000b82:	4283      	cmp	r3, r0
 8000b84:	d219      	bcs.n	8000bba <__aeabi_fdiv+0x212>
 8000b86:	221b      	movs	r2, #27
 8000b88:	2500      	movs	r5, #0
 8000b8a:	3f01      	subs	r7, #1
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	001c      	movs	r4, r3
 8000b90:	006d      	lsls	r5, r5, #1
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	2c00      	cmp	r4, #0
 8000b96:	db01      	blt.n	8000b9c <__aeabi_fdiv+0x1f4>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	d801      	bhi.n	8000ba0 <__aeabi_fdiv+0x1f8>
 8000b9c:	1a1b      	subs	r3, r3, r0
 8000b9e:	4335      	orrs	r5, r6
 8000ba0:	3a01      	subs	r2, #1
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	d1f3      	bne.n	8000b8e <__aeabi_fdiv+0x1e6>
 8000ba6:	1e5a      	subs	r2, r3, #1
 8000ba8:	4193      	sbcs	r3, r2
 8000baa:	431d      	orrs	r5, r3
 8000bac:	003b      	movs	r3, r7
 8000bae:	337f      	adds	r3, #127	; 0x7f
 8000bb0:	000e      	movs	r6, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	dd00      	ble.n	8000bb8 <__aeabi_fdiv+0x210>
 8000bb6:	e741      	b.n	8000a3c <__aeabi_fdiv+0x94>
 8000bb8:	e7aa      	b.n	8000b10 <__aeabi_fdiv+0x168>
 8000bba:	221a      	movs	r2, #26
 8000bbc:	2501      	movs	r5, #1
 8000bbe:	1a1b      	subs	r3, r3, r0
 8000bc0:	e7e4      	b.n	8000b8c <__aeabi_fdiv+0x1e4>
 8000bc2:	01ad      	lsls	r5, r5, #6
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	0a6d      	lsrs	r5, r5, #9
 8000bc8:	e74f      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	08007470 	.word	0x08007470
 8000bd0:	f7ffffff 	.word	0xf7ffffff
 8000bd4:	080074b0 	.word	0x080074b0

08000bd8 <__eqsf2>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	0042      	lsls	r2, r0, #1
 8000bdc:	0245      	lsls	r5, r0, #9
 8000bde:	024e      	lsls	r6, r1, #9
 8000be0:	004c      	lsls	r4, r1, #1
 8000be2:	0fc3      	lsrs	r3, r0, #31
 8000be4:	0a6d      	lsrs	r5, r5, #9
 8000be6:	2001      	movs	r0, #1
 8000be8:	0e12      	lsrs	r2, r2, #24
 8000bea:	0a76      	lsrs	r6, r6, #9
 8000bec:	0e24      	lsrs	r4, r4, #24
 8000bee:	0fc9      	lsrs	r1, r1, #31
 8000bf0:	2aff      	cmp	r2, #255	; 0xff
 8000bf2:	d006      	beq.n	8000c02 <__eqsf2+0x2a>
 8000bf4:	2cff      	cmp	r4, #255	; 0xff
 8000bf6:	d003      	beq.n	8000c00 <__eqsf2+0x28>
 8000bf8:	42a2      	cmp	r2, r4
 8000bfa:	d101      	bne.n	8000c00 <__eqsf2+0x28>
 8000bfc:	42b5      	cmp	r5, r6
 8000bfe:	d006      	beq.n	8000c0e <__eqsf2+0x36>
 8000c00:	bd70      	pop	{r4, r5, r6, pc}
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	d1fc      	bne.n	8000c00 <__eqsf2+0x28>
 8000c06:	2cff      	cmp	r4, #255	; 0xff
 8000c08:	d1fa      	bne.n	8000c00 <__eqsf2+0x28>
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d1f8      	bne.n	8000c00 <__eqsf2+0x28>
 8000c0e:	428b      	cmp	r3, r1
 8000c10:	d006      	beq.n	8000c20 <__eqsf2+0x48>
 8000c12:	2001      	movs	r0, #1
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	d1f3      	bne.n	8000c00 <__eqsf2+0x28>
 8000c18:	0028      	movs	r0, r5
 8000c1a:	1e43      	subs	r3, r0, #1
 8000c1c:	4198      	sbcs	r0, r3
 8000c1e:	e7ef      	b.n	8000c00 <__eqsf2+0x28>
 8000c20:	2000      	movs	r0, #0
 8000c22:	e7ed      	b.n	8000c00 <__eqsf2+0x28>

08000c24 <__gesf2>:
 8000c24:	b570      	push	{r4, r5, r6, lr}
 8000c26:	0042      	lsls	r2, r0, #1
 8000c28:	0245      	lsls	r5, r0, #9
 8000c2a:	024e      	lsls	r6, r1, #9
 8000c2c:	004c      	lsls	r4, r1, #1
 8000c2e:	0fc3      	lsrs	r3, r0, #31
 8000c30:	0a6d      	lsrs	r5, r5, #9
 8000c32:	0e12      	lsrs	r2, r2, #24
 8000c34:	0a76      	lsrs	r6, r6, #9
 8000c36:	0e24      	lsrs	r4, r4, #24
 8000c38:	0fc8      	lsrs	r0, r1, #31
 8000c3a:	2aff      	cmp	r2, #255	; 0xff
 8000c3c:	d01b      	beq.n	8000c76 <__gesf2+0x52>
 8000c3e:	2cff      	cmp	r4, #255	; 0xff
 8000c40:	d00e      	beq.n	8000c60 <__gesf2+0x3c>
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d11b      	bne.n	8000c7e <__gesf2+0x5a>
 8000c46:	2c00      	cmp	r4, #0
 8000c48:	d101      	bne.n	8000c4e <__gesf2+0x2a>
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d01c      	beq.n	8000c88 <__gesf2+0x64>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d00c      	beq.n	8000c6c <__gesf2+0x48>
 8000c52:	4283      	cmp	r3, r0
 8000c54:	d01c      	beq.n	8000c90 <__gesf2+0x6c>
 8000c56:	2102      	movs	r1, #2
 8000c58:	1e58      	subs	r0, r3, #1
 8000c5a:	4008      	ands	r0, r1
 8000c5c:	3801      	subs	r0, #1
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
 8000c60:	2e00      	cmp	r6, #0
 8000c62:	d122      	bne.n	8000caa <__gesf2+0x86>
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	d1f4      	bne.n	8000c52 <__gesf2+0x2e>
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d1f2      	bne.n	8000c52 <__gesf2+0x2e>
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	d1f6      	bne.n	8000c5e <__gesf2+0x3a>
 8000c70:	2001      	movs	r0, #1
 8000c72:	4240      	negs	r0, r0
 8000c74:	e7f3      	b.n	8000c5e <__gesf2+0x3a>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d117      	bne.n	8000caa <__gesf2+0x86>
 8000c7a:	2cff      	cmp	r4, #255	; 0xff
 8000c7c:	d0f0      	beq.n	8000c60 <__gesf2+0x3c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1e7      	bne.n	8000c52 <__gesf2+0x2e>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d1e5      	bne.n	8000c52 <__gesf2+0x2e>
 8000c86:	e7e6      	b.n	8000c56 <__gesf2+0x32>
 8000c88:	2000      	movs	r0, #0
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e7      	beq.n	8000c5e <__gesf2+0x3a>
 8000c8e:	e7e2      	b.n	8000c56 <__gesf2+0x32>
 8000c90:	42a2      	cmp	r2, r4
 8000c92:	dc05      	bgt.n	8000ca0 <__gesf2+0x7c>
 8000c94:	dbea      	blt.n	8000c6c <__gesf2+0x48>
 8000c96:	42b5      	cmp	r5, r6
 8000c98:	d802      	bhi.n	8000ca0 <__gesf2+0x7c>
 8000c9a:	d3e7      	bcc.n	8000c6c <__gesf2+0x48>
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	e7de      	b.n	8000c5e <__gesf2+0x3a>
 8000ca0:	4243      	negs	r3, r0
 8000ca2:	4158      	adcs	r0, r3
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	3801      	subs	r0, #1
 8000ca8:	e7d9      	b.n	8000c5e <__gesf2+0x3a>
 8000caa:	2002      	movs	r0, #2
 8000cac:	4240      	negs	r0, r0
 8000cae:	e7d6      	b.n	8000c5e <__gesf2+0x3a>

08000cb0 <__lesf2>:
 8000cb0:	b570      	push	{r4, r5, r6, lr}
 8000cb2:	0042      	lsls	r2, r0, #1
 8000cb4:	0245      	lsls	r5, r0, #9
 8000cb6:	024e      	lsls	r6, r1, #9
 8000cb8:	004c      	lsls	r4, r1, #1
 8000cba:	0fc3      	lsrs	r3, r0, #31
 8000cbc:	0a6d      	lsrs	r5, r5, #9
 8000cbe:	0e12      	lsrs	r2, r2, #24
 8000cc0:	0a76      	lsrs	r6, r6, #9
 8000cc2:	0e24      	lsrs	r4, r4, #24
 8000cc4:	0fc8      	lsrs	r0, r1, #31
 8000cc6:	2aff      	cmp	r2, #255	; 0xff
 8000cc8:	d00b      	beq.n	8000ce2 <__lesf2+0x32>
 8000cca:	2cff      	cmp	r4, #255	; 0xff
 8000ccc:	d00d      	beq.n	8000cea <__lesf2+0x3a>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	d11f      	bne.n	8000d12 <__lesf2+0x62>
 8000cd2:	2c00      	cmp	r4, #0
 8000cd4:	d116      	bne.n	8000d04 <__lesf2+0x54>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d114      	bne.n	8000d04 <__lesf2+0x54>
 8000cda:	2000      	movs	r0, #0
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d010      	beq.n	8000d02 <__lesf2+0x52>
 8000ce0:	e009      	b.n	8000cf6 <__lesf2+0x46>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	d10c      	bne.n	8000d00 <__lesf2+0x50>
 8000ce6:	2cff      	cmp	r4, #255	; 0xff
 8000ce8:	d113      	bne.n	8000d12 <__lesf2+0x62>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d108      	bne.n	8000d00 <__lesf2+0x50>
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	d008      	beq.n	8000d04 <__lesf2+0x54>
 8000cf2:	4283      	cmp	r3, r0
 8000cf4:	d012      	beq.n	8000d1c <__lesf2+0x6c>
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	1e58      	subs	r0, r3, #1
 8000cfa:	4008      	ands	r0, r1
 8000cfc:	3801      	subs	r0, #1
 8000cfe:	e000      	b.n	8000d02 <__lesf2+0x52>
 8000d00:	2002      	movs	r0, #2
 8000d02:	bd70      	pop	{r4, r5, r6, pc}
 8000d04:	2d00      	cmp	r5, #0
 8000d06:	d1f4      	bne.n	8000cf2 <__lesf2+0x42>
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d1fa      	bne.n	8000d02 <__lesf2+0x52>
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4240      	negs	r0, r0
 8000d10:	e7f7      	b.n	8000d02 <__lesf2+0x52>
 8000d12:	2c00      	cmp	r4, #0
 8000d14:	d1ed      	bne.n	8000cf2 <__lesf2+0x42>
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d1eb      	bne.n	8000cf2 <__lesf2+0x42>
 8000d1a:	e7ec      	b.n	8000cf6 <__lesf2+0x46>
 8000d1c:	42a2      	cmp	r2, r4
 8000d1e:	dc05      	bgt.n	8000d2c <__lesf2+0x7c>
 8000d20:	dbf2      	blt.n	8000d08 <__lesf2+0x58>
 8000d22:	42b5      	cmp	r5, r6
 8000d24:	d802      	bhi.n	8000d2c <__lesf2+0x7c>
 8000d26:	d3ef      	bcc.n	8000d08 <__lesf2+0x58>
 8000d28:	2000      	movs	r0, #0
 8000d2a:	e7ea      	b.n	8000d02 <__lesf2+0x52>
 8000d2c:	4243      	negs	r3, r0
 8000d2e:	4158      	adcs	r0, r3
 8000d30:	0040      	lsls	r0, r0, #1
 8000d32:	3801      	subs	r0, #1
 8000d34:	e7e5      	b.n	8000d02 <__lesf2+0x52>
 8000d36:	46c0      	nop			; (mov r8, r8)

08000d38 <__aeabi_fmul>:
 8000d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3a:	464f      	mov	r7, r9
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	0244      	lsls	r4, r0, #9
 8000d42:	0045      	lsls	r5, r0, #1
 8000d44:	b5c0      	push	{r6, r7, lr}
 8000d46:	0a64      	lsrs	r4, r4, #9
 8000d48:	1c0f      	adds	r7, r1, #0
 8000d4a:	0e2d      	lsrs	r5, r5, #24
 8000d4c:	0fc6      	lsrs	r6, r0, #31
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	d100      	bne.n	8000d54 <__aeabi_fmul+0x1c>
 8000d52:	e08d      	b.n	8000e70 <__aeabi_fmul+0x138>
 8000d54:	2dff      	cmp	r5, #255	; 0xff
 8000d56:	d100      	bne.n	8000d5a <__aeabi_fmul+0x22>
 8000d58:	e092      	b.n	8000e80 <__aeabi_fmul+0x148>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2080      	movs	r0, #128	; 0x80
 8000d5e:	4699      	mov	r9, r3
 8000d60:	469a      	mov	sl, r3
 8000d62:	00e4      	lsls	r4, r4, #3
 8000d64:	04c0      	lsls	r0, r0, #19
 8000d66:	4304      	orrs	r4, r0
 8000d68:	3d7f      	subs	r5, #127	; 0x7f
 8000d6a:	0278      	lsls	r0, r7, #9
 8000d6c:	0a43      	lsrs	r3, r0, #9
 8000d6e:	4698      	mov	r8, r3
 8000d70:	007b      	lsls	r3, r7, #1
 8000d72:	0e1b      	lsrs	r3, r3, #24
 8000d74:	0fff      	lsrs	r7, r7, #31
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d100      	bne.n	8000d7c <__aeabi_fmul+0x44>
 8000d7a:	e070      	b.n	8000e5e <__aeabi_fmul+0x126>
 8000d7c:	2bff      	cmp	r3, #255	; 0xff
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_fmul+0x4a>
 8000d80:	e086      	b.n	8000e90 <__aeabi_fmul+0x158>
 8000d82:	4642      	mov	r2, r8
 8000d84:	00d0      	lsls	r0, r2, #3
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	3b7f      	subs	r3, #127	; 0x7f
 8000d8a:	18ed      	adds	r5, r5, r3
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	04d2      	lsls	r2, r2, #19
 8000d90:	4302      	orrs	r2, r0
 8000d92:	4690      	mov	r8, r2
 8000d94:	469c      	mov	ip, r3
 8000d96:	0031      	movs	r1, r6
 8000d98:	464b      	mov	r3, r9
 8000d9a:	4079      	eors	r1, r7
 8000d9c:	1c68      	adds	r0, r5, #1
 8000d9e:	2b0f      	cmp	r3, #15
 8000da0:	d81c      	bhi.n	8000ddc <__aeabi_fmul+0xa4>
 8000da2:	4a76      	ldr	r2, [pc, #472]	; (8000f7c <__aeabi_fmul+0x244>)
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	58d3      	ldr	r3, [r2, r3]
 8000da8:	469f      	mov	pc, r3
 8000daa:	0039      	movs	r1, r7
 8000dac:	4644      	mov	r4, r8
 8000dae:	46e2      	mov	sl, ip
 8000db0:	4653      	mov	r3, sl
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d00f      	beq.n	8000dd6 <__aeabi_fmul+0x9e>
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d100      	bne.n	8000dbc <__aeabi_fmul+0x84>
 8000dba:	e0d7      	b.n	8000f6c <__aeabi_fmul+0x234>
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d137      	bne.n	8000e30 <__aeabi_fmul+0xf8>
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	2400      	movs	r4, #0
 8000dc4:	05c0      	lsls	r0, r0, #23
 8000dc6:	4320      	orrs	r0, r4
 8000dc8:	07c9      	lsls	r1, r1, #31
 8000dca:	4308      	orrs	r0, r1
 8000dcc:	bce0      	pop	{r5, r6, r7}
 8000dce:	46ba      	mov	sl, r7
 8000dd0:	46b1      	mov	r9, r6
 8000dd2:	46a8      	mov	r8, r5
 8000dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd6:	20ff      	movs	r0, #255	; 0xff
 8000dd8:	2400      	movs	r4, #0
 8000dda:	e7f3      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000ddc:	0c26      	lsrs	r6, r4, #16
 8000dde:	0424      	lsls	r4, r4, #16
 8000de0:	0c22      	lsrs	r2, r4, #16
 8000de2:	4644      	mov	r4, r8
 8000de4:	0424      	lsls	r4, r4, #16
 8000de6:	0c24      	lsrs	r4, r4, #16
 8000de8:	4643      	mov	r3, r8
 8000dea:	0027      	movs	r7, r4
 8000dec:	0c1b      	lsrs	r3, r3, #16
 8000dee:	4357      	muls	r7, r2
 8000df0:	4374      	muls	r4, r6
 8000df2:	435a      	muls	r2, r3
 8000df4:	435e      	muls	r6, r3
 8000df6:	1912      	adds	r2, r2, r4
 8000df8:	0c3b      	lsrs	r3, r7, #16
 8000dfa:	189b      	adds	r3, r3, r2
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	d903      	bls.n	8000e08 <__aeabi_fmul+0xd0>
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	0252      	lsls	r2, r2, #9
 8000e04:	4694      	mov	ip, r2
 8000e06:	4466      	add	r6, ip
 8000e08:	043f      	lsls	r7, r7, #16
 8000e0a:	041a      	lsls	r2, r3, #16
 8000e0c:	0c3f      	lsrs	r7, r7, #16
 8000e0e:	19d2      	adds	r2, r2, r7
 8000e10:	0194      	lsls	r4, r2, #6
 8000e12:	1e67      	subs	r7, r4, #1
 8000e14:	41bc      	sbcs	r4, r7
 8000e16:	0c1b      	lsrs	r3, r3, #16
 8000e18:	0e92      	lsrs	r2, r2, #26
 8000e1a:	199b      	adds	r3, r3, r6
 8000e1c:	4314      	orrs	r4, r2
 8000e1e:	019b      	lsls	r3, r3, #6
 8000e20:	431c      	orrs	r4, r3
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	d400      	bmi.n	8000e28 <__aeabi_fmul+0xf0>
 8000e26:	e09b      	b.n	8000f60 <__aeabi_fmul+0x228>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	0862      	lsrs	r2, r4, #1
 8000e2c:	401c      	ands	r4, r3
 8000e2e:	4314      	orrs	r4, r2
 8000e30:	0002      	movs	r2, r0
 8000e32:	327f      	adds	r2, #127	; 0x7f
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	dd64      	ble.n	8000f02 <__aeabi_fmul+0x1ca>
 8000e38:	0763      	lsls	r3, r4, #29
 8000e3a:	d004      	beq.n	8000e46 <__aeabi_fmul+0x10e>
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	4023      	ands	r3, r4
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d000      	beq.n	8000e46 <__aeabi_fmul+0x10e>
 8000e44:	3404      	adds	r4, #4
 8000e46:	0123      	lsls	r3, r4, #4
 8000e48:	d503      	bpl.n	8000e52 <__aeabi_fmul+0x11a>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <__aeabi_fmul+0x248>)
 8000e4e:	3280      	adds	r2, #128	; 0x80
 8000e50:	401c      	ands	r4, r3
 8000e52:	2afe      	cmp	r2, #254	; 0xfe
 8000e54:	dcbf      	bgt.n	8000dd6 <__aeabi_fmul+0x9e>
 8000e56:	01a4      	lsls	r4, r4, #6
 8000e58:	0a64      	lsrs	r4, r4, #9
 8000e5a:	b2d0      	uxtb	r0, r2
 8000e5c:	e7b2      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d13d      	bne.n	8000ee0 <__aeabi_fmul+0x1a8>
 8000e64:	464a      	mov	r2, r9
 8000e66:	3301      	adds	r3, #1
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	4691      	mov	r9, r2
 8000e6c:	469c      	mov	ip, r3
 8000e6e:	e792      	b.n	8000d96 <__aeabi_fmul+0x5e>
 8000e70:	2c00      	cmp	r4, #0
 8000e72:	d129      	bne.n	8000ec8 <__aeabi_fmul+0x190>
 8000e74:	2304      	movs	r3, #4
 8000e76:	4699      	mov	r9, r3
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	469a      	mov	sl, r3
 8000e7e:	e774      	b.n	8000d6a <__aeabi_fmul+0x32>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d11b      	bne.n	8000ebc <__aeabi_fmul+0x184>
 8000e84:	2308      	movs	r3, #8
 8000e86:	4699      	mov	r9, r3
 8000e88:	3b06      	subs	r3, #6
 8000e8a:	25ff      	movs	r5, #255	; 0xff
 8000e8c:	469a      	mov	sl, r3
 8000e8e:	e76c      	b.n	8000d6a <__aeabi_fmul+0x32>
 8000e90:	4643      	mov	r3, r8
 8000e92:	35ff      	adds	r5, #255	; 0xff
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10b      	bne.n	8000eb0 <__aeabi_fmul+0x178>
 8000e98:	2302      	movs	r3, #2
 8000e9a:	464a      	mov	r2, r9
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	4691      	mov	r9, r2
 8000ea0:	469c      	mov	ip, r3
 8000ea2:	e778      	b.n	8000d96 <__aeabi_fmul+0x5e>
 8000ea4:	4653      	mov	r3, sl
 8000ea6:	0031      	movs	r1, r6
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d000      	beq.n	8000eae <__aeabi_fmul+0x176>
 8000eac:	e783      	b.n	8000db6 <__aeabi_fmul+0x7e>
 8000eae:	e792      	b.n	8000dd6 <__aeabi_fmul+0x9e>
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	464a      	mov	r2, r9
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	4691      	mov	r9, r2
 8000eb8:	469c      	mov	ip, r3
 8000eba:	e76c      	b.n	8000d96 <__aeabi_fmul+0x5e>
 8000ebc:	230c      	movs	r3, #12
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	3b09      	subs	r3, #9
 8000ec2:	25ff      	movs	r5, #255	; 0xff
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	e750      	b.n	8000d6a <__aeabi_fmul+0x32>
 8000ec8:	0020      	movs	r0, r4
 8000eca:	f001 fcf3 	bl	80028b4 <__clzsi2>
 8000ece:	2576      	movs	r5, #118	; 0x76
 8000ed0:	1f43      	subs	r3, r0, #5
 8000ed2:	409c      	lsls	r4, r3
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	426d      	negs	r5, r5
 8000ed8:	4699      	mov	r9, r3
 8000eda:	469a      	mov	sl, r3
 8000edc:	1a2d      	subs	r5, r5, r0
 8000ede:	e744      	b.n	8000d6a <__aeabi_fmul+0x32>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	f001 fce7 	bl	80028b4 <__clzsi2>
 8000ee6:	4642      	mov	r2, r8
 8000ee8:	1f43      	subs	r3, r0, #5
 8000eea:	409a      	lsls	r2, r3
 8000eec:	2300      	movs	r3, #0
 8000eee:	1a2d      	subs	r5, r5, r0
 8000ef0:	4690      	mov	r8, r2
 8000ef2:	469c      	mov	ip, r3
 8000ef4:	3d76      	subs	r5, #118	; 0x76
 8000ef6:	e74e      	b.n	8000d96 <__aeabi_fmul+0x5e>
 8000ef8:	2480      	movs	r4, #128	; 0x80
 8000efa:	2100      	movs	r1, #0
 8000efc:	20ff      	movs	r0, #255	; 0xff
 8000efe:	03e4      	lsls	r4, r4, #15
 8000f00:	e760      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000f02:	2301      	movs	r3, #1
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	2b1b      	cmp	r3, #27
 8000f08:	dd00      	ble.n	8000f0c <__aeabi_fmul+0x1d4>
 8000f0a:	e759      	b.n	8000dc0 <__aeabi_fmul+0x88>
 8000f0c:	0022      	movs	r2, r4
 8000f0e:	309e      	adds	r0, #158	; 0x9e
 8000f10:	40da      	lsrs	r2, r3
 8000f12:	4084      	lsls	r4, r0
 8000f14:	0013      	movs	r3, r2
 8000f16:	1e62      	subs	r2, r4, #1
 8000f18:	4194      	sbcs	r4, r2
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	0763      	lsls	r3, r4, #29
 8000f1e:	d004      	beq.n	8000f2a <__aeabi_fmul+0x1f2>
 8000f20:	230f      	movs	r3, #15
 8000f22:	4023      	ands	r3, r4
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fmul+0x1f2>
 8000f28:	3404      	adds	r4, #4
 8000f2a:	0163      	lsls	r3, r4, #5
 8000f2c:	d51a      	bpl.n	8000f64 <__aeabi_fmul+0x22c>
 8000f2e:	2001      	movs	r0, #1
 8000f30:	2400      	movs	r4, #0
 8000f32:	e747      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000f34:	2080      	movs	r0, #128	; 0x80
 8000f36:	03c0      	lsls	r0, r0, #15
 8000f38:	4204      	tst	r4, r0
 8000f3a:	d009      	beq.n	8000f50 <__aeabi_fmul+0x218>
 8000f3c:	4643      	mov	r3, r8
 8000f3e:	4203      	tst	r3, r0
 8000f40:	d106      	bne.n	8000f50 <__aeabi_fmul+0x218>
 8000f42:	4644      	mov	r4, r8
 8000f44:	4304      	orrs	r4, r0
 8000f46:	0264      	lsls	r4, r4, #9
 8000f48:	0039      	movs	r1, r7
 8000f4a:	20ff      	movs	r0, #255	; 0xff
 8000f4c:	0a64      	lsrs	r4, r4, #9
 8000f4e:	e739      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000f50:	2080      	movs	r0, #128	; 0x80
 8000f52:	03c0      	lsls	r0, r0, #15
 8000f54:	4304      	orrs	r4, r0
 8000f56:	0264      	lsls	r4, r4, #9
 8000f58:	0031      	movs	r1, r6
 8000f5a:	20ff      	movs	r0, #255	; 0xff
 8000f5c:	0a64      	lsrs	r4, r4, #9
 8000f5e:	e731      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000f60:	0028      	movs	r0, r5
 8000f62:	e765      	b.n	8000e30 <__aeabi_fmul+0xf8>
 8000f64:	01a4      	lsls	r4, r4, #6
 8000f66:	2000      	movs	r0, #0
 8000f68:	0a64      	lsrs	r4, r4, #9
 8000f6a:	e72b      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000f6c:	2080      	movs	r0, #128	; 0x80
 8000f6e:	03c0      	lsls	r0, r0, #15
 8000f70:	4304      	orrs	r4, r0
 8000f72:	0264      	lsls	r4, r4, #9
 8000f74:	20ff      	movs	r0, #255	; 0xff
 8000f76:	0a64      	lsrs	r4, r4, #9
 8000f78:	e724      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	080074f0 	.word	0x080074f0
 8000f80:	f7ffffff 	.word	0xf7ffffff

08000f84 <__aeabi_fsub>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	46ce      	mov	lr, r9
 8000f88:	4647      	mov	r7, r8
 8000f8a:	0243      	lsls	r3, r0, #9
 8000f8c:	0a5b      	lsrs	r3, r3, #9
 8000f8e:	024e      	lsls	r6, r1, #9
 8000f90:	00da      	lsls	r2, r3, #3
 8000f92:	4694      	mov	ip, r2
 8000f94:	0a72      	lsrs	r2, r6, #9
 8000f96:	4691      	mov	r9, r2
 8000f98:	0045      	lsls	r5, r0, #1
 8000f9a:	004a      	lsls	r2, r1, #1
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	0e2d      	lsrs	r5, r5, #24
 8000fa0:	001f      	movs	r7, r3
 8000fa2:	0fc4      	lsrs	r4, r0, #31
 8000fa4:	0e12      	lsrs	r2, r2, #24
 8000fa6:	0fc9      	lsrs	r1, r1, #31
 8000fa8:	09b6      	lsrs	r6, r6, #6
 8000faa:	2aff      	cmp	r2, #255	; 0xff
 8000fac:	d05b      	beq.n	8001066 <__aeabi_fsub+0xe2>
 8000fae:	2001      	movs	r0, #1
 8000fb0:	4041      	eors	r1, r0
 8000fb2:	428c      	cmp	r4, r1
 8000fb4:	d039      	beq.n	800102a <__aeabi_fsub+0xa6>
 8000fb6:	1aa8      	subs	r0, r5, r2
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	dd5a      	ble.n	8001072 <__aeabi_fsub+0xee>
 8000fbc:	2a00      	cmp	r2, #0
 8000fbe:	d06a      	beq.n	8001096 <__aeabi_fsub+0x112>
 8000fc0:	2dff      	cmp	r5, #255	; 0xff
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_fsub+0x42>
 8000fc4:	e0d9      	b.n	800117a <__aeabi_fsub+0x1f6>
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	4316      	orrs	r6, r2
 8000fcc:	281b      	cmp	r0, #27
 8000fce:	dc00      	bgt.n	8000fd2 <__aeabi_fsub+0x4e>
 8000fd0:	e0e9      	b.n	80011a6 <__aeabi_fsub+0x222>
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	4663      	mov	r3, ip
 8000fd6:	1a18      	subs	r0, r3, r0
 8000fd8:	0143      	lsls	r3, r0, #5
 8000fda:	d400      	bmi.n	8000fde <__aeabi_fsub+0x5a>
 8000fdc:	e0b4      	b.n	8001148 <__aeabi_fsub+0x1c4>
 8000fde:	0180      	lsls	r0, r0, #6
 8000fe0:	0987      	lsrs	r7, r0, #6
 8000fe2:	0038      	movs	r0, r7
 8000fe4:	f001 fc66 	bl	80028b4 <__clzsi2>
 8000fe8:	3805      	subs	r0, #5
 8000fea:	4087      	lsls	r7, r0
 8000fec:	4285      	cmp	r5, r0
 8000fee:	dc00      	bgt.n	8000ff2 <__aeabi_fsub+0x6e>
 8000ff0:	e0cc      	b.n	800118c <__aeabi_fsub+0x208>
 8000ff2:	1a2d      	subs	r5, r5, r0
 8000ff4:	48b5      	ldr	r0, [pc, #724]	; (80012cc <__aeabi_fsub+0x348>)
 8000ff6:	4038      	ands	r0, r7
 8000ff8:	0743      	lsls	r3, r0, #29
 8000ffa:	d004      	beq.n	8001006 <__aeabi_fsub+0x82>
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	4003      	ands	r3, r0
 8001000:	2b04      	cmp	r3, #4
 8001002:	d000      	beq.n	8001006 <__aeabi_fsub+0x82>
 8001004:	3004      	adds	r0, #4
 8001006:	0143      	lsls	r3, r0, #5
 8001008:	d400      	bmi.n	800100c <__aeabi_fsub+0x88>
 800100a:	e0a0      	b.n	800114e <__aeabi_fsub+0x1ca>
 800100c:	1c6a      	adds	r2, r5, #1
 800100e:	2dfe      	cmp	r5, #254	; 0xfe
 8001010:	d100      	bne.n	8001014 <__aeabi_fsub+0x90>
 8001012:	e08d      	b.n	8001130 <__aeabi_fsub+0x1ac>
 8001014:	0180      	lsls	r0, r0, #6
 8001016:	0a47      	lsrs	r7, r0, #9
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	05d0      	lsls	r0, r2, #23
 800101c:	4338      	orrs	r0, r7
 800101e:	07e4      	lsls	r4, r4, #31
 8001020:	4320      	orrs	r0, r4
 8001022:	bcc0      	pop	{r6, r7}
 8001024:	46b9      	mov	r9, r7
 8001026:	46b0      	mov	r8, r6
 8001028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800102a:	1aa8      	subs	r0, r5, r2
 800102c:	4680      	mov	r8, r0
 800102e:	2800      	cmp	r0, #0
 8001030:	dd45      	ble.n	80010be <__aeabi_fsub+0x13a>
 8001032:	2a00      	cmp	r2, #0
 8001034:	d070      	beq.n	8001118 <__aeabi_fsub+0x194>
 8001036:	2dff      	cmp	r5, #255	; 0xff
 8001038:	d100      	bne.n	800103c <__aeabi_fsub+0xb8>
 800103a:	e09e      	b.n	800117a <__aeabi_fsub+0x1f6>
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	04db      	lsls	r3, r3, #19
 8001040:	431e      	orrs	r6, r3
 8001042:	4643      	mov	r3, r8
 8001044:	2b1b      	cmp	r3, #27
 8001046:	dc00      	bgt.n	800104a <__aeabi_fsub+0xc6>
 8001048:	e0d2      	b.n	80011f0 <__aeabi_fsub+0x26c>
 800104a:	2001      	movs	r0, #1
 800104c:	4460      	add	r0, ip
 800104e:	0143      	lsls	r3, r0, #5
 8001050:	d57a      	bpl.n	8001148 <__aeabi_fsub+0x1c4>
 8001052:	3501      	adds	r5, #1
 8001054:	2dff      	cmp	r5, #255	; 0xff
 8001056:	d06b      	beq.n	8001130 <__aeabi_fsub+0x1ac>
 8001058:	2301      	movs	r3, #1
 800105a:	4a9d      	ldr	r2, [pc, #628]	; (80012d0 <__aeabi_fsub+0x34c>)
 800105c:	4003      	ands	r3, r0
 800105e:	0840      	lsrs	r0, r0, #1
 8001060:	4010      	ands	r0, r2
 8001062:	4318      	orrs	r0, r3
 8001064:	e7c8      	b.n	8000ff8 <__aeabi_fsub+0x74>
 8001066:	2e00      	cmp	r6, #0
 8001068:	d020      	beq.n	80010ac <__aeabi_fsub+0x128>
 800106a:	428c      	cmp	r4, r1
 800106c:	d023      	beq.n	80010b6 <__aeabi_fsub+0x132>
 800106e:	0028      	movs	r0, r5
 8001070:	38ff      	subs	r0, #255	; 0xff
 8001072:	2800      	cmp	r0, #0
 8001074:	d039      	beq.n	80010ea <__aeabi_fsub+0x166>
 8001076:	1b57      	subs	r7, r2, r5
 8001078:	2d00      	cmp	r5, #0
 800107a:	d000      	beq.n	800107e <__aeabi_fsub+0xfa>
 800107c:	e09d      	b.n	80011ba <__aeabi_fsub+0x236>
 800107e:	4663      	mov	r3, ip
 8001080:	2b00      	cmp	r3, #0
 8001082:	d100      	bne.n	8001086 <__aeabi_fsub+0x102>
 8001084:	e0db      	b.n	800123e <__aeabi_fsub+0x2ba>
 8001086:	1e7b      	subs	r3, r7, #1
 8001088:	2f01      	cmp	r7, #1
 800108a:	d100      	bne.n	800108e <__aeabi_fsub+0x10a>
 800108c:	e10d      	b.n	80012aa <__aeabi_fsub+0x326>
 800108e:	2fff      	cmp	r7, #255	; 0xff
 8001090:	d071      	beq.n	8001176 <__aeabi_fsub+0x1f2>
 8001092:	001f      	movs	r7, r3
 8001094:	e098      	b.n	80011c8 <__aeabi_fsub+0x244>
 8001096:	2e00      	cmp	r6, #0
 8001098:	d100      	bne.n	800109c <__aeabi_fsub+0x118>
 800109a:	e0a7      	b.n	80011ec <__aeabi_fsub+0x268>
 800109c:	1e42      	subs	r2, r0, #1
 800109e:	2801      	cmp	r0, #1
 80010a0:	d100      	bne.n	80010a4 <__aeabi_fsub+0x120>
 80010a2:	e0e6      	b.n	8001272 <__aeabi_fsub+0x2ee>
 80010a4:	28ff      	cmp	r0, #255	; 0xff
 80010a6:	d068      	beq.n	800117a <__aeabi_fsub+0x1f6>
 80010a8:	0010      	movs	r0, r2
 80010aa:	e78f      	b.n	8000fcc <__aeabi_fsub+0x48>
 80010ac:	2001      	movs	r0, #1
 80010ae:	4041      	eors	r1, r0
 80010b0:	42a1      	cmp	r1, r4
 80010b2:	d000      	beq.n	80010b6 <__aeabi_fsub+0x132>
 80010b4:	e77f      	b.n	8000fb6 <__aeabi_fsub+0x32>
 80010b6:	20ff      	movs	r0, #255	; 0xff
 80010b8:	4240      	negs	r0, r0
 80010ba:	4680      	mov	r8, r0
 80010bc:	44a8      	add	r8, r5
 80010be:	4640      	mov	r0, r8
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d038      	beq.n	8001136 <__aeabi_fsub+0x1b2>
 80010c4:	1b51      	subs	r1, r2, r5
 80010c6:	2d00      	cmp	r5, #0
 80010c8:	d100      	bne.n	80010cc <__aeabi_fsub+0x148>
 80010ca:	e0ae      	b.n	800122a <__aeabi_fsub+0x2a6>
 80010cc:	2aff      	cmp	r2, #255	; 0xff
 80010ce:	d100      	bne.n	80010d2 <__aeabi_fsub+0x14e>
 80010d0:	e0df      	b.n	8001292 <__aeabi_fsub+0x30e>
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	4660      	mov	r0, ip
 80010d6:	04db      	lsls	r3, r3, #19
 80010d8:	4318      	orrs	r0, r3
 80010da:	4684      	mov	ip, r0
 80010dc:	291b      	cmp	r1, #27
 80010de:	dc00      	bgt.n	80010e2 <__aeabi_fsub+0x15e>
 80010e0:	e0d9      	b.n	8001296 <__aeabi_fsub+0x312>
 80010e2:	2001      	movs	r0, #1
 80010e4:	0015      	movs	r5, r2
 80010e6:	1980      	adds	r0, r0, r6
 80010e8:	e7b1      	b.n	800104e <__aeabi_fsub+0xca>
 80010ea:	20fe      	movs	r0, #254	; 0xfe
 80010ec:	1c6a      	adds	r2, r5, #1
 80010ee:	4210      	tst	r0, r2
 80010f0:	d171      	bne.n	80011d6 <__aeabi_fsub+0x252>
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d000      	beq.n	80010f8 <__aeabi_fsub+0x174>
 80010f6:	e0a6      	b.n	8001246 <__aeabi_fsub+0x2c2>
 80010f8:	4663      	mov	r3, ip
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d100      	bne.n	8001100 <__aeabi_fsub+0x17c>
 80010fe:	e0d9      	b.n	80012b4 <__aeabi_fsub+0x330>
 8001100:	2200      	movs	r2, #0
 8001102:	2e00      	cmp	r6, #0
 8001104:	d100      	bne.n	8001108 <__aeabi_fsub+0x184>
 8001106:	e788      	b.n	800101a <__aeabi_fsub+0x96>
 8001108:	1b98      	subs	r0, r3, r6
 800110a:	0143      	lsls	r3, r0, #5
 800110c:	d400      	bmi.n	8001110 <__aeabi_fsub+0x18c>
 800110e:	e0e1      	b.n	80012d4 <__aeabi_fsub+0x350>
 8001110:	4663      	mov	r3, ip
 8001112:	000c      	movs	r4, r1
 8001114:	1af0      	subs	r0, r6, r3
 8001116:	e76f      	b.n	8000ff8 <__aeabi_fsub+0x74>
 8001118:	2e00      	cmp	r6, #0
 800111a:	d100      	bne.n	800111e <__aeabi_fsub+0x19a>
 800111c:	e0b7      	b.n	800128e <__aeabi_fsub+0x30a>
 800111e:	0002      	movs	r2, r0
 8001120:	3a01      	subs	r2, #1
 8001122:	2801      	cmp	r0, #1
 8001124:	d100      	bne.n	8001128 <__aeabi_fsub+0x1a4>
 8001126:	e09c      	b.n	8001262 <__aeabi_fsub+0x2de>
 8001128:	28ff      	cmp	r0, #255	; 0xff
 800112a:	d026      	beq.n	800117a <__aeabi_fsub+0x1f6>
 800112c:	4690      	mov	r8, r2
 800112e:	e788      	b.n	8001042 <__aeabi_fsub+0xbe>
 8001130:	22ff      	movs	r2, #255	; 0xff
 8001132:	2700      	movs	r7, #0
 8001134:	e771      	b.n	800101a <__aeabi_fsub+0x96>
 8001136:	20fe      	movs	r0, #254	; 0xfe
 8001138:	1c6a      	adds	r2, r5, #1
 800113a:	4210      	tst	r0, r2
 800113c:	d064      	beq.n	8001208 <__aeabi_fsub+0x284>
 800113e:	2aff      	cmp	r2, #255	; 0xff
 8001140:	d0f6      	beq.n	8001130 <__aeabi_fsub+0x1ac>
 8001142:	0015      	movs	r5, r2
 8001144:	4466      	add	r6, ip
 8001146:	0870      	lsrs	r0, r6, #1
 8001148:	0743      	lsls	r3, r0, #29
 800114a:	d000      	beq.n	800114e <__aeabi_fsub+0x1ca>
 800114c:	e756      	b.n	8000ffc <__aeabi_fsub+0x78>
 800114e:	08c3      	lsrs	r3, r0, #3
 8001150:	2dff      	cmp	r5, #255	; 0xff
 8001152:	d012      	beq.n	800117a <__aeabi_fsub+0x1f6>
 8001154:	025b      	lsls	r3, r3, #9
 8001156:	0a5f      	lsrs	r7, r3, #9
 8001158:	b2ea      	uxtb	r2, r5
 800115a:	e75e      	b.n	800101a <__aeabi_fsub+0x96>
 800115c:	4662      	mov	r2, ip
 800115e:	2a00      	cmp	r2, #0
 8001160:	d100      	bne.n	8001164 <__aeabi_fsub+0x1e0>
 8001162:	e096      	b.n	8001292 <__aeabi_fsub+0x30e>
 8001164:	2e00      	cmp	r6, #0
 8001166:	d008      	beq.n	800117a <__aeabi_fsub+0x1f6>
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	03d2      	lsls	r2, r2, #15
 800116c:	4213      	tst	r3, r2
 800116e:	d004      	beq.n	800117a <__aeabi_fsub+0x1f6>
 8001170:	4648      	mov	r0, r9
 8001172:	4210      	tst	r0, r2
 8001174:	d101      	bne.n	800117a <__aeabi_fsub+0x1f6>
 8001176:	000c      	movs	r4, r1
 8001178:	464b      	mov	r3, r9
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0d8      	beq.n	8001130 <__aeabi_fsub+0x1ac>
 800117e:	2780      	movs	r7, #128	; 0x80
 8001180:	03ff      	lsls	r7, r7, #15
 8001182:	431f      	orrs	r7, r3
 8001184:	027f      	lsls	r7, r7, #9
 8001186:	22ff      	movs	r2, #255	; 0xff
 8001188:	0a7f      	lsrs	r7, r7, #9
 800118a:	e746      	b.n	800101a <__aeabi_fsub+0x96>
 800118c:	2320      	movs	r3, #32
 800118e:	003a      	movs	r2, r7
 8001190:	1b45      	subs	r5, r0, r5
 8001192:	0038      	movs	r0, r7
 8001194:	3501      	adds	r5, #1
 8001196:	40ea      	lsrs	r2, r5
 8001198:	1b5d      	subs	r5, r3, r5
 800119a:	40a8      	lsls	r0, r5
 800119c:	1e43      	subs	r3, r0, #1
 800119e:	4198      	sbcs	r0, r3
 80011a0:	2500      	movs	r5, #0
 80011a2:	4310      	orrs	r0, r2
 80011a4:	e728      	b.n	8000ff8 <__aeabi_fsub+0x74>
 80011a6:	2320      	movs	r3, #32
 80011a8:	1a1b      	subs	r3, r3, r0
 80011aa:	0032      	movs	r2, r6
 80011ac:	409e      	lsls	r6, r3
 80011ae:	40c2      	lsrs	r2, r0
 80011b0:	0030      	movs	r0, r6
 80011b2:	1e43      	subs	r3, r0, #1
 80011b4:	4198      	sbcs	r0, r3
 80011b6:	4310      	orrs	r0, r2
 80011b8:	e70c      	b.n	8000fd4 <__aeabi_fsub+0x50>
 80011ba:	2aff      	cmp	r2, #255	; 0xff
 80011bc:	d0db      	beq.n	8001176 <__aeabi_fsub+0x1f2>
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	4660      	mov	r0, ip
 80011c2:	04db      	lsls	r3, r3, #19
 80011c4:	4318      	orrs	r0, r3
 80011c6:	4684      	mov	ip, r0
 80011c8:	2f1b      	cmp	r7, #27
 80011ca:	dd56      	ble.n	800127a <__aeabi_fsub+0x2f6>
 80011cc:	2001      	movs	r0, #1
 80011ce:	000c      	movs	r4, r1
 80011d0:	0015      	movs	r5, r2
 80011d2:	1a30      	subs	r0, r6, r0
 80011d4:	e700      	b.n	8000fd8 <__aeabi_fsub+0x54>
 80011d6:	4663      	mov	r3, ip
 80011d8:	1b9f      	subs	r7, r3, r6
 80011da:	017b      	lsls	r3, r7, #5
 80011dc:	d43d      	bmi.n	800125a <__aeabi_fsub+0x2d6>
 80011de:	2f00      	cmp	r7, #0
 80011e0:	d000      	beq.n	80011e4 <__aeabi_fsub+0x260>
 80011e2:	e6fe      	b.n	8000fe2 <__aeabi_fsub+0x5e>
 80011e4:	2400      	movs	r4, #0
 80011e6:	2200      	movs	r2, #0
 80011e8:	2700      	movs	r7, #0
 80011ea:	e716      	b.n	800101a <__aeabi_fsub+0x96>
 80011ec:	0005      	movs	r5, r0
 80011ee:	e7af      	b.n	8001150 <__aeabi_fsub+0x1cc>
 80011f0:	0032      	movs	r2, r6
 80011f2:	4643      	mov	r3, r8
 80011f4:	4641      	mov	r1, r8
 80011f6:	40da      	lsrs	r2, r3
 80011f8:	2320      	movs	r3, #32
 80011fa:	1a5b      	subs	r3, r3, r1
 80011fc:	409e      	lsls	r6, r3
 80011fe:	0030      	movs	r0, r6
 8001200:	1e43      	subs	r3, r0, #1
 8001202:	4198      	sbcs	r0, r3
 8001204:	4310      	orrs	r0, r2
 8001206:	e721      	b.n	800104c <__aeabi_fsub+0xc8>
 8001208:	2d00      	cmp	r5, #0
 800120a:	d1a7      	bne.n	800115c <__aeabi_fsub+0x1d8>
 800120c:	4663      	mov	r3, ip
 800120e:	2b00      	cmp	r3, #0
 8001210:	d059      	beq.n	80012c6 <__aeabi_fsub+0x342>
 8001212:	2200      	movs	r2, #0
 8001214:	2e00      	cmp	r6, #0
 8001216:	d100      	bne.n	800121a <__aeabi_fsub+0x296>
 8001218:	e6ff      	b.n	800101a <__aeabi_fsub+0x96>
 800121a:	0030      	movs	r0, r6
 800121c:	4460      	add	r0, ip
 800121e:	0143      	lsls	r3, r0, #5
 8001220:	d592      	bpl.n	8001148 <__aeabi_fsub+0x1c4>
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <__aeabi_fsub+0x348>)
 8001224:	3501      	adds	r5, #1
 8001226:	4018      	ands	r0, r3
 8001228:	e78e      	b.n	8001148 <__aeabi_fsub+0x1c4>
 800122a:	4663      	mov	r3, ip
 800122c:	2b00      	cmp	r3, #0
 800122e:	d047      	beq.n	80012c0 <__aeabi_fsub+0x33c>
 8001230:	1e4b      	subs	r3, r1, #1
 8001232:	2901      	cmp	r1, #1
 8001234:	d015      	beq.n	8001262 <__aeabi_fsub+0x2de>
 8001236:	29ff      	cmp	r1, #255	; 0xff
 8001238:	d02b      	beq.n	8001292 <__aeabi_fsub+0x30e>
 800123a:	0019      	movs	r1, r3
 800123c:	e74e      	b.n	80010dc <__aeabi_fsub+0x158>
 800123e:	000c      	movs	r4, r1
 8001240:	464b      	mov	r3, r9
 8001242:	003d      	movs	r5, r7
 8001244:	e784      	b.n	8001150 <__aeabi_fsub+0x1cc>
 8001246:	4662      	mov	r2, ip
 8001248:	2a00      	cmp	r2, #0
 800124a:	d18b      	bne.n	8001164 <__aeabi_fsub+0x1e0>
 800124c:	2e00      	cmp	r6, #0
 800124e:	d192      	bne.n	8001176 <__aeabi_fsub+0x1f2>
 8001250:	2780      	movs	r7, #128	; 0x80
 8001252:	2400      	movs	r4, #0
 8001254:	22ff      	movs	r2, #255	; 0xff
 8001256:	03ff      	lsls	r7, r7, #15
 8001258:	e6df      	b.n	800101a <__aeabi_fsub+0x96>
 800125a:	4663      	mov	r3, ip
 800125c:	000c      	movs	r4, r1
 800125e:	1af7      	subs	r7, r6, r3
 8001260:	e6bf      	b.n	8000fe2 <__aeabi_fsub+0x5e>
 8001262:	0030      	movs	r0, r6
 8001264:	4460      	add	r0, ip
 8001266:	2501      	movs	r5, #1
 8001268:	0143      	lsls	r3, r0, #5
 800126a:	d400      	bmi.n	800126e <__aeabi_fsub+0x2ea>
 800126c:	e76c      	b.n	8001148 <__aeabi_fsub+0x1c4>
 800126e:	2502      	movs	r5, #2
 8001270:	e6f2      	b.n	8001058 <__aeabi_fsub+0xd4>
 8001272:	4663      	mov	r3, ip
 8001274:	2501      	movs	r5, #1
 8001276:	1b98      	subs	r0, r3, r6
 8001278:	e6ae      	b.n	8000fd8 <__aeabi_fsub+0x54>
 800127a:	2320      	movs	r3, #32
 800127c:	4664      	mov	r4, ip
 800127e:	4660      	mov	r0, ip
 8001280:	40fc      	lsrs	r4, r7
 8001282:	1bdf      	subs	r7, r3, r7
 8001284:	40b8      	lsls	r0, r7
 8001286:	1e43      	subs	r3, r0, #1
 8001288:	4198      	sbcs	r0, r3
 800128a:	4320      	orrs	r0, r4
 800128c:	e79f      	b.n	80011ce <__aeabi_fsub+0x24a>
 800128e:	0005      	movs	r5, r0
 8001290:	e75e      	b.n	8001150 <__aeabi_fsub+0x1cc>
 8001292:	464b      	mov	r3, r9
 8001294:	e771      	b.n	800117a <__aeabi_fsub+0x1f6>
 8001296:	2320      	movs	r3, #32
 8001298:	4665      	mov	r5, ip
 800129a:	4660      	mov	r0, ip
 800129c:	40cd      	lsrs	r5, r1
 800129e:	1a59      	subs	r1, r3, r1
 80012a0:	4088      	lsls	r0, r1
 80012a2:	1e43      	subs	r3, r0, #1
 80012a4:	4198      	sbcs	r0, r3
 80012a6:	4328      	orrs	r0, r5
 80012a8:	e71c      	b.n	80010e4 <__aeabi_fsub+0x160>
 80012aa:	4663      	mov	r3, ip
 80012ac:	000c      	movs	r4, r1
 80012ae:	2501      	movs	r5, #1
 80012b0:	1af0      	subs	r0, r6, r3
 80012b2:	e691      	b.n	8000fd8 <__aeabi_fsub+0x54>
 80012b4:	2e00      	cmp	r6, #0
 80012b6:	d095      	beq.n	80011e4 <__aeabi_fsub+0x260>
 80012b8:	000c      	movs	r4, r1
 80012ba:	464f      	mov	r7, r9
 80012bc:	2200      	movs	r2, #0
 80012be:	e6ac      	b.n	800101a <__aeabi_fsub+0x96>
 80012c0:	464b      	mov	r3, r9
 80012c2:	000d      	movs	r5, r1
 80012c4:	e744      	b.n	8001150 <__aeabi_fsub+0x1cc>
 80012c6:	464f      	mov	r7, r9
 80012c8:	2200      	movs	r2, #0
 80012ca:	e6a6      	b.n	800101a <__aeabi_fsub+0x96>
 80012cc:	fbffffff 	.word	0xfbffffff
 80012d0:	7dffffff 	.word	0x7dffffff
 80012d4:	2800      	cmp	r0, #0
 80012d6:	d000      	beq.n	80012da <__aeabi_fsub+0x356>
 80012d8:	e736      	b.n	8001148 <__aeabi_fsub+0x1c4>
 80012da:	2400      	movs	r4, #0
 80012dc:	2700      	movs	r7, #0
 80012de:	e69c      	b.n	800101a <__aeabi_fsub+0x96>

080012e0 <__aeabi_f2iz>:
 80012e0:	0241      	lsls	r1, r0, #9
 80012e2:	0042      	lsls	r2, r0, #1
 80012e4:	0fc3      	lsrs	r3, r0, #31
 80012e6:	0a49      	lsrs	r1, r1, #9
 80012e8:	2000      	movs	r0, #0
 80012ea:	0e12      	lsrs	r2, r2, #24
 80012ec:	2a7e      	cmp	r2, #126	; 0x7e
 80012ee:	dd03      	ble.n	80012f8 <__aeabi_f2iz+0x18>
 80012f0:	2a9d      	cmp	r2, #157	; 0x9d
 80012f2:	dd02      	ble.n	80012fa <__aeabi_f2iz+0x1a>
 80012f4:	4a09      	ldr	r2, [pc, #36]	; (800131c <__aeabi_f2iz+0x3c>)
 80012f6:	1898      	adds	r0, r3, r2
 80012f8:	4770      	bx	lr
 80012fa:	2080      	movs	r0, #128	; 0x80
 80012fc:	0400      	lsls	r0, r0, #16
 80012fe:	4301      	orrs	r1, r0
 8001300:	2a95      	cmp	r2, #149	; 0x95
 8001302:	dc07      	bgt.n	8001314 <__aeabi_f2iz+0x34>
 8001304:	2096      	movs	r0, #150	; 0x96
 8001306:	1a82      	subs	r2, r0, r2
 8001308:	40d1      	lsrs	r1, r2
 800130a:	4248      	negs	r0, r1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f3      	bne.n	80012f8 <__aeabi_f2iz+0x18>
 8001310:	0008      	movs	r0, r1
 8001312:	e7f1      	b.n	80012f8 <__aeabi_f2iz+0x18>
 8001314:	3a96      	subs	r2, #150	; 0x96
 8001316:	4091      	lsls	r1, r2
 8001318:	e7f7      	b.n	800130a <__aeabi_f2iz+0x2a>
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	7fffffff 	.word	0x7fffffff

08001320 <__aeabi_i2f>:
 8001320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001322:	2800      	cmp	r0, #0
 8001324:	d013      	beq.n	800134e <__aeabi_i2f+0x2e>
 8001326:	17c3      	asrs	r3, r0, #31
 8001328:	18c6      	adds	r6, r0, r3
 800132a:	405e      	eors	r6, r3
 800132c:	0fc4      	lsrs	r4, r0, #31
 800132e:	0030      	movs	r0, r6
 8001330:	f001 fac0 	bl	80028b4 <__clzsi2>
 8001334:	239e      	movs	r3, #158	; 0x9e
 8001336:	0005      	movs	r5, r0
 8001338:	1a1b      	subs	r3, r3, r0
 800133a:	2b96      	cmp	r3, #150	; 0x96
 800133c:	dc0f      	bgt.n	800135e <__aeabi_i2f+0x3e>
 800133e:	2808      	cmp	r0, #8
 8001340:	dd01      	ble.n	8001346 <__aeabi_i2f+0x26>
 8001342:	3d08      	subs	r5, #8
 8001344:	40ae      	lsls	r6, r5
 8001346:	0276      	lsls	r6, r6, #9
 8001348:	0a76      	lsrs	r6, r6, #9
 800134a:	b2d8      	uxtb	r0, r3
 800134c:	e002      	b.n	8001354 <__aeabi_i2f+0x34>
 800134e:	2400      	movs	r4, #0
 8001350:	2000      	movs	r0, #0
 8001352:	2600      	movs	r6, #0
 8001354:	05c0      	lsls	r0, r0, #23
 8001356:	4330      	orrs	r0, r6
 8001358:	07e4      	lsls	r4, r4, #31
 800135a:	4320      	orrs	r0, r4
 800135c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800135e:	2b99      	cmp	r3, #153	; 0x99
 8001360:	dd0c      	ble.n	800137c <__aeabi_i2f+0x5c>
 8001362:	2205      	movs	r2, #5
 8001364:	0031      	movs	r1, r6
 8001366:	1a12      	subs	r2, r2, r0
 8001368:	40d1      	lsrs	r1, r2
 800136a:	000a      	movs	r2, r1
 800136c:	0001      	movs	r1, r0
 800136e:	0030      	movs	r0, r6
 8001370:	311b      	adds	r1, #27
 8001372:	4088      	lsls	r0, r1
 8001374:	1e41      	subs	r1, r0, #1
 8001376:	4188      	sbcs	r0, r1
 8001378:	4302      	orrs	r2, r0
 800137a:	0016      	movs	r6, r2
 800137c:	2d05      	cmp	r5, #5
 800137e:	dc12      	bgt.n	80013a6 <__aeabi_i2f+0x86>
 8001380:	0031      	movs	r1, r6
 8001382:	4f0d      	ldr	r7, [pc, #52]	; (80013b8 <__aeabi_i2f+0x98>)
 8001384:	4039      	ands	r1, r7
 8001386:	0772      	lsls	r2, r6, #29
 8001388:	d009      	beq.n	800139e <__aeabi_i2f+0x7e>
 800138a:	200f      	movs	r0, #15
 800138c:	4030      	ands	r0, r6
 800138e:	2804      	cmp	r0, #4
 8001390:	d005      	beq.n	800139e <__aeabi_i2f+0x7e>
 8001392:	3104      	adds	r1, #4
 8001394:	014a      	lsls	r2, r1, #5
 8001396:	d502      	bpl.n	800139e <__aeabi_i2f+0x7e>
 8001398:	239f      	movs	r3, #159	; 0x9f
 800139a:	4039      	ands	r1, r7
 800139c:	1b5b      	subs	r3, r3, r5
 800139e:	0189      	lsls	r1, r1, #6
 80013a0:	0a4e      	lsrs	r6, r1, #9
 80013a2:	b2d8      	uxtb	r0, r3
 80013a4:	e7d6      	b.n	8001354 <__aeabi_i2f+0x34>
 80013a6:	1f6a      	subs	r2, r5, #5
 80013a8:	4096      	lsls	r6, r2
 80013aa:	0031      	movs	r1, r6
 80013ac:	4f02      	ldr	r7, [pc, #8]	; (80013b8 <__aeabi_i2f+0x98>)
 80013ae:	4039      	ands	r1, r7
 80013b0:	0772      	lsls	r2, r6, #29
 80013b2:	d0f4      	beq.n	800139e <__aeabi_i2f+0x7e>
 80013b4:	e7e9      	b.n	800138a <__aeabi_i2f+0x6a>
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	fbffffff 	.word	0xfbffffff

080013bc <__aeabi_ui2f>:
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	1e05      	subs	r5, r0, #0
 80013c0:	d00e      	beq.n	80013e0 <__aeabi_ui2f+0x24>
 80013c2:	f001 fa77 	bl	80028b4 <__clzsi2>
 80013c6:	239e      	movs	r3, #158	; 0x9e
 80013c8:	0004      	movs	r4, r0
 80013ca:	1a1b      	subs	r3, r3, r0
 80013cc:	2b96      	cmp	r3, #150	; 0x96
 80013ce:	dc0c      	bgt.n	80013ea <__aeabi_ui2f+0x2e>
 80013d0:	2808      	cmp	r0, #8
 80013d2:	dd01      	ble.n	80013d8 <__aeabi_ui2f+0x1c>
 80013d4:	3c08      	subs	r4, #8
 80013d6:	40a5      	lsls	r5, r4
 80013d8:	026d      	lsls	r5, r5, #9
 80013da:	0a6d      	lsrs	r5, r5, #9
 80013dc:	b2d8      	uxtb	r0, r3
 80013de:	e001      	b.n	80013e4 <__aeabi_ui2f+0x28>
 80013e0:	2000      	movs	r0, #0
 80013e2:	2500      	movs	r5, #0
 80013e4:	05c0      	lsls	r0, r0, #23
 80013e6:	4328      	orrs	r0, r5
 80013e8:	bd70      	pop	{r4, r5, r6, pc}
 80013ea:	2b99      	cmp	r3, #153	; 0x99
 80013ec:	dd09      	ble.n	8001402 <__aeabi_ui2f+0x46>
 80013ee:	0002      	movs	r2, r0
 80013f0:	0029      	movs	r1, r5
 80013f2:	321b      	adds	r2, #27
 80013f4:	4091      	lsls	r1, r2
 80013f6:	1e4a      	subs	r2, r1, #1
 80013f8:	4191      	sbcs	r1, r2
 80013fa:	2205      	movs	r2, #5
 80013fc:	1a12      	subs	r2, r2, r0
 80013fe:	40d5      	lsrs	r5, r2
 8001400:	430d      	orrs	r5, r1
 8001402:	2c05      	cmp	r4, #5
 8001404:	dc12      	bgt.n	800142c <__aeabi_ui2f+0x70>
 8001406:	0029      	movs	r1, r5
 8001408:	4e0c      	ldr	r6, [pc, #48]	; (800143c <__aeabi_ui2f+0x80>)
 800140a:	4031      	ands	r1, r6
 800140c:	076a      	lsls	r2, r5, #29
 800140e:	d009      	beq.n	8001424 <__aeabi_ui2f+0x68>
 8001410:	200f      	movs	r0, #15
 8001412:	4028      	ands	r0, r5
 8001414:	2804      	cmp	r0, #4
 8001416:	d005      	beq.n	8001424 <__aeabi_ui2f+0x68>
 8001418:	3104      	adds	r1, #4
 800141a:	014a      	lsls	r2, r1, #5
 800141c:	d502      	bpl.n	8001424 <__aeabi_ui2f+0x68>
 800141e:	239f      	movs	r3, #159	; 0x9f
 8001420:	4031      	ands	r1, r6
 8001422:	1b1b      	subs	r3, r3, r4
 8001424:	0189      	lsls	r1, r1, #6
 8001426:	0a4d      	lsrs	r5, r1, #9
 8001428:	b2d8      	uxtb	r0, r3
 800142a:	e7db      	b.n	80013e4 <__aeabi_ui2f+0x28>
 800142c:	1f62      	subs	r2, r4, #5
 800142e:	4095      	lsls	r5, r2
 8001430:	0029      	movs	r1, r5
 8001432:	4e02      	ldr	r6, [pc, #8]	; (800143c <__aeabi_ui2f+0x80>)
 8001434:	4031      	ands	r1, r6
 8001436:	076a      	lsls	r2, r5, #29
 8001438:	d0f4      	beq.n	8001424 <__aeabi_ui2f+0x68>
 800143a:	e7e9      	b.n	8001410 <__aeabi_ui2f+0x54>
 800143c:	fbffffff 	.word	0xfbffffff

08001440 <__aeabi_dadd>:
 8001440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001442:	464f      	mov	r7, r9
 8001444:	4646      	mov	r6, r8
 8001446:	46d6      	mov	lr, sl
 8001448:	000d      	movs	r5, r1
 800144a:	0004      	movs	r4, r0
 800144c:	b5c0      	push	{r6, r7, lr}
 800144e:	001f      	movs	r7, r3
 8001450:	0011      	movs	r1, r2
 8001452:	0328      	lsls	r0, r5, #12
 8001454:	0f62      	lsrs	r2, r4, #29
 8001456:	0a40      	lsrs	r0, r0, #9
 8001458:	4310      	orrs	r0, r2
 800145a:	007a      	lsls	r2, r7, #1
 800145c:	0d52      	lsrs	r2, r2, #21
 800145e:	00e3      	lsls	r3, r4, #3
 8001460:	033c      	lsls	r4, r7, #12
 8001462:	4691      	mov	r9, r2
 8001464:	0a64      	lsrs	r4, r4, #9
 8001466:	0ffa      	lsrs	r2, r7, #31
 8001468:	0f4f      	lsrs	r7, r1, #29
 800146a:	006e      	lsls	r6, r5, #1
 800146c:	4327      	orrs	r7, r4
 800146e:	4692      	mov	sl, r2
 8001470:	46b8      	mov	r8, r7
 8001472:	0d76      	lsrs	r6, r6, #21
 8001474:	0fed      	lsrs	r5, r5, #31
 8001476:	00c9      	lsls	r1, r1, #3
 8001478:	4295      	cmp	r5, r2
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x3e>
 800147c:	e099      	b.n	80015b2 <__aeabi_dadd+0x172>
 800147e:	464c      	mov	r4, r9
 8001480:	1b34      	subs	r4, r6, r4
 8001482:	46a4      	mov	ip, r4
 8001484:	2c00      	cmp	r4, #0
 8001486:	dc00      	bgt.n	800148a <__aeabi_dadd+0x4a>
 8001488:	e07c      	b.n	8001584 <__aeabi_dadd+0x144>
 800148a:	464a      	mov	r2, r9
 800148c:	2a00      	cmp	r2, #0
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x52>
 8001490:	e0b8      	b.n	8001604 <__aeabi_dadd+0x1c4>
 8001492:	4ac5      	ldr	r2, [pc, #788]	; (80017a8 <__aeabi_dadd+0x368>)
 8001494:	4296      	cmp	r6, r2
 8001496:	d100      	bne.n	800149a <__aeabi_dadd+0x5a>
 8001498:	e11c      	b.n	80016d4 <__aeabi_dadd+0x294>
 800149a:	2280      	movs	r2, #128	; 0x80
 800149c:	003c      	movs	r4, r7
 800149e:	0412      	lsls	r2, r2, #16
 80014a0:	4314      	orrs	r4, r2
 80014a2:	46a0      	mov	r8, r4
 80014a4:	4662      	mov	r2, ip
 80014a6:	2a38      	cmp	r2, #56	; 0x38
 80014a8:	dd00      	ble.n	80014ac <__aeabi_dadd+0x6c>
 80014aa:	e161      	b.n	8001770 <__aeabi_dadd+0x330>
 80014ac:	2a1f      	cmp	r2, #31
 80014ae:	dd00      	ble.n	80014b2 <__aeabi_dadd+0x72>
 80014b0:	e1cc      	b.n	800184c <__aeabi_dadd+0x40c>
 80014b2:	4664      	mov	r4, ip
 80014b4:	2220      	movs	r2, #32
 80014b6:	1b12      	subs	r2, r2, r4
 80014b8:	4644      	mov	r4, r8
 80014ba:	4094      	lsls	r4, r2
 80014bc:	000f      	movs	r7, r1
 80014be:	46a1      	mov	r9, r4
 80014c0:	4664      	mov	r4, ip
 80014c2:	4091      	lsls	r1, r2
 80014c4:	40e7      	lsrs	r7, r4
 80014c6:	464c      	mov	r4, r9
 80014c8:	1e4a      	subs	r2, r1, #1
 80014ca:	4191      	sbcs	r1, r2
 80014cc:	433c      	orrs	r4, r7
 80014ce:	4642      	mov	r2, r8
 80014d0:	4321      	orrs	r1, r4
 80014d2:	4664      	mov	r4, ip
 80014d4:	40e2      	lsrs	r2, r4
 80014d6:	1a80      	subs	r0, r0, r2
 80014d8:	1a5c      	subs	r4, r3, r1
 80014da:	42a3      	cmp	r3, r4
 80014dc:	419b      	sbcs	r3, r3
 80014de:	425f      	negs	r7, r3
 80014e0:	1bc7      	subs	r7, r0, r7
 80014e2:	023b      	lsls	r3, r7, #8
 80014e4:	d400      	bmi.n	80014e8 <__aeabi_dadd+0xa8>
 80014e6:	e0d0      	b.n	800168a <__aeabi_dadd+0x24a>
 80014e8:	027f      	lsls	r7, r7, #9
 80014ea:	0a7f      	lsrs	r7, r7, #9
 80014ec:	2f00      	cmp	r7, #0
 80014ee:	d100      	bne.n	80014f2 <__aeabi_dadd+0xb2>
 80014f0:	e0ff      	b.n	80016f2 <__aeabi_dadd+0x2b2>
 80014f2:	0038      	movs	r0, r7
 80014f4:	f001 f9de 	bl	80028b4 <__clzsi2>
 80014f8:	0001      	movs	r1, r0
 80014fa:	3908      	subs	r1, #8
 80014fc:	2320      	movs	r3, #32
 80014fe:	0022      	movs	r2, r4
 8001500:	1a5b      	subs	r3, r3, r1
 8001502:	408f      	lsls	r7, r1
 8001504:	40da      	lsrs	r2, r3
 8001506:	408c      	lsls	r4, r1
 8001508:	4317      	orrs	r7, r2
 800150a:	42b1      	cmp	r1, r6
 800150c:	da00      	bge.n	8001510 <__aeabi_dadd+0xd0>
 800150e:	e0ff      	b.n	8001710 <__aeabi_dadd+0x2d0>
 8001510:	1b89      	subs	r1, r1, r6
 8001512:	1c4b      	adds	r3, r1, #1
 8001514:	2b1f      	cmp	r3, #31
 8001516:	dd00      	ble.n	800151a <__aeabi_dadd+0xda>
 8001518:	e0a8      	b.n	800166c <__aeabi_dadd+0x22c>
 800151a:	2220      	movs	r2, #32
 800151c:	0039      	movs	r1, r7
 800151e:	1ad2      	subs	r2, r2, r3
 8001520:	0020      	movs	r0, r4
 8001522:	4094      	lsls	r4, r2
 8001524:	4091      	lsls	r1, r2
 8001526:	40d8      	lsrs	r0, r3
 8001528:	1e62      	subs	r2, r4, #1
 800152a:	4194      	sbcs	r4, r2
 800152c:	40df      	lsrs	r7, r3
 800152e:	2600      	movs	r6, #0
 8001530:	4301      	orrs	r1, r0
 8001532:	430c      	orrs	r4, r1
 8001534:	0763      	lsls	r3, r4, #29
 8001536:	d009      	beq.n	800154c <__aeabi_dadd+0x10c>
 8001538:	230f      	movs	r3, #15
 800153a:	4023      	ands	r3, r4
 800153c:	2b04      	cmp	r3, #4
 800153e:	d005      	beq.n	800154c <__aeabi_dadd+0x10c>
 8001540:	1d23      	adds	r3, r4, #4
 8001542:	42a3      	cmp	r3, r4
 8001544:	41a4      	sbcs	r4, r4
 8001546:	4264      	negs	r4, r4
 8001548:	193f      	adds	r7, r7, r4
 800154a:	001c      	movs	r4, r3
 800154c:	023b      	lsls	r3, r7, #8
 800154e:	d400      	bmi.n	8001552 <__aeabi_dadd+0x112>
 8001550:	e09e      	b.n	8001690 <__aeabi_dadd+0x250>
 8001552:	4b95      	ldr	r3, [pc, #596]	; (80017a8 <__aeabi_dadd+0x368>)
 8001554:	3601      	adds	r6, #1
 8001556:	429e      	cmp	r6, r3
 8001558:	d100      	bne.n	800155c <__aeabi_dadd+0x11c>
 800155a:	e0b7      	b.n	80016cc <__aeabi_dadd+0x28c>
 800155c:	4a93      	ldr	r2, [pc, #588]	; (80017ac <__aeabi_dadd+0x36c>)
 800155e:	08e4      	lsrs	r4, r4, #3
 8001560:	4017      	ands	r7, r2
 8001562:	077b      	lsls	r3, r7, #29
 8001564:	0571      	lsls	r1, r6, #21
 8001566:	027f      	lsls	r7, r7, #9
 8001568:	4323      	orrs	r3, r4
 800156a:	0b3f      	lsrs	r7, r7, #12
 800156c:	0d4a      	lsrs	r2, r1, #21
 800156e:	0512      	lsls	r2, r2, #20
 8001570:	433a      	orrs	r2, r7
 8001572:	07ed      	lsls	r5, r5, #31
 8001574:	432a      	orrs	r2, r5
 8001576:	0018      	movs	r0, r3
 8001578:	0011      	movs	r1, r2
 800157a:	bce0      	pop	{r5, r6, r7}
 800157c:	46ba      	mov	sl, r7
 800157e:	46b1      	mov	r9, r6
 8001580:	46a8      	mov	r8, r5
 8001582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001584:	2c00      	cmp	r4, #0
 8001586:	d04b      	beq.n	8001620 <__aeabi_dadd+0x1e0>
 8001588:	464c      	mov	r4, r9
 800158a:	1ba4      	subs	r4, r4, r6
 800158c:	46a4      	mov	ip, r4
 800158e:	2e00      	cmp	r6, #0
 8001590:	d000      	beq.n	8001594 <__aeabi_dadd+0x154>
 8001592:	e123      	b.n	80017dc <__aeabi_dadd+0x39c>
 8001594:	0004      	movs	r4, r0
 8001596:	431c      	orrs	r4, r3
 8001598:	d100      	bne.n	800159c <__aeabi_dadd+0x15c>
 800159a:	e1af      	b.n	80018fc <__aeabi_dadd+0x4bc>
 800159c:	4662      	mov	r2, ip
 800159e:	1e54      	subs	r4, r2, #1
 80015a0:	2a01      	cmp	r2, #1
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dadd+0x166>
 80015a4:	e215      	b.n	80019d2 <__aeabi_dadd+0x592>
 80015a6:	4d80      	ldr	r5, [pc, #512]	; (80017a8 <__aeabi_dadd+0x368>)
 80015a8:	45ac      	cmp	ip, r5
 80015aa:	d100      	bne.n	80015ae <__aeabi_dadd+0x16e>
 80015ac:	e1c8      	b.n	8001940 <__aeabi_dadd+0x500>
 80015ae:	46a4      	mov	ip, r4
 80015b0:	e11b      	b.n	80017ea <__aeabi_dadd+0x3aa>
 80015b2:	464a      	mov	r2, r9
 80015b4:	1ab2      	subs	r2, r6, r2
 80015b6:	4694      	mov	ip, r2
 80015b8:	2a00      	cmp	r2, #0
 80015ba:	dc00      	bgt.n	80015be <__aeabi_dadd+0x17e>
 80015bc:	e0ac      	b.n	8001718 <__aeabi_dadd+0x2d8>
 80015be:	464a      	mov	r2, r9
 80015c0:	2a00      	cmp	r2, #0
 80015c2:	d043      	beq.n	800164c <__aeabi_dadd+0x20c>
 80015c4:	4a78      	ldr	r2, [pc, #480]	; (80017a8 <__aeabi_dadd+0x368>)
 80015c6:	4296      	cmp	r6, r2
 80015c8:	d100      	bne.n	80015cc <__aeabi_dadd+0x18c>
 80015ca:	e1af      	b.n	800192c <__aeabi_dadd+0x4ec>
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	003c      	movs	r4, r7
 80015d0:	0412      	lsls	r2, r2, #16
 80015d2:	4314      	orrs	r4, r2
 80015d4:	46a0      	mov	r8, r4
 80015d6:	4662      	mov	r2, ip
 80015d8:	2a38      	cmp	r2, #56	; 0x38
 80015da:	dc67      	bgt.n	80016ac <__aeabi_dadd+0x26c>
 80015dc:	2a1f      	cmp	r2, #31
 80015de:	dc00      	bgt.n	80015e2 <__aeabi_dadd+0x1a2>
 80015e0:	e15f      	b.n	80018a2 <__aeabi_dadd+0x462>
 80015e2:	4647      	mov	r7, r8
 80015e4:	3a20      	subs	r2, #32
 80015e6:	40d7      	lsrs	r7, r2
 80015e8:	4662      	mov	r2, ip
 80015ea:	2a20      	cmp	r2, #32
 80015ec:	d005      	beq.n	80015fa <__aeabi_dadd+0x1ba>
 80015ee:	4664      	mov	r4, ip
 80015f0:	2240      	movs	r2, #64	; 0x40
 80015f2:	1b12      	subs	r2, r2, r4
 80015f4:	4644      	mov	r4, r8
 80015f6:	4094      	lsls	r4, r2
 80015f8:	4321      	orrs	r1, r4
 80015fa:	1e4a      	subs	r2, r1, #1
 80015fc:	4191      	sbcs	r1, r2
 80015fe:	000c      	movs	r4, r1
 8001600:	433c      	orrs	r4, r7
 8001602:	e057      	b.n	80016b4 <__aeabi_dadd+0x274>
 8001604:	003a      	movs	r2, r7
 8001606:	430a      	orrs	r2, r1
 8001608:	d100      	bne.n	800160c <__aeabi_dadd+0x1cc>
 800160a:	e105      	b.n	8001818 <__aeabi_dadd+0x3d8>
 800160c:	0022      	movs	r2, r4
 800160e:	3a01      	subs	r2, #1
 8001610:	2c01      	cmp	r4, #1
 8001612:	d100      	bne.n	8001616 <__aeabi_dadd+0x1d6>
 8001614:	e182      	b.n	800191c <__aeabi_dadd+0x4dc>
 8001616:	4c64      	ldr	r4, [pc, #400]	; (80017a8 <__aeabi_dadd+0x368>)
 8001618:	45a4      	cmp	ip, r4
 800161a:	d05b      	beq.n	80016d4 <__aeabi_dadd+0x294>
 800161c:	4694      	mov	ip, r2
 800161e:	e741      	b.n	80014a4 <__aeabi_dadd+0x64>
 8001620:	4c63      	ldr	r4, [pc, #396]	; (80017b0 <__aeabi_dadd+0x370>)
 8001622:	1c77      	adds	r7, r6, #1
 8001624:	4227      	tst	r7, r4
 8001626:	d000      	beq.n	800162a <__aeabi_dadd+0x1ea>
 8001628:	e0c4      	b.n	80017b4 <__aeabi_dadd+0x374>
 800162a:	0004      	movs	r4, r0
 800162c:	431c      	orrs	r4, r3
 800162e:	2e00      	cmp	r6, #0
 8001630:	d000      	beq.n	8001634 <__aeabi_dadd+0x1f4>
 8001632:	e169      	b.n	8001908 <__aeabi_dadd+0x4c8>
 8001634:	2c00      	cmp	r4, #0
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x1fa>
 8001638:	e1bf      	b.n	80019ba <__aeabi_dadd+0x57a>
 800163a:	4644      	mov	r4, r8
 800163c:	430c      	orrs	r4, r1
 800163e:	d000      	beq.n	8001642 <__aeabi_dadd+0x202>
 8001640:	e1d0      	b.n	80019e4 <__aeabi_dadd+0x5a4>
 8001642:	0742      	lsls	r2, r0, #29
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	4313      	orrs	r3, r2
 8001648:	08c0      	lsrs	r0, r0, #3
 800164a:	e029      	b.n	80016a0 <__aeabi_dadd+0x260>
 800164c:	003a      	movs	r2, r7
 800164e:	430a      	orrs	r2, r1
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x214>
 8001652:	e170      	b.n	8001936 <__aeabi_dadd+0x4f6>
 8001654:	4662      	mov	r2, ip
 8001656:	4664      	mov	r4, ip
 8001658:	3a01      	subs	r2, #1
 800165a:	2c01      	cmp	r4, #1
 800165c:	d100      	bne.n	8001660 <__aeabi_dadd+0x220>
 800165e:	e0e0      	b.n	8001822 <__aeabi_dadd+0x3e2>
 8001660:	4c51      	ldr	r4, [pc, #324]	; (80017a8 <__aeabi_dadd+0x368>)
 8001662:	45a4      	cmp	ip, r4
 8001664:	d100      	bne.n	8001668 <__aeabi_dadd+0x228>
 8001666:	e161      	b.n	800192c <__aeabi_dadd+0x4ec>
 8001668:	4694      	mov	ip, r2
 800166a:	e7b4      	b.n	80015d6 <__aeabi_dadd+0x196>
 800166c:	003a      	movs	r2, r7
 800166e:	391f      	subs	r1, #31
 8001670:	40ca      	lsrs	r2, r1
 8001672:	0011      	movs	r1, r2
 8001674:	2b20      	cmp	r3, #32
 8001676:	d003      	beq.n	8001680 <__aeabi_dadd+0x240>
 8001678:	2240      	movs	r2, #64	; 0x40
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	409f      	lsls	r7, r3
 800167e:	433c      	orrs	r4, r7
 8001680:	1e63      	subs	r3, r4, #1
 8001682:	419c      	sbcs	r4, r3
 8001684:	2700      	movs	r7, #0
 8001686:	2600      	movs	r6, #0
 8001688:	430c      	orrs	r4, r1
 800168a:	0763      	lsls	r3, r4, #29
 800168c:	d000      	beq.n	8001690 <__aeabi_dadd+0x250>
 800168e:	e753      	b.n	8001538 <__aeabi_dadd+0xf8>
 8001690:	46b4      	mov	ip, r6
 8001692:	08e4      	lsrs	r4, r4, #3
 8001694:	077b      	lsls	r3, r7, #29
 8001696:	4323      	orrs	r3, r4
 8001698:	08f8      	lsrs	r0, r7, #3
 800169a:	4a43      	ldr	r2, [pc, #268]	; (80017a8 <__aeabi_dadd+0x368>)
 800169c:	4594      	cmp	ip, r2
 800169e:	d01d      	beq.n	80016dc <__aeabi_dadd+0x29c>
 80016a0:	4662      	mov	r2, ip
 80016a2:	0307      	lsls	r7, r0, #12
 80016a4:	0552      	lsls	r2, r2, #21
 80016a6:	0b3f      	lsrs	r7, r7, #12
 80016a8:	0d52      	lsrs	r2, r2, #21
 80016aa:	e760      	b.n	800156e <__aeabi_dadd+0x12e>
 80016ac:	4644      	mov	r4, r8
 80016ae:	430c      	orrs	r4, r1
 80016b0:	1e62      	subs	r2, r4, #1
 80016b2:	4194      	sbcs	r4, r2
 80016b4:	18e4      	adds	r4, r4, r3
 80016b6:	429c      	cmp	r4, r3
 80016b8:	419b      	sbcs	r3, r3
 80016ba:	425f      	negs	r7, r3
 80016bc:	183f      	adds	r7, r7, r0
 80016be:	023b      	lsls	r3, r7, #8
 80016c0:	d5e3      	bpl.n	800168a <__aeabi_dadd+0x24a>
 80016c2:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <__aeabi_dadd+0x368>)
 80016c4:	3601      	adds	r6, #1
 80016c6:	429e      	cmp	r6, r3
 80016c8:	d000      	beq.n	80016cc <__aeabi_dadd+0x28c>
 80016ca:	e0b5      	b.n	8001838 <__aeabi_dadd+0x3f8>
 80016cc:	0032      	movs	r2, r6
 80016ce:	2700      	movs	r7, #0
 80016d0:	2300      	movs	r3, #0
 80016d2:	e74c      	b.n	800156e <__aeabi_dadd+0x12e>
 80016d4:	0742      	lsls	r2, r0, #29
 80016d6:	08db      	lsrs	r3, r3, #3
 80016d8:	4313      	orrs	r3, r2
 80016da:	08c0      	lsrs	r0, r0, #3
 80016dc:	001a      	movs	r2, r3
 80016de:	4302      	orrs	r2, r0
 80016e0:	d100      	bne.n	80016e4 <__aeabi_dadd+0x2a4>
 80016e2:	e1e1      	b.n	8001aa8 <__aeabi_dadd+0x668>
 80016e4:	2780      	movs	r7, #128	; 0x80
 80016e6:	033f      	lsls	r7, r7, #12
 80016e8:	4307      	orrs	r7, r0
 80016ea:	033f      	lsls	r7, r7, #12
 80016ec:	4a2e      	ldr	r2, [pc, #184]	; (80017a8 <__aeabi_dadd+0x368>)
 80016ee:	0b3f      	lsrs	r7, r7, #12
 80016f0:	e73d      	b.n	800156e <__aeabi_dadd+0x12e>
 80016f2:	0020      	movs	r0, r4
 80016f4:	f001 f8de 	bl	80028b4 <__clzsi2>
 80016f8:	0001      	movs	r1, r0
 80016fa:	3118      	adds	r1, #24
 80016fc:	291f      	cmp	r1, #31
 80016fe:	dc00      	bgt.n	8001702 <__aeabi_dadd+0x2c2>
 8001700:	e6fc      	b.n	80014fc <__aeabi_dadd+0xbc>
 8001702:	3808      	subs	r0, #8
 8001704:	4084      	lsls	r4, r0
 8001706:	0027      	movs	r7, r4
 8001708:	2400      	movs	r4, #0
 800170a:	42b1      	cmp	r1, r6
 800170c:	db00      	blt.n	8001710 <__aeabi_dadd+0x2d0>
 800170e:	e6ff      	b.n	8001510 <__aeabi_dadd+0xd0>
 8001710:	4a26      	ldr	r2, [pc, #152]	; (80017ac <__aeabi_dadd+0x36c>)
 8001712:	1a76      	subs	r6, r6, r1
 8001714:	4017      	ands	r7, r2
 8001716:	e70d      	b.n	8001534 <__aeabi_dadd+0xf4>
 8001718:	2a00      	cmp	r2, #0
 800171a:	d02f      	beq.n	800177c <__aeabi_dadd+0x33c>
 800171c:	464a      	mov	r2, r9
 800171e:	1b92      	subs	r2, r2, r6
 8001720:	4694      	mov	ip, r2
 8001722:	2e00      	cmp	r6, #0
 8001724:	d100      	bne.n	8001728 <__aeabi_dadd+0x2e8>
 8001726:	e0ad      	b.n	8001884 <__aeabi_dadd+0x444>
 8001728:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <__aeabi_dadd+0x368>)
 800172a:	4591      	cmp	r9, r2
 800172c:	d100      	bne.n	8001730 <__aeabi_dadd+0x2f0>
 800172e:	e10f      	b.n	8001950 <__aeabi_dadd+0x510>
 8001730:	2280      	movs	r2, #128	; 0x80
 8001732:	0412      	lsls	r2, r2, #16
 8001734:	4310      	orrs	r0, r2
 8001736:	4662      	mov	r2, ip
 8001738:	2a38      	cmp	r2, #56	; 0x38
 800173a:	dd00      	ble.n	800173e <__aeabi_dadd+0x2fe>
 800173c:	e10f      	b.n	800195e <__aeabi_dadd+0x51e>
 800173e:	2a1f      	cmp	r2, #31
 8001740:	dd00      	ble.n	8001744 <__aeabi_dadd+0x304>
 8001742:	e180      	b.n	8001a46 <__aeabi_dadd+0x606>
 8001744:	4664      	mov	r4, ip
 8001746:	2220      	movs	r2, #32
 8001748:	001e      	movs	r6, r3
 800174a:	1b12      	subs	r2, r2, r4
 800174c:	4667      	mov	r7, ip
 800174e:	0004      	movs	r4, r0
 8001750:	4093      	lsls	r3, r2
 8001752:	4094      	lsls	r4, r2
 8001754:	40fe      	lsrs	r6, r7
 8001756:	1e5a      	subs	r2, r3, #1
 8001758:	4193      	sbcs	r3, r2
 800175a:	40f8      	lsrs	r0, r7
 800175c:	4334      	orrs	r4, r6
 800175e:	431c      	orrs	r4, r3
 8001760:	4480      	add	r8, r0
 8001762:	1864      	adds	r4, r4, r1
 8001764:	428c      	cmp	r4, r1
 8001766:	41bf      	sbcs	r7, r7
 8001768:	427f      	negs	r7, r7
 800176a:	464e      	mov	r6, r9
 800176c:	4447      	add	r7, r8
 800176e:	e7a6      	b.n	80016be <__aeabi_dadd+0x27e>
 8001770:	4642      	mov	r2, r8
 8001772:	430a      	orrs	r2, r1
 8001774:	0011      	movs	r1, r2
 8001776:	1e4a      	subs	r2, r1, #1
 8001778:	4191      	sbcs	r1, r2
 800177a:	e6ad      	b.n	80014d8 <__aeabi_dadd+0x98>
 800177c:	4c0c      	ldr	r4, [pc, #48]	; (80017b0 <__aeabi_dadd+0x370>)
 800177e:	1c72      	adds	r2, r6, #1
 8001780:	4222      	tst	r2, r4
 8001782:	d000      	beq.n	8001786 <__aeabi_dadd+0x346>
 8001784:	e0a1      	b.n	80018ca <__aeabi_dadd+0x48a>
 8001786:	0002      	movs	r2, r0
 8001788:	431a      	orrs	r2, r3
 800178a:	2e00      	cmp	r6, #0
 800178c:	d000      	beq.n	8001790 <__aeabi_dadd+0x350>
 800178e:	e0fa      	b.n	8001986 <__aeabi_dadd+0x546>
 8001790:	2a00      	cmp	r2, #0
 8001792:	d100      	bne.n	8001796 <__aeabi_dadd+0x356>
 8001794:	e145      	b.n	8001a22 <__aeabi_dadd+0x5e2>
 8001796:	003a      	movs	r2, r7
 8001798:	430a      	orrs	r2, r1
 800179a:	d000      	beq.n	800179e <__aeabi_dadd+0x35e>
 800179c:	e146      	b.n	8001a2c <__aeabi_dadd+0x5ec>
 800179e:	0742      	lsls	r2, r0, #29
 80017a0:	08db      	lsrs	r3, r3, #3
 80017a2:	4313      	orrs	r3, r2
 80017a4:	08c0      	lsrs	r0, r0, #3
 80017a6:	e77b      	b.n	80016a0 <__aeabi_dadd+0x260>
 80017a8:	000007ff 	.word	0x000007ff
 80017ac:	ff7fffff 	.word	0xff7fffff
 80017b0:	000007fe 	.word	0x000007fe
 80017b4:	4647      	mov	r7, r8
 80017b6:	1a5c      	subs	r4, r3, r1
 80017b8:	1bc2      	subs	r2, r0, r7
 80017ba:	42a3      	cmp	r3, r4
 80017bc:	41bf      	sbcs	r7, r7
 80017be:	427f      	negs	r7, r7
 80017c0:	46b9      	mov	r9, r7
 80017c2:	0017      	movs	r7, r2
 80017c4:	464a      	mov	r2, r9
 80017c6:	1abf      	subs	r7, r7, r2
 80017c8:	023a      	lsls	r2, r7, #8
 80017ca:	d500      	bpl.n	80017ce <__aeabi_dadd+0x38e>
 80017cc:	e08d      	b.n	80018ea <__aeabi_dadd+0x4aa>
 80017ce:	0023      	movs	r3, r4
 80017d0:	433b      	orrs	r3, r7
 80017d2:	d000      	beq.n	80017d6 <__aeabi_dadd+0x396>
 80017d4:	e68a      	b.n	80014ec <__aeabi_dadd+0xac>
 80017d6:	2000      	movs	r0, #0
 80017d8:	2500      	movs	r5, #0
 80017da:	e761      	b.n	80016a0 <__aeabi_dadd+0x260>
 80017dc:	4cb4      	ldr	r4, [pc, #720]	; (8001ab0 <__aeabi_dadd+0x670>)
 80017de:	45a1      	cmp	r9, r4
 80017e0:	d100      	bne.n	80017e4 <__aeabi_dadd+0x3a4>
 80017e2:	e0ad      	b.n	8001940 <__aeabi_dadd+0x500>
 80017e4:	2480      	movs	r4, #128	; 0x80
 80017e6:	0424      	lsls	r4, r4, #16
 80017e8:	4320      	orrs	r0, r4
 80017ea:	4664      	mov	r4, ip
 80017ec:	2c38      	cmp	r4, #56	; 0x38
 80017ee:	dc3d      	bgt.n	800186c <__aeabi_dadd+0x42c>
 80017f0:	4662      	mov	r2, ip
 80017f2:	2c1f      	cmp	r4, #31
 80017f4:	dd00      	ble.n	80017f8 <__aeabi_dadd+0x3b8>
 80017f6:	e0b7      	b.n	8001968 <__aeabi_dadd+0x528>
 80017f8:	2520      	movs	r5, #32
 80017fa:	001e      	movs	r6, r3
 80017fc:	1b2d      	subs	r5, r5, r4
 80017fe:	0004      	movs	r4, r0
 8001800:	40ab      	lsls	r3, r5
 8001802:	40ac      	lsls	r4, r5
 8001804:	40d6      	lsrs	r6, r2
 8001806:	40d0      	lsrs	r0, r2
 8001808:	4642      	mov	r2, r8
 800180a:	1e5d      	subs	r5, r3, #1
 800180c:	41ab      	sbcs	r3, r5
 800180e:	4334      	orrs	r4, r6
 8001810:	1a12      	subs	r2, r2, r0
 8001812:	4690      	mov	r8, r2
 8001814:	4323      	orrs	r3, r4
 8001816:	e02c      	b.n	8001872 <__aeabi_dadd+0x432>
 8001818:	0742      	lsls	r2, r0, #29
 800181a:	08db      	lsrs	r3, r3, #3
 800181c:	4313      	orrs	r3, r2
 800181e:	08c0      	lsrs	r0, r0, #3
 8001820:	e73b      	b.n	800169a <__aeabi_dadd+0x25a>
 8001822:	185c      	adds	r4, r3, r1
 8001824:	429c      	cmp	r4, r3
 8001826:	419b      	sbcs	r3, r3
 8001828:	4440      	add	r0, r8
 800182a:	425b      	negs	r3, r3
 800182c:	18c7      	adds	r7, r0, r3
 800182e:	2601      	movs	r6, #1
 8001830:	023b      	lsls	r3, r7, #8
 8001832:	d400      	bmi.n	8001836 <__aeabi_dadd+0x3f6>
 8001834:	e729      	b.n	800168a <__aeabi_dadd+0x24a>
 8001836:	2602      	movs	r6, #2
 8001838:	4a9e      	ldr	r2, [pc, #632]	; (8001ab4 <__aeabi_dadd+0x674>)
 800183a:	0863      	lsrs	r3, r4, #1
 800183c:	4017      	ands	r7, r2
 800183e:	2201      	movs	r2, #1
 8001840:	4014      	ands	r4, r2
 8001842:	431c      	orrs	r4, r3
 8001844:	07fb      	lsls	r3, r7, #31
 8001846:	431c      	orrs	r4, r3
 8001848:	087f      	lsrs	r7, r7, #1
 800184a:	e673      	b.n	8001534 <__aeabi_dadd+0xf4>
 800184c:	4644      	mov	r4, r8
 800184e:	3a20      	subs	r2, #32
 8001850:	40d4      	lsrs	r4, r2
 8001852:	4662      	mov	r2, ip
 8001854:	2a20      	cmp	r2, #32
 8001856:	d005      	beq.n	8001864 <__aeabi_dadd+0x424>
 8001858:	4667      	mov	r7, ip
 800185a:	2240      	movs	r2, #64	; 0x40
 800185c:	1bd2      	subs	r2, r2, r7
 800185e:	4647      	mov	r7, r8
 8001860:	4097      	lsls	r7, r2
 8001862:	4339      	orrs	r1, r7
 8001864:	1e4a      	subs	r2, r1, #1
 8001866:	4191      	sbcs	r1, r2
 8001868:	4321      	orrs	r1, r4
 800186a:	e635      	b.n	80014d8 <__aeabi_dadd+0x98>
 800186c:	4303      	orrs	r3, r0
 800186e:	1e58      	subs	r0, r3, #1
 8001870:	4183      	sbcs	r3, r0
 8001872:	1acc      	subs	r4, r1, r3
 8001874:	42a1      	cmp	r1, r4
 8001876:	41bf      	sbcs	r7, r7
 8001878:	4643      	mov	r3, r8
 800187a:	427f      	negs	r7, r7
 800187c:	4655      	mov	r5, sl
 800187e:	464e      	mov	r6, r9
 8001880:	1bdf      	subs	r7, r3, r7
 8001882:	e62e      	b.n	80014e2 <__aeabi_dadd+0xa2>
 8001884:	0002      	movs	r2, r0
 8001886:	431a      	orrs	r2, r3
 8001888:	d100      	bne.n	800188c <__aeabi_dadd+0x44c>
 800188a:	e0bd      	b.n	8001a08 <__aeabi_dadd+0x5c8>
 800188c:	4662      	mov	r2, ip
 800188e:	4664      	mov	r4, ip
 8001890:	3a01      	subs	r2, #1
 8001892:	2c01      	cmp	r4, #1
 8001894:	d100      	bne.n	8001898 <__aeabi_dadd+0x458>
 8001896:	e0e5      	b.n	8001a64 <__aeabi_dadd+0x624>
 8001898:	4c85      	ldr	r4, [pc, #532]	; (8001ab0 <__aeabi_dadd+0x670>)
 800189a:	45a4      	cmp	ip, r4
 800189c:	d058      	beq.n	8001950 <__aeabi_dadd+0x510>
 800189e:	4694      	mov	ip, r2
 80018a0:	e749      	b.n	8001736 <__aeabi_dadd+0x2f6>
 80018a2:	4664      	mov	r4, ip
 80018a4:	2220      	movs	r2, #32
 80018a6:	1b12      	subs	r2, r2, r4
 80018a8:	4644      	mov	r4, r8
 80018aa:	4094      	lsls	r4, r2
 80018ac:	000f      	movs	r7, r1
 80018ae:	46a1      	mov	r9, r4
 80018b0:	4664      	mov	r4, ip
 80018b2:	4091      	lsls	r1, r2
 80018b4:	40e7      	lsrs	r7, r4
 80018b6:	464c      	mov	r4, r9
 80018b8:	1e4a      	subs	r2, r1, #1
 80018ba:	4191      	sbcs	r1, r2
 80018bc:	433c      	orrs	r4, r7
 80018be:	4642      	mov	r2, r8
 80018c0:	430c      	orrs	r4, r1
 80018c2:	4661      	mov	r1, ip
 80018c4:	40ca      	lsrs	r2, r1
 80018c6:	1880      	adds	r0, r0, r2
 80018c8:	e6f4      	b.n	80016b4 <__aeabi_dadd+0x274>
 80018ca:	4c79      	ldr	r4, [pc, #484]	; (8001ab0 <__aeabi_dadd+0x670>)
 80018cc:	42a2      	cmp	r2, r4
 80018ce:	d100      	bne.n	80018d2 <__aeabi_dadd+0x492>
 80018d0:	e6fd      	b.n	80016ce <__aeabi_dadd+0x28e>
 80018d2:	1859      	adds	r1, r3, r1
 80018d4:	4299      	cmp	r1, r3
 80018d6:	419b      	sbcs	r3, r3
 80018d8:	4440      	add	r0, r8
 80018da:	425f      	negs	r7, r3
 80018dc:	19c7      	adds	r7, r0, r7
 80018de:	07fc      	lsls	r4, r7, #31
 80018e0:	0849      	lsrs	r1, r1, #1
 80018e2:	0016      	movs	r6, r2
 80018e4:	430c      	orrs	r4, r1
 80018e6:	087f      	lsrs	r7, r7, #1
 80018e8:	e6cf      	b.n	800168a <__aeabi_dadd+0x24a>
 80018ea:	1acc      	subs	r4, r1, r3
 80018ec:	42a1      	cmp	r1, r4
 80018ee:	41bf      	sbcs	r7, r7
 80018f0:	4643      	mov	r3, r8
 80018f2:	427f      	negs	r7, r7
 80018f4:	1a18      	subs	r0, r3, r0
 80018f6:	4655      	mov	r5, sl
 80018f8:	1bc7      	subs	r7, r0, r7
 80018fa:	e5f7      	b.n	80014ec <__aeabi_dadd+0xac>
 80018fc:	08c9      	lsrs	r1, r1, #3
 80018fe:	077b      	lsls	r3, r7, #29
 8001900:	4655      	mov	r5, sl
 8001902:	430b      	orrs	r3, r1
 8001904:	08f8      	lsrs	r0, r7, #3
 8001906:	e6c8      	b.n	800169a <__aeabi_dadd+0x25a>
 8001908:	2c00      	cmp	r4, #0
 800190a:	d000      	beq.n	800190e <__aeabi_dadd+0x4ce>
 800190c:	e081      	b.n	8001a12 <__aeabi_dadd+0x5d2>
 800190e:	4643      	mov	r3, r8
 8001910:	430b      	orrs	r3, r1
 8001912:	d115      	bne.n	8001940 <__aeabi_dadd+0x500>
 8001914:	2080      	movs	r0, #128	; 0x80
 8001916:	2500      	movs	r5, #0
 8001918:	0300      	lsls	r0, r0, #12
 800191a:	e6e3      	b.n	80016e4 <__aeabi_dadd+0x2a4>
 800191c:	1a5c      	subs	r4, r3, r1
 800191e:	42a3      	cmp	r3, r4
 8001920:	419b      	sbcs	r3, r3
 8001922:	1bc7      	subs	r7, r0, r7
 8001924:	425b      	negs	r3, r3
 8001926:	2601      	movs	r6, #1
 8001928:	1aff      	subs	r7, r7, r3
 800192a:	e5da      	b.n	80014e2 <__aeabi_dadd+0xa2>
 800192c:	0742      	lsls	r2, r0, #29
 800192e:	08db      	lsrs	r3, r3, #3
 8001930:	4313      	orrs	r3, r2
 8001932:	08c0      	lsrs	r0, r0, #3
 8001934:	e6d2      	b.n	80016dc <__aeabi_dadd+0x29c>
 8001936:	0742      	lsls	r2, r0, #29
 8001938:	08db      	lsrs	r3, r3, #3
 800193a:	4313      	orrs	r3, r2
 800193c:	08c0      	lsrs	r0, r0, #3
 800193e:	e6ac      	b.n	800169a <__aeabi_dadd+0x25a>
 8001940:	4643      	mov	r3, r8
 8001942:	4642      	mov	r2, r8
 8001944:	08c9      	lsrs	r1, r1, #3
 8001946:	075b      	lsls	r3, r3, #29
 8001948:	4655      	mov	r5, sl
 800194a:	430b      	orrs	r3, r1
 800194c:	08d0      	lsrs	r0, r2, #3
 800194e:	e6c5      	b.n	80016dc <__aeabi_dadd+0x29c>
 8001950:	4643      	mov	r3, r8
 8001952:	4642      	mov	r2, r8
 8001954:	075b      	lsls	r3, r3, #29
 8001956:	08c9      	lsrs	r1, r1, #3
 8001958:	430b      	orrs	r3, r1
 800195a:	08d0      	lsrs	r0, r2, #3
 800195c:	e6be      	b.n	80016dc <__aeabi_dadd+0x29c>
 800195e:	4303      	orrs	r3, r0
 8001960:	001c      	movs	r4, r3
 8001962:	1e63      	subs	r3, r4, #1
 8001964:	419c      	sbcs	r4, r3
 8001966:	e6fc      	b.n	8001762 <__aeabi_dadd+0x322>
 8001968:	0002      	movs	r2, r0
 800196a:	3c20      	subs	r4, #32
 800196c:	40e2      	lsrs	r2, r4
 800196e:	0014      	movs	r4, r2
 8001970:	4662      	mov	r2, ip
 8001972:	2a20      	cmp	r2, #32
 8001974:	d003      	beq.n	800197e <__aeabi_dadd+0x53e>
 8001976:	2540      	movs	r5, #64	; 0x40
 8001978:	1aad      	subs	r5, r5, r2
 800197a:	40a8      	lsls	r0, r5
 800197c:	4303      	orrs	r3, r0
 800197e:	1e58      	subs	r0, r3, #1
 8001980:	4183      	sbcs	r3, r0
 8001982:	4323      	orrs	r3, r4
 8001984:	e775      	b.n	8001872 <__aeabi_dadd+0x432>
 8001986:	2a00      	cmp	r2, #0
 8001988:	d0e2      	beq.n	8001950 <__aeabi_dadd+0x510>
 800198a:	003a      	movs	r2, r7
 800198c:	430a      	orrs	r2, r1
 800198e:	d0cd      	beq.n	800192c <__aeabi_dadd+0x4ec>
 8001990:	0742      	lsls	r2, r0, #29
 8001992:	08db      	lsrs	r3, r3, #3
 8001994:	4313      	orrs	r3, r2
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	08c0      	lsrs	r0, r0, #3
 800199a:	0312      	lsls	r2, r2, #12
 800199c:	4210      	tst	r0, r2
 800199e:	d006      	beq.n	80019ae <__aeabi_dadd+0x56e>
 80019a0:	08fc      	lsrs	r4, r7, #3
 80019a2:	4214      	tst	r4, r2
 80019a4:	d103      	bne.n	80019ae <__aeabi_dadd+0x56e>
 80019a6:	0020      	movs	r0, r4
 80019a8:	08cb      	lsrs	r3, r1, #3
 80019aa:	077a      	lsls	r2, r7, #29
 80019ac:	4313      	orrs	r3, r2
 80019ae:	0f5a      	lsrs	r2, r3, #29
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	0752      	lsls	r2, r2, #29
 80019b4:	08db      	lsrs	r3, r3, #3
 80019b6:	4313      	orrs	r3, r2
 80019b8:	e690      	b.n	80016dc <__aeabi_dadd+0x29c>
 80019ba:	4643      	mov	r3, r8
 80019bc:	430b      	orrs	r3, r1
 80019be:	d100      	bne.n	80019c2 <__aeabi_dadd+0x582>
 80019c0:	e709      	b.n	80017d6 <__aeabi_dadd+0x396>
 80019c2:	4643      	mov	r3, r8
 80019c4:	4642      	mov	r2, r8
 80019c6:	08c9      	lsrs	r1, r1, #3
 80019c8:	075b      	lsls	r3, r3, #29
 80019ca:	4655      	mov	r5, sl
 80019cc:	430b      	orrs	r3, r1
 80019ce:	08d0      	lsrs	r0, r2, #3
 80019d0:	e666      	b.n	80016a0 <__aeabi_dadd+0x260>
 80019d2:	1acc      	subs	r4, r1, r3
 80019d4:	42a1      	cmp	r1, r4
 80019d6:	4189      	sbcs	r1, r1
 80019d8:	1a3f      	subs	r7, r7, r0
 80019da:	4249      	negs	r1, r1
 80019dc:	4655      	mov	r5, sl
 80019de:	2601      	movs	r6, #1
 80019e0:	1a7f      	subs	r7, r7, r1
 80019e2:	e57e      	b.n	80014e2 <__aeabi_dadd+0xa2>
 80019e4:	4642      	mov	r2, r8
 80019e6:	1a5c      	subs	r4, r3, r1
 80019e8:	1a87      	subs	r7, r0, r2
 80019ea:	42a3      	cmp	r3, r4
 80019ec:	4192      	sbcs	r2, r2
 80019ee:	4252      	negs	r2, r2
 80019f0:	1abf      	subs	r7, r7, r2
 80019f2:	023a      	lsls	r2, r7, #8
 80019f4:	d53d      	bpl.n	8001a72 <__aeabi_dadd+0x632>
 80019f6:	1acc      	subs	r4, r1, r3
 80019f8:	42a1      	cmp	r1, r4
 80019fa:	4189      	sbcs	r1, r1
 80019fc:	4643      	mov	r3, r8
 80019fe:	4249      	negs	r1, r1
 8001a00:	1a1f      	subs	r7, r3, r0
 8001a02:	4655      	mov	r5, sl
 8001a04:	1a7f      	subs	r7, r7, r1
 8001a06:	e595      	b.n	8001534 <__aeabi_dadd+0xf4>
 8001a08:	077b      	lsls	r3, r7, #29
 8001a0a:	08c9      	lsrs	r1, r1, #3
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	08f8      	lsrs	r0, r7, #3
 8001a10:	e643      	b.n	800169a <__aeabi_dadd+0x25a>
 8001a12:	4644      	mov	r4, r8
 8001a14:	08db      	lsrs	r3, r3, #3
 8001a16:	430c      	orrs	r4, r1
 8001a18:	d130      	bne.n	8001a7c <__aeabi_dadd+0x63c>
 8001a1a:	0742      	lsls	r2, r0, #29
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	08c0      	lsrs	r0, r0, #3
 8001a20:	e65c      	b.n	80016dc <__aeabi_dadd+0x29c>
 8001a22:	077b      	lsls	r3, r7, #29
 8001a24:	08c9      	lsrs	r1, r1, #3
 8001a26:	430b      	orrs	r3, r1
 8001a28:	08f8      	lsrs	r0, r7, #3
 8001a2a:	e639      	b.n	80016a0 <__aeabi_dadd+0x260>
 8001a2c:	185c      	adds	r4, r3, r1
 8001a2e:	429c      	cmp	r4, r3
 8001a30:	419b      	sbcs	r3, r3
 8001a32:	4440      	add	r0, r8
 8001a34:	425b      	negs	r3, r3
 8001a36:	18c7      	adds	r7, r0, r3
 8001a38:	023b      	lsls	r3, r7, #8
 8001a3a:	d400      	bmi.n	8001a3e <__aeabi_dadd+0x5fe>
 8001a3c:	e625      	b.n	800168a <__aeabi_dadd+0x24a>
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <__aeabi_dadd+0x674>)
 8001a40:	2601      	movs	r6, #1
 8001a42:	401f      	ands	r7, r3
 8001a44:	e621      	b.n	800168a <__aeabi_dadd+0x24a>
 8001a46:	0004      	movs	r4, r0
 8001a48:	3a20      	subs	r2, #32
 8001a4a:	40d4      	lsrs	r4, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	2a20      	cmp	r2, #32
 8001a50:	d004      	beq.n	8001a5c <__aeabi_dadd+0x61c>
 8001a52:	2240      	movs	r2, #64	; 0x40
 8001a54:	4666      	mov	r6, ip
 8001a56:	1b92      	subs	r2, r2, r6
 8001a58:	4090      	lsls	r0, r2
 8001a5a:	4303      	orrs	r3, r0
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	4193      	sbcs	r3, r2
 8001a60:	431c      	orrs	r4, r3
 8001a62:	e67e      	b.n	8001762 <__aeabi_dadd+0x322>
 8001a64:	185c      	adds	r4, r3, r1
 8001a66:	428c      	cmp	r4, r1
 8001a68:	4189      	sbcs	r1, r1
 8001a6a:	4440      	add	r0, r8
 8001a6c:	4249      	negs	r1, r1
 8001a6e:	1847      	adds	r7, r0, r1
 8001a70:	e6dd      	b.n	800182e <__aeabi_dadd+0x3ee>
 8001a72:	0023      	movs	r3, r4
 8001a74:	433b      	orrs	r3, r7
 8001a76:	d100      	bne.n	8001a7a <__aeabi_dadd+0x63a>
 8001a78:	e6ad      	b.n	80017d6 <__aeabi_dadd+0x396>
 8001a7a:	e606      	b.n	800168a <__aeabi_dadd+0x24a>
 8001a7c:	0744      	lsls	r4, r0, #29
 8001a7e:	4323      	orrs	r3, r4
 8001a80:	2480      	movs	r4, #128	; 0x80
 8001a82:	08c0      	lsrs	r0, r0, #3
 8001a84:	0324      	lsls	r4, r4, #12
 8001a86:	4220      	tst	r0, r4
 8001a88:	d008      	beq.n	8001a9c <__aeabi_dadd+0x65c>
 8001a8a:	4642      	mov	r2, r8
 8001a8c:	08d6      	lsrs	r6, r2, #3
 8001a8e:	4226      	tst	r6, r4
 8001a90:	d104      	bne.n	8001a9c <__aeabi_dadd+0x65c>
 8001a92:	4655      	mov	r5, sl
 8001a94:	0030      	movs	r0, r6
 8001a96:	08cb      	lsrs	r3, r1, #3
 8001a98:	0751      	lsls	r1, r2, #29
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	0f5a      	lsrs	r2, r3, #29
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	08db      	lsrs	r3, r3, #3
 8001aa2:	0752      	lsls	r2, r2, #29
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	e619      	b.n	80016dc <__aeabi_dadd+0x29c>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	4a01      	ldr	r2, [pc, #4]	; (8001ab0 <__aeabi_dadd+0x670>)
 8001aac:	001f      	movs	r7, r3
 8001aae:	e55e      	b.n	800156e <__aeabi_dadd+0x12e>
 8001ab0:	000007ff 	.word	0x000007ff
 8001ab4:	ff7fffff 	.word	0xff7fffff

08001ab8 <__aeabi_dmul>:
 8001ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aba:	4657      	mov	r7, sl
 8001abc:	464e      	mov	r6, r9
 8001abe:	4645      	mov	r5, r8
 8001ac0:	46de      	mov	lr, fp
 8001ac2:	b5e0      	push	{r5, r6, r7, lr}
 8001ac4:	4698      	mov	r8, r3
 8001ac6:	030c      	lsls	r4, r1, #12
 8001ac8:	004b      	lsls	r3, r1, #1
 8001aca:	0006      	movs	r6, r0
 8001acc:	4692      	mov	sl, r2
 8001ace:	b087      	sub	sp, #28
 8001ad0:	0b24      	lsrs	r4, r4, #12
 8001ad2:	0d5b      	lsrs	r3, r3, #21
 8001ad4:	0fcf      	lsrs	r7, r1, #31
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d100      	bne.n	8001adc <__aeabi_dmul+0x24>
 8001ada:	e15c      	b.n	8001d96 <__aeabi_dmul+0x2de>
 8001adc:	4ad9      	ldr	r2, [pc, #868]	; (8001e44 <__aeabi_dmul+0x38c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d100      	bne.n	8001ae4 <__aeabi_dmul+0x2c>
 8001ae2:	e175      	b.n	8001dd0 <__aeabi_dmul+0x318>
 8001ae4:	0f42      	lsrs	r2, r0, #29
 8001ae6:	00e4      	lsls	r4, r4, #3
 8001ae8:	4314      	orrs	r4, r2
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	0412      	lsls	r2, r2, #16
 8001aee:	4314      	orrs	r4, r2
 8001af0:	4ad5      	ldr	r2, [pc, #852]	; (8001e48 <__aeabi_dmul+0x390>)
 8001af2:	00c5      	lsls	r5, r0, #3
 8001af4:	4694      	mov	ip, r2
 8001af6:	4463      	add	r3, ip
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2300      	movs	r3, #0
 8001afc:	4699      	mov	r9, r3
 8001afe:	469b      	mov	fp, r3
 8001b00:	4643      	mov	r3, r8
 8001b02:	4642      	mov	r2, r8
 8001b04:	031e      	lsls	r6, r3, #12
 8001b06:	0fd2      	lsrs	r2, r2, #31
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4650      	mov	r0, sl
 8001b0c:	4690      	mov	r8, r2
 8001b0e:	0b36      	lsrs	r6, r6, #12
 8001b10:	0d5b      	lsrs	r3, r3, #21
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dmul+0x5e>
 8001b14:	e120      	b.n	8001d58 <__aeabi_dmul+0x2a0>
 8001b16:	4acb      	ldr	r2, [pc, #812]	; (8001e44 <__aeabi_dmul+0x38c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dmul+0x66>
 8001b1c:	e162      	b.n	8001de4 <__aeabi_dmul+0x32c>
 8001b1e:	49ca      	ldr	r1, [pc, #808]	; (8001e48 <__aeabi_dmul+0x390>)
 8001b20:	0f42      	lsrs	r2, r0, #29
 8001b22:	468c      	mov	ip, r1
 8001b24:	9900      	ldr	r1, [sp, #0]
 8001b26:	4463      	add	r3, ip
 8001b28:	00f6      	lsls	r6, r6, #3
 8001b2a:	468c      	mov	ip, r1
 8001b2c:	4316      	orrs	r6, r2
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	449c      	add	ip, r3
 8001b32:	0412      	lsls	r2, r2, #16
 8001b34:	4663      	mov	r3, ip
 8001b36:	4316      	orrs	r6, r2
 8001b38:	00c2      	lsls	r2, r0, #3
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	9900      	ldr	r1, [sp, #0]
 8001b40:	4643      	mov	r3, r8
 8001b42:	3101      	adds	r1, #1
 8001b44:	468c      	mov	ip, r1
 8001b46:	4649      	mov	r1, r9
 8001b48:	407b      	eors	r3, r7
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	290f      	cmp	r1, #15
 8001b4e:	d826      	bhi.n	8001b9e <__aeabi_dmul+0xe6>
 8001b50:	4bbe      	ldr	r3, [pc, #760]	; (8001e4c <__aeabi_dmul+0x394>)
 8001b52:	0089      	lsls	r1, r1, #2
 8001b54:	5859      	ldr	r1, [r3, r1]
 8001b56:	468f      	mov	pc, r1
 8001b58:	4643      	mov	r3, r8
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	0034      	movs	r4, r6
 8001b5e:	0015      	movs	r5, r2
 8001b60:	4683      	mov	fp, r0
 8001b62:	465b      	mov	r3, fp
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d016      	beq.n	8001b96 <__aeabi_dmul+0xde>
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_dmul+0xb6>
 8001b6c:	e203      	b.n	8001f76 <__aeabi_dmul+0x4be>
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d000      	beq.n	8001b74 <__aeabi_dmul+0xbc>
 8001b72:	e0cd      	b.n	8001d10 <__aeabi_dmul+0x258>
 8001b74:	2200      	movs	r2, #0
 8001b76:	2400      	movs	r4, #0
 8001b78:	2500      	movs	r5, #0
 8001b7a:	9b01      	ldr	r3, [sp, #4]
 8001b7c:	0512      	lsls	r2, r2, #20
 8001b7e:	4322      	orrs	r2, r4
 8001b80:	07db      	lsls	r3, r3, #31
 8001b82:	431a      	orrs	r2, r3
 8001b84:	0028      	movs	r0, r5
 8001b86:	0011      	movs	r1, r2
 8001b88:	b007      	add	sp, #28
 8001b8a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b8c:	46bb      	mov	fp, r7
 8001b8e:	46b2      	mov	sl, r6
 8001b90:	46a9      	mov	r9, r5
 8001b92:	46a0      	mov	r8, r4
 8001b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b96:	2400      	movs	r4, #0
 8001b98:	2500      	movs	r5, #0
 8001b9a:	4aaa      	ldr	r2, [pc, #680]	; (8001e44 <__aeabi_dmul+0x38c>)
 8001b9c:	e7ed      	b.n	8001b7a <__aeabi_dmul+0xc2>
 8001b9e:	0c28      	lsrs	r0, r5, #16
 8001ba0:	042d      	lsls	r5, r5, #16
 8001ba2:	0c2d      	lsrs	r5, r5, #16
 8001ba4:	002b      	movs	r3, r5
 8001ba6:	0c11      	lsrs	r1, r2, #16
 8001ba8:	0412      	lsls	r2, r2, #16
 8001baa:	0c12      	lsrs	r2, r2, #16
 8001bac:	4353      	muls	r3, r2
 8001bae:	4698      	mov	r8, r3
 8001bb0:	0013      	movs	r3, r2
 8001bb2:	002f      	movs	r7, r5
 8001bb4:	4343      	muls	r3, r0
 8001bb6:	4699      	mov	r9, r3
 8001bb8:	434f      	muls	r7, r1
 8001bba:	444f      	add	r7, r9
 8001bbc:	46bb      	mov	fp, r7
 8001bbe:	4647      	mov	r7, r8
 8001bc0:	000b      	movs	r3, r1
 8001bc2:	0c3f      	lsrs	r7, r7, #16
 8001bc4:	46ba      	mov	sl, r7
 8001bc6:	4343      	muls	r3, r0
 8001bc8:	44da      	add	sl, fp
 8001bca:	9302      	str	r3, [sp, #8]
 8001bcc:	45d1      	cmp	r9, sl
 8001bce:	d904      	bls.n	8001bda <__aeabi_dmul+0x122>
 8001bd0:	2780      	movs	r7, #128	; 0x80
 8001bd2:	027f      	lsls	r7, r7, #9
 8001bd4:	46b9      	mov	r9, r7
 8001bd6:	444b      	add	r3, r9
 8001bd8:	9302      	str	r3, [sp, #8]
 8001bda:	4653      	mov	r3, sl
 8001bdc:	0c1b      	lsrs	r3, r3, #16
 8001bde:	469b      	mov	fp, r3
 8001be0:	4653      	mov	r3, sl
 8001be2:	041f      	lsls	r7, r3, #16
 8001be4:	4643      	mov	r3, r8
 8001be6:	041b      	lsls	r3, r3, #16
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	4698      	mov	r8, r3
 8001bec:	003b      	movs	r3, r7
 8001bee:	4443      	add	r3, r8
 8001bf0:	9304      	str	r3, [sp, #16]
 8001bf2:	0c33      	lsrs	r3, r6, #16
 8001bf4:	0436      	lsls	r6, r6, #16
 8001bf6:	0c36      	lsrs	r6, r6, #16
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	0033      	movs	r3, r6
 8001bfc:	4343      	muls	r3, r0
 8001bfe:	4699      	mov	r9, r3
 8001c00:	4643      	mov	r3, r8
 8001c02:	4343      	muls	r3, r0
 8001c04:	002f      	movs	r7, r5
 8001c06:	469a      	mov	sl, r3
 8001c08:	4643      	mov	r3, r8
 8001c0a:	4377      	muls	r7, r6
 8001c0c:	435d      	muls	r5, r3
 8001c0e:	0c38      	lsrs	r0, r7, #16
 8001c10:	444d      	add	r5, r9
 8001c12:	1945      	adds	r5, r0, r5
 8001c14:	45a9      	cmp	r9, r5
 8001c16:	d903      	bls.n	8001c20 <__aeabi_dmul+0x168>
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	025b      	lsls	r3, r3, #9
 8001c1c:	4699      	mov	r9, r3
 8001c1e:	44ca      	add	sl, r9
 8001c20:	043f      	lsls	r7, r7, #16
 8001c22:	0c28      	lsrs	r0, r5, #16
 8001c24:	0c3f      	lsrs	r7, r7, #16
 8001c26:	042d      	lsls	r5, r5, #16
 8001c28:	19ed      	adds	r5, r5, r7
 8001c2a:	0c27      	lsrs	r7, r4, #16
 8001c2c:	0424      	lsls	r4, r4, #16
 8001c2e:	0c24      	lsrs	r4, r4, #16
 8001c30:	0003      	movs	r3, r0
 8001c32:	0020      	movs	r0, r4
 8001c34:	4350      	muls	r0, r2
 8001c36:	437a      	muls	r2, r7
 8001c38:	4691      	mov	r9, r2
 8001c3a:	003a      	movs	r2, r7
 8001c3c:	4453      	add	r3, sl
 8001c3e:	9305      	str	r3, [sp, #20]
 8001c40:	0c03      	lsrs	r3, r0, #16
 8001c42:	469a      	mov	sl, r3
 8001c44:	434a      	muls	r2, r1
 8001c46:	4361      	muls	r1, r4
 8001c48:	4449      	add	r1, r9
 8001c4a:	4451      	add	r1, sl
 8001c4c:	44ab      	add	fp, r5
 8001c4e:	4589      	cmp	r9, r1
 8001c50:	d903      	bls.n	8001c5a <__aeabi_dmul+0x1a2>
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	025b      	lsls	r3, r3, #9
 8001c56:	4699      	mov	r9, r3
 8001c58:	444a      	add	r2, r9
 8001c5a:	0400      	lsls	r0, r0, #16
 8001c5c:	0c0b      	lsrs	r3, r1, #16
 8001c5e:	0c00      	lsrs	r0, r0, #16
 8001c60:	0409      	lsls	r1, r1, #16
 8001c62:	1809      	adds	r1, r1, r0
 8001c64:	0020      	movs	r0, r4
 8001c66:	4699      	mov	r9, r3
 8001c68:	4643      	mov	r3, r8
 8001c6a:	4370      	muls	r0, r6
 8001c6c:	435c      	muls	r4, r3
 8001c6e:	437e      	muls	r6, r7
 8001c70:	435f      	muls	r7, r3
 8001c72:	0c03      	lsrs	r3, r0, #16
 8001c74:	4698      	mov	r8, r3
 8001c76:	19a4      	adds	r4, r4, r6
 8001c78:	4444      	add	r4, r8
 8001c7a:	444a      	add	r2, r9
 8001c7c:	9703      	str	r7, [sp, #12]
 8001c7e:	42a6      	cmp	r6, r4
 8001c80:	d904      	bls.n	8001c8c <__aeabi_dmul+0x1d4>
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	025b      	lsls	r3, r3, #9
 8001c86:	4698      	mov	r8, r3
 8001c88:	4447      	add	r7, r8
 8001c8a:	9703      	str	r7, [sp, #12]
 8001c8c:	0423      	lsls	r3, r4, #16
 8001c8e:	9e02      	ldr	r6, [sp, #8]
 8001c90:	469a      	mov	sl, r3
 8001c92:	9b05      	ldr	r3, [sp, #20]
 8001c94:	445e      	add	r6, fp
 8001c96:	4698      	mov	r8, r3
 8001c98:	42ae      	cmp	r6, r5
 8001c9a:	41ad      	sbcs	r5, r5
 8001c9c:	1876      	adds	r6, r6, r1
 8001c9e:	428e      	cmp	r6, r1
 8001ca0:	4189      	sbcs	r1, r1
 8001ca2:	0400      	lsls	r0, r0, #16
 8001ca4:	0c00      	lsrs	r0, r0, #16
 8001ca6:	4450      	add	r0, sl
 8001ca8:	4440      	add	r0, r8
 8001caa:	426d      	negs	r5, r5
 8001cac:	1947      	adds	r7, r0, r5
 8001cae:	46b8      	mov	r8, r7
 8001cb0:	4693      	mov	fp, r2
 8001cb2:	4249      	negs	r1, r1
 8001cb4:	4689      	mov	r9, r1
 8001cb6:	44c3      	add	fp, r8
 8001cb8:	44d9      	add	r9, fp
 8001cba:	4298      	cmp	r0, r3
 8001cbc:	4180      	sbcs	r0, r0
 8001cbe:	45a8      	cmp	r8, r5
 8001cc0:	41ad      	sbcs	r5, r5
 8001cc2:	4593      	cmp	fp, r2
 8001cc4:	4192      	sbcs	r2, r2
 8001cc6:	4589      	cmp	r9, r1
 8001cc8:	4189      	sbcs	r1, r1
 8001cca:	426d      	negs	r5, r5
 8001ccc:	4240      	negs	r0, r0
 8001cce:	4328      	orrs	r0, r5
 8001cd0:	0c24      	lsrs	r4, r4, #16
 8001cd2:	4252      	negs	r2, r2
 8001cd4:	4249      	negs	r1, r1
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	9b03      	ldr	r3, [sp, #12]
 8001cda:	1900      	adds	r0, r0, r4
 8001cdc:	1880      	adds	r0, r0, r2
 8001cde:	18c7      	adds	r7, r0, r3
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	0ddc      	lsrs	r4, r3, #23
 8001ce4:	9b04      	ldr	r3, [sp, #16]
 8001ce6:	0275      	lsls	r5, r6, #9
 8001ce8:	431d      	orrs	r5, r3
 8001cea:	1e6a      	subs	r2, r5, #1
 8001cec:	4195      	sbcs	r5, r2
 8001cee:	464b      	mov	r3, r9
 8001cf0:	0df6      	lsrs	r6, r6, #23
 8001cf2:	027f      	lsls	r7, r7, #9
 8001cf4:	4335      	orrs	r5, r6
 8001cf6:	025a      	lsls	r2, r3, #9
 8001cf8:	433c      	orrs	r4, r7
 8001cfa:	4315      	orrs	r5, r2
 8001cfc:	01fb      	lsls	r3, r7, #7
 8001cfe:	d400      	bmi.n	8001d02 <__aeabi_dmul+0x24a>
 8001d00:	e11c      	b.n	8001f3c <__aeabi_dmul+0x484>
 8001d02:	2101      	movs	r1, #1
 8001d04:	086a      	lsrs	r2, r5, #1
 8001d06:	400d      	ands	r5, r1
 8001d08:	4315      	orrs	r5, r2
 8001d0a:	07e2      	lsls	r2, r4, #31
 8001d0c:	4315      	orrs	r5, r2
 8001d0e:	0864      	lsrs	r4, r4, #1
 8001d10:	494f      	ldr	r1, [pc, #316]	; (8001e50 <__aeabi_dmul+0x398>)
 8001d12:	4461      	add	r1, ip
 8001d14:	2900      	cmp	r1, #0
 8001d16:	dc00      	bgt.n	8001d1a <__aeabi_dmul+0x262>
 8001d18:	e0b0      	b.n	8001e7c <__aeabi_dmul+0x3c4>
 8001d1a:	076b      	lsls	r3, r5, #29
 8001d1c:	d009      	beq.n	8001d32 <__aeabi_dmul+0x27a>
 8001d1e:	220f      	movs	r2, #15
 8001d20:	402a      	ands	r2, r5
 8001d22:	2a04      	cmp	r2, #4
 8001d24:	d005      	beq.n	8001d32 <__aeabi_dmul+0x27a>
 8001d26:	1d2a      	adds	r2, r5, #4
 8001d28:	42aa      	cmp	r2, r5
 8001d2a:	41ad      	sbcs	r5, r5
 8001d2c:	426d      	negs	r5, r5
 8001d2e:	1964      	adds	r4, r4, r5
 8001d30:	0015      	movs	r5, r2
 8001d32:	01e3      	lsls	r3, r4, #7
 8001d34:	d504      	bpl.n	8001d40 <__aeabi_dmul+0x288>
 8001d36:	2180      	movs	r1, #128	; 0x80
 8001d38:	4a46      	ldr	r2, [pc, #280]	; (8001e54 <__aeabi_dmul+0x39c>)
 8001d3a:	00c9      	lsls	r1, r1, #3
 8001d3c:	4014      	ands	r4, r2
 8001d3e:	4461      	add	r1, ip
 8001d40:	4a45      	ldr	r2, [pc, #276]	; (8001e58 <__aeabi_dmul+0x3a0>)
 8001d42:	4291      	cmp	r1, r2
 8001d44:	dd00      	ble.n	8001d48 <__aeabi_dmul+0x290>
 8001d46:	e726      	b.n	8001b96 <__aeabi_dmul+0xde>
 8001d48:	0762      	lsls	r2, r4, #29
 8001d4a:	08ed      	lsrs	r5, r5, #3
 8001d4c:	0264      	lsls	r4, r4, #9
 8001d4e:	0549      	lsls	r1, r1, #21
 8001d50:	4315      	orrs	r5, r2
 8001d52:	0b24      	lsrs	r4, r4, #12
 8001d54:	0d4a      	lsrs	r2, r1, #21
 8001d56:	e710      	b.n	8001b7a <__aeabi_dmul+0xc2>
 8001d58:	4652      	mov	r2, sl
 8001d5a:	4332      	orrs	r2, r6
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dmul+0x2a8>
 8001d5e:	e07f      	b.n	8001e60 <__aeabi_dmul+0x3a8>
 8001d60:	2e00      	cmp	r6, #0
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dmul+0x2ae>
 8001d64:	e0dc      	b.n	8001f20 <__aeabi_dmul+0x468>
 8001d66:	0030      	movs	r0, r6
 8001d68:	f000 fda4 	bl	80028b4 <__clzsi2>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	3a0b      	subs	r2, #11
 8001d70:	231d      	movs	r3, #29
 8001d72:	0001      	movs	r1, r0
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	4652      	mov	r2, sl
 8001d78:	3908      	subs	r1, #8
 8001d7a:	40da      	lsrs	r2, r3
 8001d7c:	408e      	lsls	r6, r1
 8001d7e:	4316      	orrs	r6, r2
 8001d80:	4652      	mov	r2, sl
 8001d82:	408a      	lsls	r2, r1
 8001d84:	9b00      	ldr	r3, [sp, #0]
 8001d86:	4935      	ldr	r1, [pc, #212]	; (8001e5c <__aeabi_dmul+0x3a4>)
 8001d88:	1a18      	subs	r0, r3, r0
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	468c      	mov	ip, r1
 8001d8e:	4463      	add	r3, ip
 8001d90:	2000      	movs	r0, #0
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	e6d3      	b.n	8001b3e <__aeabi_dmul+0x86>
 8001d96:	0025      	movs	r5, r4
 8001d98:	4305      	orrs	r5, r0
 8001d9a:	d04a      	beq.n	8001e32 <__aeabi_dmul+0x37a>
 8001d9c:	2c00      	cmp	r4, #0
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dmul+0x2ea>
 8001da0:	e0b0      	b.n	8001f04 <__aeabi_dmul+0x44c>
 8001da2:	0020      	movs	r0, r4
 8001da4:	f000 fd86 	bl	80028b4 <__clzsi2>
 8001da8:	0001      	movs	r1, r0
 8001daa:	0002      	movs	r2, r0
 8001dac:	390b      	subs	r1, #11
 8001dae:	231d      	movs	r3, #29
 8001db0:	0010      	movs	r0, r2
 8001db2:	1a5b      	subs	r3, r3, r1
 8001db4:	0031      	movs	r1, r6
 8001db6:	0035      	movs	r5, r6
 8001db8:	3808      	subs	r0, #8
 8001dba:	4084      	lsls	r4, r0
 8001dbc:	40d9      	lsrs	r1, r3
 8001dbe:	4085      	lsls	r5, r0
 8001dc0:	430c      	orrs	r4, r1
 8001dc2:	4826      	ldr	r0, [pc, #152]	; (8001e5c <__aeabi_dmul+0x3a4>)
 8001dc4:	1a83      	subs	r3, r0, r2
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	4699      	mov	r9, r3
 8001dcc:	469b      	mov	fp, r3
 8001dce:	e697      	b.n	8001b00 <__aeabi_dmul+0x48>
 8001dd0:	0005      	movs	r5, r0
 8001dd2:	4325      	orrs	r5, r4
 8001dd4:	d126      	bne.n	8001e24 <__aeabi_dmul+0x36c>
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2302      	movs	r3, #2
 8001ddc:	2400      	movs	r4, #0
 8001dde:	4691      	mov	r9, r2
 8001de0:	469b      	mov	fp, r3
 8001de2:	e68d      	b.n	8001b00 <__aeabi_dmul+0x48>
 8001de4:	4652      	mov	r2, sl
 8001de6:	9b00      	ldr	r3, [sp, #0]
 8001de8:	4332      	orrs	r2, r6
 8001dea:	d110      	bne.n	8001e0e <__aeabi_dmul+0x356>
 8001dec:	4915      	ldr	r1, [pc, #84]	; (8001e44 <__aeabi_dmul+0x38c>)
 8001dee:	2600      	movs	r6, #0
 8001df0:	468c      	mov	ip, r1
 8001df2:	4463      	add	r3, ip
 8001df4:	4649      	mov	r1, r9
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2302      	movs	r3, #2
 8001dfa:	4319      	orrs	r1, r3
 8001dfc:	4689      	mov	r9, r1
 8001dfe:	2002      	movs	r0, #2
 8001e00:	e69d      	b.n	8001b3e <__aeabi_dmul+0x86>
 8001e02:	465b      	mov	r3, fp
 8001e04:	9701      	str	r7, [sp, #4]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d000      	beq.n	8001e0c <__aeabi_dmul+0x354>
 8001e0a:	e6ad      	b.n	8001b68 <__aeabi_dmul+0xb0>
 8001e0c:	e6c3      	b.n	8001b96 <__aeabi_dmul+0xde>
 8001e0e:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <__aeabi_dmul+0x38c>)
 8001e10:	2003      	movs	r0, #3
 8001e12:	4694      	mov	ip, r2
 8001e14:	4463      	add	r3, ip
 8001e16:	464a      	mov	r2, r9
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	4691      	mov	r9, r2
 8001e20:	4652      	mov	r2, sl
 8001e22:	e68c      	b.n	8001b3e <__aeabi_dmul+0x86>
 8001e24:	220c      	movs	r2, #12
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2303      	movs	r3, #3
 8001e2a:	0005      	movs	r5, r0
 8001e2c:	4691      	mov	r9, r2
 8001e2e:	469b      	mov	fp, r3
 8001e30:	e666      	b.n	8001b00 <__aeabi_dmul+0x48>
 8001e32:	2304      	movs	r3, #4
 8001e34:	4699      	mov	r9, r3
 8001e36:	2300      	movs	r3, #0
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	2400      	movs	r4, #0
 8001e3e:	469b      	mov	fp, r3
 8001e40:	e65e      	b.n	8001b00 <__aeabi_dmul+0x48>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	000007ff 	.word	0x000007ff
 8001e48:	fffffc01 	.word	0xfffffc01
 8001e4c:	08007530 	.word	0x08007530
 8001e50:	000003ff 	.word	0x000003ff
 8001e54:	feffffff 	.word	0xfeffffff
 8001e58:	000007fe 	.word	0x000007fe
 8001e5c:	fffffc0d 	.word	0xfffffc0d
 8001e60:	4649      	mov	r1, r9
 8001e62:	2301      	movs	r3, #1
 8001e64:	4319      	orrs	r1, r3
 8001e66:	4689      	mov	r9, r1
 8001e68:	2600      	movs	r6, #0
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	e667      	b.n	8001b3e <__aeabi_dmul+0x86>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2480      	movs	r4, #128	; 0x80
 8001e72:	2500      	movs	r5, #0
 8001e74:	4a43      	ldr	r2, [pc, #268]	; (8001f84 <__aeabi_dmul+0x4cc>)
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	0324      	lsls	r4, r4, #12
 8001e7a:	e67e      	b.n	8001b7a <__aeabi_dmul+0xc2>
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	1a40      	subs	r0, r0, r1
 8001e80:	2838      	cmp	r0, #56	; 0x38
 8001e82:	dd00      	ble.n	8001e86 <__aeabi_dmul+0x3ce>
 8001e84:	e676      	b.n	8001b74 <__aeabi_dmul+0xbc>
 8001e86:	281f      	cmp	r0, #31
 8001e88:	dd5b      	ble.n	8001f42 <__aeabi_dmul+0x48a>
 8001e8a:	221f      	movs	r2, #31
 8001e8c:	0023      	movs	r3, r4
 8001e8e:	4252      	negs	r2, r2
 8001e90:	1a51      	subs	r1, r2, r1
 8001e92:	40cb      	lsrs	r3, r1
 8001e94:	0019      	movs	r1, r3
 8001e96:	2820      	cmp	r0, #32
 8001e98:	d003      	beq.n	8001ea2 <__aeabi_dmul+0x3ea>
 8001e9a:	4a3b      	ldr	r2, [pc, #236]	; (8001f88 <__aeabi_dmul+0x4d0>)
 8001e9c:	4462      	add	r2, ip
 8001e9e:	4094      	lsls	r4, r2
 8001ea0:	4325      	orrs	r5, r4
 8001ea2:	1e6a      	subs	r2, r5, #1
 8001ea4:	4195      	sbcs	r5, r2
 8001ea6:	002a      	movs	r2, r5
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	2107      	movs	r1, #7
 8001eac:	000d      	movs	r5, r1
 8001eae:	2400      	movs	r4, #0
 8001eb0:	4015      	ands	r5, r2
 8001eb2:	4211      	tst	r1, r2
 8001eb4:	d05b      	beq.n	8001f6e <__aeabi_dmul+0x4b6>
 8001eb6:	210f      	movs	r1, #15
 8001eb8:	2400      	movs	r4, #0
 8001eba:	4011      	ands	r1, r2
 8001ebc:	2904      	cmp	r1, #4
 8001ebe:	d053      	beq.n	8001f68 <__aeabi_dmul+0x4b0>
 8001ec0:	1d11      	adds	r1, r2, #4
 8001ec2:	4291      	cmp	r1, r2
 8001ec4:	4192      	sbcs	r2, r2
 8001ec6:	4252      	negs	r2, r2
 8001ec8:	18a4      	adds	r4, r4, r2
 8001eca:	000a      	movs	r2, r1
 8001ecc:	0223      	lsls	r3, r4, #8
 8001ece:	d54b      	bpl.n	8001f68 <__aeabi_dmul+0x4b0>
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	2400      	movs	r4, #0
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	e650      	b.n	8001b7a <__aeabi_dmul+0xc2>
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	031b      	lsls	r3, r3, #12
 8001edc:	421c      	tst	r4, r3
 8001ede:	d009      	beq.n	8001ef4 <__aeabi_dmul+0x43c>
 8001ee0:	421e      	tst	r6, r3
 8001ee2:	d107      	bne.n	8001ef4 <__aeabi_dmul+0x43c>
 8001ee4:	4333      	orrs	r3, r6
 8001ee6:	031c      	lsls	r4, r3, #12
 8001ee8:	4643      	mov	r3, r8
 8001eea:	0015      	movs	r5, r2
 8001eec:	0b24      	lsrs	r4, r4, #12
 8001eee:	4a25      	ldr	r2, [pc, #148]	; (8001f84 <__aeabi_dmul+0x4cc>)
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	e642      	b.n	8001b7a <__aeabi_dmul+0xc2>
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	0312      	lsls	r2, r2, #12
 8001ef8:	4314      	orrs	r4, r2
 8001efa:	0324      	lsls	r4, r4, #12
 8001efc:	4a21      	ldr	r2, [pc, #132]	; (8001f84 <__aeabi_dmul+0x4cc>)
 8001efe:	0b24      	lsrs	r4, r4, #12
 8001f00:	9701      	str	r7, [sp, #4]
 8001f02:	e63a      	b.n	8001b7a <__aeabi_dmul+0xc2>
 8001f04:	f000 fcd6 	bl	80028b4 <__clzsi2>
 8001f08:	0001      	movs	r1, r0
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	3115      	adds	r1, #21
 8001f0e:	3220      	adds	r2, #32
 8001f10:	291c      	cmp	r1, #28
 8001f12:	dc00      	bgt.n	8001f16 <__aeabi_dmul+0x45e>
 8001f14:	e74b      	b.n	8001dae <__aeabi_dmul+0x2f6>
 8001f16:	0034      	movs	r4, r6
 8001f18:	3808      	subs	r0, #8
 8001f1a:	2500      	movs	r5, #0
 8001f1c:	4084      	lsls	r4, r0
 8001f1e:	e750      	b.n	8001dc2 <__aeabi_dmul+0x30a>
 8001f20:	f000 fcc8 	bl	80028b4 <__clzsi2>
 8001f24:	0003      	movs	r3, r0
 8001f26:	001a      	movs	r2, r3
 8001f28:	3215      	adds	r2, #21
 8001f2a:	3020      	adds	r0, #32
 8001f2c:	2a1c      	cmp	r2, #28
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_dmul+0x47a>
 8001f30:	e71e      	b.n	8001d70 <__aeabi_dmul+0x2b8>
 8001f32:	4656      	mov	r6, sl
 8001f34:	3b08      	subs	r3, #8
 8001f36:	2200      	movs	r2, #0
 8001f38:	409e      	lsls	r6, r3
 8001f3a:	e723      	b.n	8001d84 <__aeabi_dmul+0x2cc>
 8001f3c:	9b00      	ldr	r3, [sp, #0]
 8001f3e:	469c      	mov	ip, r3
 8001f40:	e6e6      	b.n	8001d10 <__aeabi_dmul+0x258>
 8001f42:	4912      	ldr	r1, [pc, #72]	; (8001f8c <__aeabi_dmul+0x4d4>)
 8001f44:	0022      	movs	r2, r4
 8001f46:	4461      	add	r1, ip
 8001f48:	002e      	movs	r6, r5
 8001f4a:	408d      	lsls	r5, r1
 8001f4c:	408a      	lsls	r2, r1
 8001f4e:	40c6      	lsrs	r6, r0
 8001f50:	1e69      	subs	r1, r5, #1
 8001f52:	418d      	sbcs	r5, r1
 8001f54:	4332      	orrs	r2, r6
 8001f56:	432a      	orrs	r2, r5
 8001f58:	40c4      	lsrs	r4, r0
 8001f5a:	0753      	lsls	r3, r2, #29
 8001f5c:	d0b6      	beq.n	8001ecc <__aeabi_dmul+0x414>
 8001f5e:	210f      	movs	r1, #15
 8001f60:	4011      	ands	r1, r2
 8001f62:	2904      	cmp	r1, #4
 8001f64:	d1ac      	bne.n	8001ec0 <__aeabi_dmul+0x408>
 8001f66:	e7b1      	b.n	8001ecc <__aeabi_dmul+0x414>
 8001f68:	0765      	lsls	r5, r4, #29
 8001f6a:	0264      	lsls	r4, r4, #9
 8001f6c:	0b24      	lsrs	r4, r4, #12
 8001f6e:	08d2      	lsrs	r2, r2, #3
 8001f70:	4315      	orrs	r5, r2
 8001f72:	2200      	movs	r2, #0
 8001f74:	e601      	b.n	8001b7a <__aeabi_dmul+0xc2>
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	0312      	lsls	r2, r2, #12
 8001f7a:	4314      	orrs	r4, r2
 8001f7c:	0324      	lsls	r4, r4, #12
 8001f7e:	4a01      	ldr	r2, [pc, #4]	; (8001f84 <__aeabi_dmul+0x4cc>)
 8001f80:	0b24      	lsrs	r4, r4, #12
 8001f82:	e5fa      	b.n	8001b7a <__aeabi_dmul+0xc2>
 8001f84:	000007ff 	.word	0x000007ff
 8001f88:	0000043e 	.word	0x0000043e
 8001f8c:	0000041e 	.word	0x0000041e

08001f90 <__aeabi_dsub>:
 8001f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f92:	4657      	mov	r7, sl
 8001f94:	464e      	mov	r6, r9
 8001f96:	4645      	mov	r5, r8
 8001f98:	46de      	mov	lr, fp
 8001f9a:	b5e0      	push	{r5, r6, r7, lr}
 8001f9c:	001e      	movs	r6, r3
 8001f9e:	0017      	movs	r7, r2
 8001fa0:	004a      	lsls	r2, r1, #1
 8001fa2:	030b      	lsls	r3, r1, #12
 8001fa4:	0d52      	lsrs	r2, r2, #21
 8001fa6:	0a5b      	lsrs	r3, r3, #9
 8001fa8:	4690      	mov	r8, r2
 8001faa:	0f42      	lsrs	r2, r0, #29
 8001fac:	431a      	orrs	r2, r3
 8001fae:	0fcd      	lsrs	r5, r1, #31
 8001fb0:	4ccd      	ldr	r4, [pc, #820]	; (80022e8 <__aeabi_dsub+0x358>)
 8001fb2:	0331      	lsls	r1, r6, #12
 8001fb4:	00c3      	lsls	r3, r0, #3
 8001fb6:	4694      	mov	ip, r2
 8001fb8:	0070      	lsls	r0, r6, #1
 8001fba:	0f7a      	lsrs	r2, r7, #29
 8001fbc:	0a49      	lsrs	r1, r1, #9
 8001fbe:	00ff      	lsls	r7, r7, #3
 8001fc0:	469a      	mov	sl, r3
 8001fc2:	46b9      	mov	r9, r7
 8001fc4:	0d40      	lsrs	r0, r0, #21
 8001fc6:	0ff6      	lsrs	r6, r6, #31
 8001fc8:	4311      	orrs	r1, r2
 8001fca:	42a0      	cmp	r0, r4
 8001fcc:	d100      	bne.n	8001fd0 <__aeabi_dsub+0x40>
 8001fce:	e0b1      	b.n	8002134 <__aeabi_dsub+0x1a4>
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4056      	eors	r6, r2
 8001fd4:	46b3      	mov	fp, r6
 8001fd6:	42b5      	cmp	r5, r6
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x4c>
 8001fda:	e088      	b.n	80020ee <__aeabi_dsub+0x15e>
 8001fdc:	4642      	mov	r2, r8
 8001fde:	1a12      	subs	r2, r2, r0
 8001fe0:	2a00      	cmp	r2, #0
 8001fe2:	dc00      	bgt.n	8001fe6 <__aeabi_dsub+0x56>
 8001fe4:	e0ae      	b.n	8002144 <__aeabi_dsub+0x1b4>
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x5c>
 8001fea:	e0c1      	b.n	8002170 <__aeabi_dsub+0x1e0>
 8001fec:	48be      	ldr	r0, [pc, #760]	; (80022e8 <__aeabi_dsub+0x358>)
 8001fee:	4580      	cmp	r8, r0
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dsub+0x64>
 8001ff2:	e151      	b.n	8002298 <__aeabi_dsub+0x308>
 8001ff4:	2080      	movs	r0, #128	; 0x80
 8001ff6:	0400      	lsls	r0, r0, #16
 8001ff8:	4301      	orrs	r1, r0
 8001ffa:	2a38      	cmp	r2, #56	; 0x38
 8001ffc:	dd00      	ble.n	8002000 <__aeabi_dsub+0x70>
 8001ffe:	e17b      	b.n	80022f8 <__aeabi_dsub+0x368>
 8002000:	2a1f      	cmp	r2, #31
 8002002:	dd00      	ble.n	8002006 <__aeabi_dsub+0x76>
 8002004:	e1ee      	b.n	80023e4 <__aeabi_dsub+0x454>
 8002006:	2020      	movs	r0, #32
 8002008:	003e      	movs	r6, r7
 800200a:	1a80      	subs	r0, r0, r2
 800200c:	000c      	movs	r4, r1
 800200e:	40d6      	lsrs	r6, r2
 8002010:	40d1      	lsrs	r1, r2
 8002012:	4087      	lsls	r7, r0
 8002014:	4662      	mov	r2, ip
 8002016:	4084      	lsls	r4, r0
 8002018:	1a52      	subs	r2, r2, r1
 800201a:	1e78      	subs	r0, r7, #1
 800201c:	4187      	sbcs	r7, r0
 800201e:	4694      	mov	ip, r2
 8002020:	4334      	orrs	r4, r6
 8002022:	4327      	orrs	r7, r4
 8002024:	1bdc      	subs	r4, r3, r7
 8002026:	42a3      	cmp	r3, r4
 8002028:	419b      	sbcs	r3, r3
 800202a:	4662      	mov	r2, ip
 800202c:	425b      	negs	r3, r3
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	4699      	mov	r9, r3
 8002032:	464b      	mov	r3, r9
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	d400      	bmi.n	800203a <__aeabi_dsub+0xaa>
 8002038:	e118      	b.n	800226c <__aeabi_dsub+0x2dc>
 800203a:	464b      	mov	r3, r9
 800203c:	0258      	lsls	r0, r3, #9
 800203e:	0a43      	lsrs	r3, r0, #9
 8002040:	4699      	mov	r9, r3
 8002042:	464b      	mov	r3, r9
 8002044:	2b00      	cmp	r3, #0
 8002046:	d100      	bne.n	800204a <__aeabi_dsub+0xba>
 8002048:	e137      	b.n	80022ba <__aeabi_dsub+0x32a>
 800204a:	4648      	mov	r0, r9
 800204c:	f000 fc32 	bl	80028b4 <__clzsi2>
 8002050:	0001      	movs	r1, r0
 8002052:	3908      	subs	r1, #8
 8002054:	2320      	movs	r3, #32
 8002056:	0022      	movs	r2, r4
 8002058:	4648      	mov	r0, r9
 800205a:	1a5b      	subs	r3, r3, r1
 800205c:	40da      	lsrs	r2, r3
 800205e:	4088      	lsls	r0, r1
 8002060:	408c      	lsls	r4, r1
 8002062:	4643      	mov	r3, r8
 8002064:	4310      	orrs	r0, r2
 8002066:	4588      	cmp	r8, r1
 8002068:	dd00      	ble.n	800206c <__aeabi_dsub+0xdc>
 800206a:	e136      	b.n	80022da <__aeabi_dsub+0x34a>
 800206c:	1ac9      	subs	r1, r1, r3
 800206e:	1c4b      	adds	r3, r1, #1
 8002070:	2b1f      	cmp	r3, #31
 8002072:	dd00      	ble.n	8002076 <__aeabi_dsub+0xe6>
 8002074:	e0ea      	b.n	800224c <__aeabi_dsub+0x2bc>
 8002076:	2220      	movs	r2, #32
 8002078:	0026      	movs	r6, r4
 800207a:	1ad2      	subs	r2, r2, r3
 800207c:	0001      	movs	r1, r0
 800207e:	4094      	lsls	r4, r2
 8002080:	40de      	lsrs	r6, r3
 8002082:	40d8      	lsrs	r0, r3
 8002084:	2300      	movs	r3, #0
 8002086:	4091      	lsls	r1, r2
 8002088:	1e62      	subs	r2, r4, #1
 800208a:	4194      	sbcs	r4, r2
 800208c:	4681      	mov	r9, r0
 800208e:	4698      	mov	r8, r3
 8002090:	4331      	orrs	r1, r6
 8002092:	430c      	orrs	r4, r1
 8002094:	0763      	lsls	r3, r4, #29
 8002096:	d009      	beq.n	80020ac <__aeabi_dsub+0x11c>
 8002098:	230f      	movs	r3, #15
 800209a:	4023      	ands	r3, r4
 800209c:	2b04      	cmp	r3, #4
 800209e:	d005      	beq.n	80020ac <__aeabi_dsub+0x11c>
 80020a0:	1d23      	adds	r3, r4, #4
 80020a2:	42a3      	cmp	r3, r4
 80020a4:	41a4      	sbcs	r4, r4
 80020a6:	4264      	negs	r4, r4
 80020a8:	44a1      	add	r9, r4
 80020aa:	001c      	movs	r4, r3
 80020ac:	464b      	mov	r3, r9
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	d400      	bmi.n	80020b4 <__aeabi_dsub+0x124>
 80020b2:	e0de      	b.n	8002272 <__aeabi_dsub+0x2e2>
 80020b4:	4641      	mov	r1, r8
 80020b6:	4b8c      	ldr	r3, [pc, #560]	; (80022e8 <__aeabi_dsub+0x358>)
 80020b8:	3101      	adds	r1, #1
 80020ba:	4299      	cmp	r1, r3
 80020bc:	d100      	bne.n	80020c0 <__aeabi_dsub+0x130>
 80020be:	e0e7      	b.n	8002290 <__aeabi_dsub+0x300>
 80020c0:	464b      	mov	r3, r9
 80020c2:	488a      	ldr	r0, [pc, #552]	; (80022ec <__aeabi_dsub+0x35c>)
 80020c4:	08e4      	lsrs	r4, r4, #3
 80020c6:	4003      	ands	r3, r0
 80020c8:	0018      	movs	r0, r3
 80020ca:	0549      	lsls	r1, r1, #21
 80020cc:	075b      	lsls	r3, r3, #29
 80020ce:	0240      	lsls	r0, r0, #9
 80020d0:	4323      	orrs	r3, r4
 80020d2:	0d4a      	lsrs	r2, r1, #21
 80020d4:	0b04      	lsrs	r4, r0, #12
 80020d6:	0512      	lsls	r2, r2, #20
 80020d8:	07ed      	lsls	r5, r5, #31
 80020da:	4322      	orrs	r2, r4
 80020dc:	432a      	orrs	r2, r5
 80020de:	0018      	movs	r0, r3
 80020e0:	0011      	movs	r1, r2
 80020e2:	bcf0      	pop	{r4, r5, r6, r7}
 80020e4:	46bb      	mov	fp, r7
 80020e6:	46b2      	mov	sl, r6
 80020e8:	46a9      	mov	r9, r5
 80020ea:	46a0      	mov	r8, r4
 80020ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020ee:	4642      	mov	r2, r8
 80020f0:	1a12      	subs	r2, r2, r0
 80020f2:	2a00      	cmp	r2, #0
 80020f4:	dd52      	ble.n	800219c <__aeabi_dsub+0x20c>
 80020f6:	2800      	cmp	r0, #0
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x16c>
 80020fa:	e09c      	b.n	8002236 <__aeabi_dsub+0x2a6>
 80020fc:	45a0      	cmp	r8, r4
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x172>
 8002100:	e0ca      	b.n	8002298 <__aeabi_dsub+0x308>
 8002102:	2080      	movs	r0, #128	; 0x80
 8002104:	0400      	lsls	r0, r0, #16
 8002106:	4301      	orrs	r1, r0
 8002108:	2a38      	cmp	r2, #56	; 0x38
 800210a:	dd00      	ble.n	800210e <__aeabi_dsub+0x17e>
 800210c:	e149      	b.n	80023a2 <__aeabi_dsub+0x412>
 800210e:	2a1f      	cmp	r2, #31
 8002110:	dc00      	bgt.n	8002114 <__aeabi_dsub+0x184>
 8002112:	e197      	b.n	8002444 <__aeabi_dsub+0x4b4>
 8002114:	0010      	movs	r0, r2
 8002116:	000e      	movs	r6, r1
 8002118:	3820      	subs	r0, #32
 800211a:	40c6      	lsrs	r6, r0
 800211c:	2a20      	cmp	r2, #32
 800211e:	d004      	beq.n	800212a <__aeabi_dsub+0x19a>
 8002120:	2040      	movs	r0, #64	; 0x40
 8002122:	1a82      	subs	r2, r0, r2
 8002124:	4091      	lsls	r1, r2
 8002126:	430f      	orrs	r7, r1
 8002128:	46b9      	mov	r9, r7
 800212a:	464c      	mov	r4, r9
 800212c:	1e62      	subs	r2, r4, #1
 800212e:	4194      	sbcs	r4, r2
 8002130:	4334      	orrs	r4, r6
 8002132:	e13a      	b.n	80023aa <__aeabi_dsub+0x41a>
 8002134:	000a      	movs	r2, r1
 8002136:	433a      	orrs	r2, r7
 8002138:	d028      	beq.n	800218c <__aeabi_dsub+0x1fc>
 800213a:	46b3      	mov	fp, r6
 800213c:	42b5      	cmp	r5, r6
 800213e:	d02b      	beq.n	8002198 <__aeabi_dsub+0x208>
 8002140:	4a6b      	ldr	r2, [pc, #428]	; (80022f0 <__aeabi_dsub+0x360>)
 8002142:	4442      	add	r2, r8
 8002144:	2a00      	cmp	r2, #0
 8002146:	d05d      	beq.n	8002204 <__aeabi_dsub+0x274>
 8002148:	4642      	mov	r2, r8
 800214a:	4644      	mov	r4, r8
 800214c:	1a82      	subs	r2, r0, r2
 800214e:	2c00      	cmp	r4, #0
 8002150:	d000      	beq.n	8002154 <__aeabi_dsub+0x1c4>
 8002152:	e0f5      	b.n	8002340 <__aeabi_dsub+0x3b0>
 8002154:	4665      	mov	r5, ip
 8002156:	431d      	orrs	r5, r3
 8002158:	d100      	bne.n	800215c <__aeabi_dsub+0x1cc>
 800215a:	e19c      	b.n	8002496 <__aeabi_dsub+0x506>
 800215c:	1e55      	subs	r5, r2, #1
 800215e:	2a01      	cmp	r2, #1
 8002160:	d100      	bne.n	8002164 <__aeabi_dsub+0x1d4>
 8002162:	e1fb      	b.n	800255c <__aeabi_dsub+0x5cc>
 8002164:	4c60      	ldr	r4, [pc, #384]	; (80022e8 <__aeabi_dsub+0x358>)
 8002166:	42a2      	cmp	r2, r4
 8002168:	d100      	bne.n	800216c <__aeabi_dsub+0x1dc>
 800216a:	e1bd      	b.n	80024e8 <__aeabi_dsub+0x558>
 800216c:	002a      	movs	r2, r5
 800216e:	e0f0      	b.n	8002352 <__aeabi_dsub+0x3c2>
 8002170:	0008      	movs	r0, r1
 8002172:	4338      	orrs	r0, r7
 8002174:	d100      	bne.n	8002178 <__aeabi_dsub+0x1e8>
 8002176:	e0c3      	b.n	8002300 <__aeabi_dsub+0x370>
 8002178:	1e50      	subs	r0, r2, #1
 800217a:	2a01      	cmp	r2, #1
 800217c:	d100      	bne.n	8002180 <__aeabi_dsub+0x1f0>
 800217e:	e1a8      	b.n	80024d2 <__aeabi_dsub+0x542>
 8002180:	4c59      	ldr	r4, [pc, #356]	; (80022e8 <__aeabi_dsub+0x358>)
 8002182:	42a2      	cmp	r2, r4
 8002184:	d100      	bne.n	8002188 <__aeabi_dsub+0x1f8>
 8002186:	e087      	b.n	8002298 <__aeabi_dsub+0x308>
 8002188:	0002      	movs	r2, r0
 800218a:	e736      	b.n	8001ffa <__aeabi_dsub+0x6a>
 800218c:	2201      	movs	r2, #1
 800218e:	4056      	eors	r6, r2
 8002190:	46b3      	mov	fp, r6
 8002192:	42b5      	cmp	r5, r6
 8002194:	d000      	beq.n	8002198 <__aeabi_dsub+0x208>
 8002196:	e721      	b.n	8001fdc <__aeabi_dsub+0x4c>
 8002198:	4a55      	ldr	r2, [pc, #340]	; (80022f0 <__aeabi_dsub+0x360>)
 800219a:	4442      	add	r2, r8
 800219c:	2a00      	cmp	r2, #0
 800219e:	d100      	bne.n	80021a2 <__aeabi_dsub+0x212>
 80021a0:	e0b5      	b.n	800230e <__aeabi_dsub+0x37e>
 80021a2:	4642      	mov	r2, r8
 80021a4:	4644      	mov	r4, r8
 80021a6:	1a82      	subs	r2, r0, r2
 80021a8:	2c00      	cmp	r4, #0
 80021aa:	d100      	bne.n	80021ae <__aeabi_dsub+0x21e>
 80021ac:	e138      	b.n	8002420 <__aeabi_dsub+0x490>
 80021ae:	4e4e      	ldr	r6, [pc, #312]	; (80022e8 <__aeabi_dsub+0x358>)
 80021b0:	42b0      	cmp	r0, r6
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dsub+0x226>
 80021b4:	e1de      	b.n	8002574 <__aeabi_dsub+0x5e4>
 80021b6:	2680      	movs	r6, #128	; 0x80
 80021b8:	4664      	mov	r4, ip
 80021ba:	0436      	lsls	r6, r6, #16
 80021bc:	4334      	orrs	r4, r6
 80021be:	46a4      	mov	ip, r4
 80021c0:	2a38      	cmp	r2, #56	; 0x38
 80021c2:	dd00      	ble.n	80021c6 <__aeabi_dsub+0x236>
 80021c4:	e196      	b.n	80024f4 <__aeabi_dsub+0x564>
 80021c6:	2a1f      	cmp	r2, #31
 80021c8:	dd00      	ble.n	80021cc <__aeabi_dsub+0x23c>
 80021ca:	e224      	b.n	8002616 <__aeabi_dsub+0x686>
 80021cc:	2620      	movs	r6, #32
 80021ce:	1ab4      	subs	r4, r6, r2
 80021d0:	46a2      	mov	sl, r4
 80021d2:	4664      	mov	r4, ip
 80021d4:	4656      	mov	r6, sl
 80021d6:	40b4      	lsls	r4, r6
 80021d8:	46a1      	mov	r9, r4
 80021da:	001c      	movs	r4, r3
 80021dc:	464e      	mov	r6, r9
 80021de:	40d4      	lsrs	r4, r2
 80021e0:	4326      	orrs	r6, r4
 80021e2:	0034      	movs	r4, r6
 80021e4:	4656      	mov	r6, sl
 80021e6:	40b3      	lsls	r3, r6
 80021e8:	1e5e      	subs	r6, r3, #1
 80021ea:	41b3      	sbcs	r3, r6
 80021ec:	431c      	orrs	r4, r3
 80021ee:	4663      	mov	r3, ip
 80021f0:	40d3      	lsrs	r3, r2
 80021f2:	18c9      	adds	r1, r1, r3
 80021f4:	19e4      	adds	r4, r4, r7
 80021f6:	42bc      	cmp	r4, r7
 80021f8:	41bf      	sbcs	r7, r7
 80021fa:	427f      	negs	r7, r7
 80021fc:	46b9      	mov	r9, r7
 80021fe:	4680      	mov	r8, r0
 8002200:	4489      	add	r9, r1
 8002202:	e0d8      	b.n	80023b6 <__aeabi_dsub+0x426>
 8002204:	4640      	mov	r0, r8
 8002206:	4c3b      	ldr	r4, [pc, #236]	; (80022f4 <__aeabi_dsub+0x364>)
 8002208:	3001      	adds	r0, #1
 800220a:	4220      	tst	r0, r4
 800220c:	d000      	beq.n	8002210 <__aeabi_dsub+0x280>
 800220e:	e0b4      	b.n	800237a <__aeabi_dsub+0x3ea>
 8002210:	4640      	mov	r0, r8
 8002212:	2800      	cmp	r0, #0
 8002214:	d000      	beq.n	8002218 <__aeabi_dsub+0x288>
 8002216:	e144      	b.n	80024a2 <__aeabi_dsub+0x512>
 8002218:	4660      	mov	r0, ip
 800221a:	4318      	orrs	r0, r3
 800221c:	d100      	bne.n	8002220 <__aeabi_dsub+0x290>
 800221e:	e190      	b.n	8002542 <__aeabi_dsub+0x5b2>
 8002220:	0008      	movs	r0, r1
 8002222:	4338      	orrs	r0, r7
 8002224:	d000      	beq.n	8002228 <__aeabi_dsub+0x298>
 8002226:	e1aa      	b.n	800257e <__aeabi_dsub+0x5ee>
 8002228:	4661      	mov	r1, ip
 800222a:	08db      	lsrs	r3, r3, #3
 800222c:	0749      	lsls	r1, r1, #29
 800222e:	430b      	orrs	r3, r1
 8002230:	4661      	mov	r1, ip
 8002232:	08cc      	lsrs	r4, r1, #3
 8002234:	e027      	b.n	8002286 <__aeabi_dsub+0x2f6>
 8002236:	0008      	movs	r0, r1
 8002238:	4338      	orrs	r0, r7
 800223a:	d061      	beq.n	8002300 <__aeabi_dsub+0x370>
 800223c:	1e50      	subs	r0, r2, #1
 800223e:	2a01      	cmp	r2, #1
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x2b4>
 8002242:	e139      	b.n	80024b8 <__aeabi_dsub+0x528>
 8002244:	42a2      	cmp	r2, r4
 8002246:	d027      	beq.n	8002298 <__aeabi_dsub+0x308>
 8002248:	0002      	movs	r2, r0
 800224a:	e75d      	b.n	8002108 <__aeabi_dsub+0x178>
 800224c:	0002      	movs	r2, r0
 800224e:	391f      	subs	r1, #31
 8002250:	40ca      	lsrs	r2, r1
 8002252:	0011      	movs	r1, r2
 8002254:	2b20      	cmp	r3, #32
 8002256:	d003      	beq.n	8002260 <__aeabi_dsub+0x2d0>
 8002258:	2240      	movs	r2, #64	; 0x40
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	4098      	lsls	r0, r3
 800225e:	4304      	orrs	r4, r0
 8002260:	1e63      	subs	r3, r4, #1
 8002262:	419c      	sbcs	r4, r3
 8002264:	2300      	movs	r3, #0
 8002266:	4699      	mov	r9, r3
 8002268:	4698      	mov	r8, r3
 800226a:	430c      	orrs	r4, r1
 800226c:	0763      	lsls	r3, r4, #29
 800226e:	d000      	beq.n	8002272 <__aeabi_dsub+0x2e2>
 8002270:	e712      	b.n	8002098 <__aeabi_dsub+0x108>
 8002272:	464b      	mov	r3, r9
 8002274:	464a      	mov	r2, r9
 8002276:	08e4      	lsrs	r4, r4, #3
 8002278:	075b      	lsls	r3, r3, #29
 800227a:	4323      	orrs	r3, r4
 800227c:	08d4      	lsrs	r4, r2, #3
 800227e:	4642      	mov	r2, r8
 8002280:	4919      	ldr	r1, [pc, #100]	; (80022e8 <__aeabi_dsub+0x358>)
 8002282:	428a      	cmp	r2, r1
 8002284:	d00e      	beq.n	80022a4 <__aeabi_dsub+0x314>
 8002286:	0324      	lsls	r4, r4, #12
 8002288:	0552      	lsls	r2, r2, #21
 800228a:	0b24      	lsrs	r4, r4, #12
 800228c:	0d52      	lsrs	r2, r2, #21
 800228e:	e722      	b.n	80020d6 <__aeabi_dsub+0x146>
 8002290:	000a      	movs	r2, r1
 8002292:	2400      	movs	r4, #0
 8002294:	2300      	movs	r3, #0
 8002296:	e71e      	b.n	80020d6 <__aeabi_dsub+0x146>
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	4662      	mov	r2, ip
 800229c:	0752      	lsls	r2, r2, #29
 800229e:	4313      	orrs	r3, r2
 80022a0:	4662      	mov	r2, ip
 80022a2:	08d4      	lsrs	r4, r2, #3
 80022a4:	001a      	movs	r2, r3
 80022a6:	4322      	orrs	r2, r4
 80022a8:	d100      	bne.n	80022ac <__aeabi_dsub+0x31c>
 80022aa:	e1fc      	b.n	80026a6 <__aeabi_dsub+0x716>
 80022ac:	2280      	movs	r2, #128	; 0x80
 80022ae:	0312      	lsls	r2, r2, #12
 80022b0:	4314      	orrs	r4, r2
 80022b2:	0324      	lsls	r4, r4, #12
 80022b4:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <__aeabi_dsub+0x358>)
 80022b6:	0b24      	lsrs	r4, r4, #12
 80022b8:	e70d      	b.n	80020d6 <__aeabi_dsub+0x146>
 80022ba:	0020      	movs	r0, r4
 80022bc:	f000 fafa 	bl	80028b4 <__clzsi2>
 80022c0:	0001      	movs	r1, r0
 80022c2:	3118      	adds	r1, #24
 80022c4:	291f      	cmp	r1, #31
 80022c6:	dc00      	bgt.n	80022ca <__aeabi_dsub+0x33a>
 80022c8:	e6c4      	b.n	8002054 <__aeabi_dsub+0xc4>
 80022ca:	3808      	subs	r0, #8
 80022cc:	4084      	lsls	r4, r0
 80022ce:	4643      	mov	r3, r8
 80022d0:	0020      	movs	r0, r4
 80022d2:	2400      	movs	r4, #0
 80022d4:	4588      	cmp	r8, r1
 80022d6:	dc00      	bgt.n	80022da <__aeabi_dsub+0x34a>
 80022d8:	e6c8      	b.n	800206c <__aeabi_dsub+0xdc>
 80022da:	4a04      	ldr	r2, [pc, #16]	; (80022ec <__aeabi_dsub+0x35c>)
 80022dc:	1a5b      	subs	r3, r3, r1
 80022de:	4010      	ands	r0, r2
 80022e0:	4698      	mov	r8, r3
 80022e2:	4681      	mov	r9, r0
 80022e4:	e6d6      	b.n	8002094 <__aeabi_dsub+0x104>
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	000007ff 	.word	0x000007ff
 80022ec:	ff7fffff 	.word	0xff7fffff
 80022f0:	fffff801 	.word	0xfffff801
 80022f4:	000007fe 	.word	0x000007fe
 80022f8:	430f      	orrs	r7, r1
 80022fa:	1e7a      	subs	r2, r7, #1
 80022fc:	4197      	sbcs	r7, r2
 80022fe:	e691      	b.n	8002024 <__aeabi_dsub+0x94>
 8002300:	4661      	mov	r1, ip
 8002302:	08db      	lsrs	r3, r3, #3
 8002304:	0749      	lsls	r1, r1, #29
 8002306:	430b      	orrs	r3, r1
 8002308:	4661      	mov	r1, ip
 800230a:	08cc      	lsrs	r4, r1, #3
 800230c:	e7b8      	b.n	8002280 <__aeabi_dsub+0x2f0>
 800230e:	4640      	mov	r0, r8
 8002310:	4cd3      	ldr	r4, [pc, #844]	; (8002660 <__aeabi_dsub+0x6d0>)
 8002312:	3001      	adds	r0, #1
 8002314:	4220      	tst	r0, r4
 8002316:	d000      	beq.n	800231a <__aeabi_dsub+0x38a>
 8002318:	e0a2      	b.n	8002460 <__aeabi_dsub+0x4d0>
 800231a:	4640      	mov	r0, r8
 800231c:	2800      	cmp	r0, #0
 800231e:	d000      	beq.n	8002322 <__aeabi_dsub+0x392>
 8002320:	e101      	b.n	8002526 <__aeabi_dsub+0x596>
 8002322:	4660      	mov	r0, ip
 8002324:	4318      	orrs	r0, r3
 8002326:	d100      	bne.n	800232a <__aeabi_dsub+0x39a>
 8002328:	e15e      	b.n	80025e8 <__aeabi_dsub+0x658>
 800232a:	0008      	movs	r0, r1
 800232c:	4338      	orrs	r0, r7
 800232e:	d000      	beq.n	8002332 <__aeabi_dsub+0x3a2>
 8002330:	e15f      	b.n	80025f2 <__aeabi_dsub+0x662>
 8002332:	4661      	mov	r1, ip
 8002334:	08db      	lsrs	r3, r3, #3
 8002336:	0749      	lsls	r1, r1, #29
 8002338:	430b      	orrs	r3, r1
 800233a:	4661      	mov	r1, ip
 800233c:	08cc      	lsrs	r4, r1, #3
 800233e:	e7a2      	b.n	8002286 <__aeabi_dsub+0x2f6>
 8002340:	4dc8      	ldr	r5, [pc, #800]	; (8002664 <__aeabi_dsub+0x6d4>)
 8002342:	42a8      	cmp	r0, r5
 8002344:	d100      	bne.n	8002348 <__aeabi_dsub+0x3b8>
 8002346:	e0cf      	b.n	80024e8 <__aeabi_dsub+0x558>
 8002348:	2580      	movs	r5, #128	; 0x80
 800234a:	4664      	mov	r4, ip
 800234c:	042d      	lsls	r5, r5, #16
 800234e:	432c      	orrs	r4, r5
 8002350:	46a4      	mov	ip, r4
 8002352:	2a38      	cmp	r2, #56	; 0x38
 8002354:	dc56      	bgt.n	8002404 <__aeabi_dsub+0x474>
 8002356:	2a1f      	cmp	r2, #31
 8002358:	dd00      	ble.n	800235c <__aeabi_dsub+0x3cc>
 800235a:	e0d1      	b.n	8002500 <__aeabi_dsub+0x570>
 800235c:	2520      	movs	r5, #32
 800235e:	001e      	movs	r6, r3
 8002360:	1aad      	subs	r5, r5, r2
 8002362:	4664      	mov	r4, ip
 8002364:	40ab      	lsls	r3, r5
 8002366:	40ac      	lsls	r4, r5
 8002368:	40d6      	lsrs	r6, r2
 800236a:	1e5d      	subs	r5, r3, #1
 800236c:	41ab      	sbcs	r3, r5
 800236e:	4334      	orrs	r4, r6
 8002370:	4323      	orrs	r3, r4
 8002372:	4664      	mov	r4, ip
 8002374:	40d4      	lsrs	r4, r2
 8002376:	1b09      	subs	r1, r1, r4
 8002378:	e049      	b.n	800240e <__aeabi_dsub+0x47e>
 800237a:	4660      	mov	r0, ip
 800237c:	1bdc      	subs	r4, r3, r7
 800237e:	1a46      	subs	r6, r0, r1
 8002380:	42a3      	cmp	r3, r4
 8002382:	4180      	sbcs	r0, r0
 8002384:	4240      	negs	r0, r0
 8002386:	4681      	mov	r9, r0
 8002388:	0030      	movs	r0, r6
 800238a:	464e      	mov	r6, r9
 800238c:	1b80      	subs	r0, r0, r6
 800238e:	4681      	mov	r9, r0
 8002390:	0200      	lsls	r0, r0, #8
 8002392:	d476      	bmi.n	8002482 <__aeabi_dsub+0x4f2>
 8002394:	464b      	mov	r3, r9
 8002396:	4323      	orrs	r3, r4
 8002398:	d000      	beq.n	800239c <__aeabi_dsub+0x40c>
 800239a:	e652      	b.n	8002042 <__aeabi_dsub+0xb2>
 800239c:	2400      	movs	r4, #0
 800239e:	2500      	movs	r5, #0
 80023a0:	e771      	b.n	8002286 <__aeabi_dsub+0x2f6>
 80023a2:	4339      	orrs	r1, r7
 80023a4:	000c      	movs	r4, r1
 80023a6:	1e62      	subs	r2, r4, #1
 80023a8:	4194      	sbcs	r4, r2
 80023aa:	18e4      	adds	r4, r4, r3
 80023ac:	429c      	cmp	r4, r3
 80023ae:	419b      	sbcs	r3, r3
 80023b0:	425b      	negs	r3, r3
 80023b2:	4463      	add	r3, ip
 80023b4:	4699      	mov	r9, r3
 80023b6:	464b      	mov	r3, r9
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	d400      	bmi.n	80023be <__aeabi_dsub+0x42e>
 80023bc:	e756      	b.n	800226c <__aeabi_dsub+0x2dc>
 80023be:	2301      	movs	r3, #1
 80023c0:	469c      	mov	ip, r3
 80023c2:	4ba8      	ldr	r3, [pc, #672]	; (8002664 <__aeabi_dsub+0x6d4>)
 80023c4:	44e0      	add	r8, ip
 80023c6:	4598      	cmp	r8, r3
 80023c8:	d038      	beq.n	800243c <__aeabi_dsub+0x4ac>
 80023ca:	464b      	mov	r3, r9
 80023cc:	48a6      	ldr	r0, [pc, #664]	; (8002668 <__aeabi_dsub+0x6d8>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	4003      	ands	r3, r0
 80023d2:	0018      	movs	r0, r3
 80023d4:	0863      	lsrs	r3, r4, #1
 80023d6:	4014      	ands	r4, r2
 80023d8:	431c      	orrs	r4, r3
 80023da:	07c3      	lsls	r3, r0, #31
 80023dc:	431c      	orrs	r4, r3
 80023de:	0843      	lsrs	r3, r0, #1
 80023e0:	4699      	mov	r9, r3
 80023e2:	e657      	b.n	8002094 <__aeabi_dsub+0x104>
 80023e4:	0010      	movs	r0, r2
 80023e6:	000e      	movs	r6, r1
 80023e8:	3820      	subs	r0, #32
 80023ea:	40c6      	lsrs	r6, r0
 80023ec:	2a20      	cmp	r2, #32
 80023ee:	d004      	beq.n	80023fa <__aeabi_dsub+0x46a>
 80023f0:	2040      	movs	r0, #64	; 0x40
 80023f2:	1a82      	subs	r2, r0, r2
 80023f4:	4091      	lsls	r1, r2
 80023f6:	430f      	orrs	r7, r1
 80023f8:	46b9      	mov	r9, r7
 80023fa:	464f      	mov	r7, r9
 80023fc:	1e7a      	subs	r2, r7, #1
 80023fe:	4197      	sbcs	r7, r2
 8002400:	4337      	orrs	r7, r6
 8002402:	e60f      	b.n	8002024 <__aeabi_dsub+0x94>
 8002404:	4662      	mov	r2, ip
 8002406:	431a      	orrs	r2, r3
 8002408:	0013      	movs	r3, r2
 800240a:	1e5a      	subs	r2, r3, #1
 800240c:	4193      	sbcs	r3, r2
 800240e:	1afc      	subs	r4, r7, r3
 8002410:	42a7      	cmp	r7, r4
 8002412:	41bf      	sbcs	r7, r7
 8002414:	427f      	negs	r7, r7
 8002416:	1bcb      	subs	r3, r1, r7
 8002418:	4699      	mov	r9, r3
 800241a:	465d      	mov	r5, fp
 800241c:	4680      	mov	r8, r0
 800241e:	e608      	b.n	8002032 <__aeabi_dsub+0xa2>
 8002420:	4666      	mov	r6, ip
 8002422:	431e      	orrs	r6, r3
 8002424:	d100      	bne.n	8002428 <__aeabi_dsub+0x498>
 8002426:	e0be      	b.n	80025a6 <__aeabi_dsub+0x616>
 8002428:	1e56      	subs	r6, r2, #1
 800242a:	2a01      	cmp	r2, #1
 800242c:	d100      	bne.n	8002430 <__aeabi_dsub+0x4a0>
 800242e:	e109      	b.n	8002644 <__aeabi_dsub+0x6b4>
 8002430:	4c8c      	ldr	r4, [pc, #560]	; (8002664 <__aeabi_dsub+0x6d4>)
 8002432:	42a2      	cmp	r2, r4
 8002434:	d100      	bne.n	8002438 <__aeabi_dsub+0x4a8>
 8002436:	e119      	b.n	800266c <__aeabi_dsub+0x6dc>
 8002438:	0032      	movs	r2, r6
 800243a:	e6c1      	b.n	80021c0 <__aeabi_dsub+0x230>
 800243c:	4642      	mov	r2, r8
 800243e:	2400      	movs	r4, #0
 8002440:	2300      	movs	r3, #0
 8002442:	e648      	b.n	80020d6 <__aeabi_dsub+0x146>
 8002444:	2020      	movs	r0, #32
 8002446:	000c      	movs	r4, r1
 8002448:	1a80      	subs	r0, r0, r2
 800244a:	003e      	movs	r6, r7
 800244c:	4087      	lsls	r7, r0
 800244e:	4084      	lsls	r4, r0
 8002450:	40d6      	lsrs	r6, r2
 8002452:	1e78      	subs	r0, r7, #1
 8002454:	4187      	sbcs	r7, r0
 8002456:	40d1      	lsrs	r1, r2
 8002458:	4334      	orrs	r4, r6
 800245a:	433c      	orrs	r4, r7
 800245c:	448c      	add	ip, r1
 800245e:	e7a4      	b.n	80023aa <__aeabi_dsub+0x41a>
 8002460:	4a80      	ldr	r2, [pc, #512]	; (8002664 <__aeabi_dsub+0x6d4>)
 8002462:	4290      	cmp	r0, r2
 8002464:	d100      	bne.n	8002468 <__aeabi_dsub+0x4d8>
 8002466:	e0e9      	b.n	800263c <__aeabi_dsub+0x6ac>
 8002468:	19df      	adds	r7, r3, r7
 800246a:	429f      	cmp	r7, r3
 800246c:	419b      	sbcs	r3, r3
 800246e:	4461      	add	r1, ip
 8002470:	425b      	negs	r3, r3
 8002472:	18c9      	adds	r1, r1, r3
 8002474:	07cc      	lsls	r4, r1, #31
 8002476:	087f      	lsrs	r7, r7, #1
 8002478:	084b      	lsrs	r3, r1, #1
 800247a:	4699      	mov	r9, r3
 800247c:	4680      	mov	r8, r0
 800247e:	433c      	orrs	r4, r7
 8002480:	e6f4      	b.n	800226c <__aeabi_dsub+0x2dc>
 8002482:	1afc      	subs	r4, r7, r3
 8002484:	42a7      	cmp	r7, r4
 8002486:	41bf      	sbcs	r7, r7
 8002488:	4663      	mov	r3, ip
 800248a:	427f      	negs	r7, r7
 800248c:	1ac9      	subs	r1, r1, r3
 800248e:	1bcb      	subs	r3, r1, r7
 8002490:	4699      	mov	r9, r3
 8002492:	465d      	mov	r5, fp
 8002494:	e5d5      	b.n	8002042 <__aeabi_dsub+0xb2>
 8002496:	08ff      	lsrs	r7, r7, #3
 8002498:	074b      	lsls	r3, r1, #29
 800249a:	465d      	mov	r5, fp
 800249c:	433b      	orrs	r3, r7
 800249e:	08cc      	lsrs	r4, r1, #3
 80024a0:	e6ee      	b.n	8002280 <__aeabi_dsub+0x2f0>
 80024a2:	4662      	mov	r2, ip
 80024a4:	431a      	orrs	r2, r3
 80024a6:	d000      	beq.n	80024aa <__aeabi_dsub+0x51a>
 80024a8:	e082      	b.n	80025b0 <__aeabi_dsub+0x620>
 80024aa:	000b      	movs	r3, r1
 80024ac:	433b      	orrs	r3, r7
 80024ae:	d11b      	bne.n	80024e8 <__aeabi_dsub+0x558>
 80024b0:	2480      	movs	r4, #128	; 0x80
 80024b2:	2500      	movs	r5, #0
 80024b4:	0324      	lsls	r4, r4, #12
 80024b6:	e6f9      	b.n	80022ac <__aeabi_dsub+0x31c>
 80024b8:	19dc      	adds	r4, r3, r7
 80024ba:	429c      	cmp	r4, r3
 80024bc:	419b      	sbcs	r3, r3
 80024be:	4461      	add	r1, ip
 80024c0:	4689      	mov	r9, r1
 80024c2:	425b      	negs	r3, r3
 80024c4:	4499      	add	r9, r3
 80024c6:	464b      	mov	r3, r9
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	d444      	bmi.n	8002556 <__aeabi_dsub+0x5c6>
 80024cc:	2301      	movs	r3, #1
 80024ce:	4698      	mov	r8, r3
 80024d0:	e6cc      	b.n	800226c <__aeabi_dsub+0x2dc>
 80024d2:	1bdc      	subs	r4, r3, r7
 80024d4:	4662      	mov	r2, ip
 80024d6:	42a3      	cmp	r3, r4
 80024d8:	419b      	sbcs	r3, r3
 80024da:	1a51      	subs	r1, r2, r1
 80024dc:	425b      	negs	r3, r3
 80024de:	1acb      	subs	r3, r1, r3
 80024e0:	4699      	mov	r9, r3
 80024e2:	2301      	movs	r3, #1
 80024e4:	4698      	mov	r8, r3
 80024e6:	e5a4      	b.n	8002032 <__aeabi_dsub+0xa2>
 80024e8:	08ff      	lsrs	r7, r7, #3
 80024ea:	074b      	lsls	r3, r1, #29
 80024ec:	465d      	mov	r5, fp
 80024ee:	433b      	orrs	r3, r7
 80024f0:	08cc      	lsrs	r4, r1, #3
 80024f2:	e6d7      	b.n	80022a4 <__aeabi_dsub+0x314>
 80024f4:	4662      	mov	r2, ip
 80024f6:	431a      	orrs	r2, r3
 80024f8:	0014      	movs	r4, r2
 80024fa:	1e63      	subs	r3, r4, #1
 80024fc:	419c      	sbcs	r4, r3
 80024fe:	e679      	b.n	80021f4 <__aeabi_dsub+0x264>
 8002500:	0015      	movs	r5, r2
 8002502:	4664      	mov	r4, ip
 8002504:	3d20      	subs	r5, #32
 8002506:	40ec      	lsrs	r4, r5
 8002508:	46a0      	mov	r8, r4
 800250a:	2a20      	cmp	r2, #32
 800250c:	d005      	beq.n	800251a <__aeabi_dsub+0x58a>
 800250e:	2540      	movs	r5, #64	; 0x40
 8002510:	4664      	mov	r4, ip
 8002512:	1aaa      	subs	r2, r5, r2
 8002514:	4094      	lsls	r4, r2
 8002516:	4323      	orrs	r3, r4
 8002518:	469a      	mov	sl, r3
 800251a:	4654      	mov	r4, sl
 800251c:	1e63      	subs	r3, r4, #1
 800251e:	419c      	sbcs	r4, r3
 8002520:	4643      	mov	r3, r8
 8002522:	4323      	orrs	r3, r4
 8002524:	e773      	b.n	800240e <__aeabi_dsub+0x47e>
 8002526:	4662      	mov	r2, ip
 8002528:	431a      	orrs	r2, r3
 800252a:	d023      	beq.n	8002574 <__aeabi_dsub+0x5e4>
 800252c:	000a      	movs	r2, r1
 800252e:	433a      	orrs	r2, r7
 8002530:	d000      	beq.n	8002534 <__aeabi_dsub+0x5a4>
 8002532:	e0a0      	b.n	8002676 <__aeabi_dsub+0x6e6>
 8002534:	4662      	mov	r2, ip
 8002536:	08db      	lsrs	r3, r3, #3
 8002538:	0752      	lsls	r2, r2, #29
 800253a:	4313      	orrs	r3, r2
 800253c:	4662      	mov	r2, ip
 800253e:	08d4      	lsrs	r4, r2, #3
 8002540:	e6b0      	b.n	80022a4 <__aeabi_dsub+0x314>
 8002542:	000b      	movs	r3, r1
 8002544:	433b      	orrs	r3, r7
 8002546:	d100      	bne.n	800254a <__aeabi_dsub+0x5ba>
 8002548:	e728      	b.n	800239c <__aeabi_dsub+0x40c>
 800254a:	08ff      	lsrs	r7, r7, #3
 800254c:	074b      	lsls	r3, r1, #29
 800254e:	465d      	mov	r5, fp
 8002550:	433b      	orrs	r3, r7
 8002552:	08cc      	lsrs	r4, r1, #3
 8002554:	e697      	b.n	8002286 <__aeabi_dsub+0x2f6>
 8002556:	2302      	movs	r3, #2
 8002558:	4698      	mov	r8, r3
 800255a:	e736      	b.n	80023ca <__aeabi_dsub+0x43a>
 800255c:	1afc      	subs	r4, r7, r3
 800255e:	42a7      	cmp	r7, r4
 8002560:	41bf      	sbcs	r7, r7
 8002562:	4663      	mov	r3, ip
 8002564:	427f      	negs	r7, r7
 8002566:	1ac9      	subs	r1, r1, r3
 8002568:	1bcb      	subs	r3, r1, r7
 800256a:	4699      	mov	r9, r3
 800256c:	2301      	movs	r3, #1
 800256e:	465d      	mov	r5, fp
 8002570:	4698      	mov	r8, r3
 8002572:	e55e      	b.n	8002032 <__aeabi_dsub+0xa2>
 8002574:	074b      	lsls	r3, r1, #29
 8002576:	08ff      	lsrs	r7, r7, #3
 8002578:	433b      	orrs	r3, r7
 800257a:	08cc      	lsrs	r4, r1, #3
 800257c:	e692      	b.n	80022a4 <__aeabi_dsub+0x314>
 800257e:	1bdc      	subs	r4, r3, r7
 8002580:	4660      	mov	r0, ip
 8002582:	42a3      	cmp	r3, r4
 8002584:	41b6      	sbcs	r6, r6
 8002586:	1a40      	subs	r0, r0, r1
 8002588:	4276      	negs	r6, r6
 800258a:	1b80      	subs	r0, r0, r6
 800258c:	4681      	mov	r9, r0
 800258e:	0200      	lsls	r0, r0, #8
 8002590:	d560      	bpl.n	8002654 <__aeabi_dsub+0x6c4>
 8002592:	1afc      	subs	r4, r7, r3
 8002594:	42a7      	cmp	r7, r4
 8002596:	41bf      	sbcs	r7, r7
 8002598:	4663      	mov	r3, ip
 800259a:	427f      	negs	r7, r7
 800259c:	1ac9      	subs	r1, r1, r3
 800259e:	1bcb      	subs	r3, r1, r7
 80025a0:	4699      	mov	r9, r3
 80025a2:	465d      	mov	r5, fp
 80025a4:	e576      	b.n	8002094 <__aeabi_dsub+0x104>
 80025a6:	08ff      	lsrs	r7, r7, #3
 80025a8:	074b      	lsls	r3, r1, #29
 80025aa:	433b      	orrs	r3, r7
 80025ac:	08cc      	lsrs	r4, r1, #3
 80025ae:	e667      	b.n	8002280 <__aeabi_dsub+0x2f0>
 80025b0:	000a      	movs	r2, r1
 80025b2:	08db      	lsrs	r3, r3, #3
 80025b4:	433a      	orrs	r2, r7
 80025b6:	d100      	bne.n	80025ba <__aeabi_dsub+0x62a>
 80025b8:	e66f      	b.n	800229a <__aeabi_dsub+0x30a>
 80025ba:	4662      	mov	r2, ip
 80025bc:	0752      	lsls	r2, r2, #29
 80025be:	4313      	orrs	r3, r2
 80025c0:	4662      	mov	r2, ip
 80025c2:	08d4      	lsrs	r4, r2, #3
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	0312      	lsls	r2, r2, #12
 80025c8:	4214      	tst	r4, r2
 80025ca:	d007      	beq.n	80025dc <__aeabi_dsub+0x64c>
 80025cc:	08c8      	lsrs	r0, r1, #3
 80025ce:	4210      	tst	r0, r2
 80025d0:	d104      	bne.n	80025dc <__aeabi_dsub+0x64c>
 80025d2:	465d      	mov	r5, fp
 80025d4:	0004      	movs	r4, r0
 80025d6:	08fb      	lsrs	r3, r7, #3
 80025d8:	0749      	lsls	r1, r1, #29
 80025da:	430b      	orrs	r3, r1
 80025dc:	0f5a      	lsrs	r2, r3, #29
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	08db      	lsrs	r3, r3, #3
 80025e2:	0752      	lsls	r2, r2, #29
 80025e4:	4313      	orrs	r3, r2
 80025e6:	e65d      	b.n	80022a4 <__aeabi_dsub+0x314>
 80025e8:	074b      	lsls	r3, r1, #29
 80025ea:	08ff      	lsrs	r7, r7, #3
 80025ec:	433b      	orrs	r3, r7
 80025ee:	08cc      	lsrs	r4, r1, #3
 80025f0:	e649      	b.n	8002286 <__aeabi_dsub+0x2f6>
 80025f2:	19dc      	adds	r4, r3, r7
 80025f4:	429c      	cmp	r4, r3
 80025f6:	419b      	sbcs	r3, r3
 80025f8:	4461      	add	r1, ip
 80025fa:	4689      	mov	r9, r1
 80025fc:	425b      	negs	r3, r3
 80025fe:	4499      	add	r9, r3
 8002600:	464b      	mov	r3, r9
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	d400      	bmi.n	8002608 <__aeabi_dsub+0x678>
 8002606:	e631      	b.n	800226c <__aeabi_dsub+0x2dc>
 8002608:	464a      	mov	r2, r9
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <__aeabi_dsub+0x6d8>)
 800260c:	401a      	ands	r2, r3
 800260e:	2301      	movs	r3, #1
 8002610:	4691      	mov	r9, r2
 8002612:	4698      	mov	r8, r3
 8002614:	e62a      	b.n	800226c <__aeabi_dsub+0x2dc>
 8002616:	0016      	movs	r6, r2
 8002618:	4664      	mov	r4, ip
 800261a:	3e20      	subs	r6, #32
 800261c:	40f4      	lsrs	r4, r6
 800261e:	46a0      	mov	r8, r4
 8002620:	2a20      	cmp	r2, #32
 8002622:	d005      	beq.n	8002630 <__aeabi_dsub+0x6a0>
 8002624:	2640      	movs	r6, #64	; 0x40
 8002626:	4664      	mov	r4, ip
 8002628:	1ab2      	subs	r2, r6, r2
 800262a:	4094      	lsls	r4, r2
 800262c:	4323      	orrs	r3, r4
 800262e:	469a      	mov	sl, r3
 8002630:	4654      	mov	r4, sl
 8002632:	1e63      	subs	r3, r4, #1
 8002634:	419c      	sbcs	r4, r3
 8002636:	4643      	mov	r3, r8
 8002638:	431c      	orrs	r4, r3
 800263a:	e5db      	b.n	80021f4 <__aeabi_dsub+0x264>
 800263c:	0002      	movs	r2, r0
 800263e:	2400      	movs	r4, #0
 8002640:	2300      	movs	r3, #0
 8002642:	e548      	b.n	80020d6 <__aeabi_dsub+0x146>
 8002644:	19dc      	adds	r4, r3, r7
 8002646:	42bc      	cmp	r4, r7
 8002648:	41bf      	sbcs	r7, r7
 800264a:	4461      	add	r1, ip
 800264c:	4689      	mov	r9, r1
 800264e:	427f      	negs	r7, r7
 8002650:	44b9      	add	r9, r7
 8002652:	e738      	b.n	80024c6 <__aeabi_dsub+0x536>
 8002654:	464b      	mov	r3, r9
 8002656:	4323      	orrs	r3, r4
 8002658:	d100      	bne.n	800265c <__aeabi_dsub+0x6cc>
 800265a:	e69f      	b.n	800239c <__aeabi_dsub+0x40c>
 800265c:	e606      	b.n	800226c <__aeabi_dsub+0x2dc>
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	000007fe 	.word	0x000007fe
 8002664:	000007ff 	.word	0x000007ff
 8002668:	ff7fffff 	.word	0xff7fffff
 800266c:	08ff      	lsrs	r7, r7, #3
 800266e:	074b      	lsls	r3, r1, #29
 8002670:	433b      	orrs	r3, r7
 8002672:	08cc      	lsrs	r4, r1, #3
 8002674:	e616      	b.n	80022a4 <__aeabi_dsub+0x314>
 8002676:	4662      	mov	r2, ip
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	0752      	lsls	r2, r2, #29
 800267c:	4313      	orrs	r3, r2
 800267e:	4662      	mov	r2, ip
 8002680:	08d4      	lsrs	r4, r2, #3
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	0312      	lsls	r2, r2, #12
 8002686:	4214      	tst	r4, r2
 8002688:	d007      	beq.n	800269a <__aeabi_dsub+0x70a>
 800268a:	08c8      	lsrs	r0, r1, #3
 800268c:	4210      	tst	r0, r2
 800268e:	d104      	bne.n	800269a <__aeabi_dsub+0x70a>
 8002690:	465d      	mov	r5, fp
 8002692:	0004      	movs	r4, r0
 8002694:	08fb      	lsrs	r3, r7, #3
 8002696:	0749      	lsls	r1, r1, #29
 8002698:	430b      	orrs	r3, r1
 800269a:	0f5a      	lsrs	r2, r3, #29
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	0752      	lsls	r2, r2, #29
 80026a0:	08db      	lsrs	r3, r3, #3
 80026a2:	4313      	orrs	r3, r2
 80026a4:	e5fe      	b.n	80022a4 <__aeabi_dsub+0x314>
 80026a6:	2300      	movs	r3, #0
 80026a8:	4a01      	ldr	r2, [pc, #4]	; (80026b0 <__aeabi_dsub+0x720>)
 80026aa:	001c      	movs	r4, r3
 80026ac:	e513      	b.n	80020d6 <__aeabi_dsub+0x146>
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	000007ff 	.word	0x000007ff

080026b4 <__aeabi_i2d>:
 80026b4:	b570      	push	{r4, r5, r6, lr}
 80026b6:	2800      	cmp	r0, #0
 80026b8:	d016      	beq.n	80026e8 <__aeabi_i2d+0x34>
 80026ba:	17c3      	asrs	r3, r0, #31
 80026bc:	18c5      	adds	r5, r0, r3
 80026be:	405d      	eors	r5, r3
 80026c0:	0fc4      	lsrs	r4, r0, #31
 80026c2:	0028      	movs	r0, r5
 80026c4:	f000 f8f6 	bl	80028b4 <__clzsi2>
 80026c8:	4a11      	ldr	r2, [pc, #68]	; (8002710 <__aeabi_i2d+0x5c>)
 80026ca:	1a12      	subs	r2, r2, r0
 80026cc:	280a      	cmp	r0, #10
 80026ce:	dc16      	bgt.n	80026fe <__aeabi_i2d+0x4a>
 80026d0:	0003      	movs	r3, r0
 80026d2:	002e      	movs	r6, r5
 80026d4:	3315      	adds	r3, #21
 80026d6:	409e      	lsls	r6, r3
 80026d8:	230b      	movs	r3, #11
 80026da:	1a18      	subs	r0, r3, r0
 80026dc:	40c5      	lsrs	r5, r0
 80026de:	0552      	lsls	r2, r2, #21
 80026e0:	032d      	lsls	r5, r5, #12
 80026e2:	0b2d      	lsrs	r5, r5, #12
 80026e4:	0d53      	lsrs	r3, r2, #21
 80026e6:	e003      	b.n	80026f0 <__aeabi_i2d+0x3c>
 80026e8:	2400      	movs	r4, #0
 80026ea:	2300      	movs	r3, #0
 80026ec:	2500      	movs	r5, #0
 80026ee:	2600      	movs	r6, #0
 80026f0:	051b      	lsls	r3, r3, #20
 80026f2:	432b      	orrs	r3, r5
 80026f4:	07e4      	lsls	r4, r4, #31
 80026f6:	4323      	orrs	r3, r4
 80026f8:	0030      	movs	r0, r6
 80026fa:	0019      	movs	r1, r3
 80026fc:	bd70      	pop	{r4, r5, r6, pc}
 80026fe:	380b      	subs	r0, #11
 8002700:	4085      	lsls	r5, r0
 8002702:	0552      	lsls	r2, r2, #21
 8002704:	032d      	lsls	r5, r5, #12
 8002706:	2600      	movs	r6, #0
 8002708:	0b2d      	lsrs	r5, r5, #12
 800270a:	0d53      	lsrs	r3, r2, #21
 800270c:	e7f0      	b.n	80026f0 <__aeabi_i2d+0x3c>
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	0000041e 	.word	0x0000041e

08002714 <__aeabi_f2d>:
 8002714:	b570      	push	{r4, r5, r6, lr}
 8002716:	0043      	lsls	r3, r0, #1
 8002718:	0246      	lsls	r6, r0, #9
 800271a:	0fc4      	lsrs	r4, r0, #31
 800271c:	20fe      	movs	r0, #254	; 0xfe
 800271e:	0e1b      	lsrs	r3, r3, #24
 8002720:	1c59      	adds	r1, r3, #1
 8002722:	0a75      	lsrs	r5, r6, #9
 8002724:	4208      	tst	r0, r1
 8002726:	d00c      	beq.n	8002742 <__aeabi_f2d+0x2e>
 8002728:	22e0      	movs	r2, #224	; 0xe0
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	4694      	mov	ip, r2
 800272e:	076d      	lsls	r5, r5, #29
 8002730:	0b36      	lsrs	r6, r6, #12
 8002732:	4463      	add	r3, ip
 8002734:	051b      	lsls	r3, r3, #20
 8002736:	4333      	orrs	r3, r6
 8002738:	07e4      	lsls	r4, r4, #31
 800273a:	4323      	orrs	r3, r4
 800273c:	0028      	movs	r0, r5
 800273e:	0019      	movs	r1, r3
 8002740:	bd70      	pop	{r4, r5, r6, pc}
 8002742:	2b00      	cmp	r3, #0
 8002744:	d114      	bne.n	8002770 <__aeabi_f2d+0x5c>
 8002746:	2d00      	cmp	r5, #0
 8002748:	d01b      	beq.n	8002782 <__aeabi_f2d+0x6e>
 800274a:	0028      	movs	r0, r5
 800274c:	f000 f8b2 	bl	80028b4 <__clzsi2>
 8002750:	280a      	cmp	r0, #10
 8002752:	dc1c      	bgt.n	800278e <__aeabi_f2d+0x7a>
 8002754:	230b      	movs	r3, #11
 8002756:	002e      	movs	r6, r5
 8002758:	1a1b      	subs	r3, r3, r0
 800275a:	40de      	lsrs	r6, r3
 800275c:	0003      	movs	r3, r0
 800275e:	3315      	adds	r3, #21
 8002760:	409d      	lsls	r5, r3
 8002762:	4a0e      	ldr	r2, [pc, #56]	; (800279c <__aeabi_f2d+0x88>)
 8002764:	0336      	lsls	r6, r6, #12
 8002766:	1a12      	subs	r2, r2, r0
 8002768:	0552      	lsls	r2, r2, #21
 800276a:	0b36      	lsrs	r6, r6, #12
 800276c:	0d53      	lsrs	r3, r2, #21
 800276e:	e7e1      	b.n	8002734 <__aeabi_f2d+0x20>
 8002770:	2d00      	cmp	r5, #0
 8002772:	d009      	beq.n	8002788 <__aeabi_f2d+0x74>
 8002774:	2280      	movs	r2, #128	; 0x80
 8002776:	0b36      	lsrs	r6, r6, #12
 8002778:	0312      	lsls	r2, r2, #12
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <__aeabi_f2d+0x8c>)
 800277c:	076d      	lsls	r5, r5, #29
 800277e:	4316      	orrs	r6, r2
 8002780:	e7d8      	b.n	8002734 <__aeabi_f2d+0x20>
 8002782:	2300      	movs	r3, #0
 8002784:	2600      	movs	r6, #0
 8002786:	e7d5      	b.n	8002734 <__aeabi_f2d+0x20>
 8002788:	2600      	movs	r6, #0
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <__aeabi_f2d+0x8c>)
 800278c:	e7d2      	b.n	8002734 <__aeabi_f2d+0x20>
 800278e:	0003      	movs	r3, r0
 8002790:	3b0b      	subs	r3, #11
 8002792:	409d      	lsls	r5, r3
 8002794:	002e      	movs	r6, r5
 8002796:	2500      	movs	r5, #0
 8002798:	e7e3      	b.n	8002762 <__aeabi_f2d+0x4e>
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	00000389 	.word	0x00000389
 80027a0:	000007ff 	.word	0x000007ff

080027a4 <__aeabi_d2f>:
 80027a4:	0002      	movs	r2, r0
 80027a6:	004b      	lsls	r3, r1, #1
 80027a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027aa:	0d5b      	lsrs	r3, r3, #21
 80027ac:	030c      	lsls	r4, r1, #12
 80027ae:	4e3d      	ldr	r6, [pc, #244]	; (80028a4 <__aeabi_d2f+0x100>)
 80027b0:	0a64      	lsrs	r4, r4, #9
 80027b2:	0f40      	lsrs	r0, r0, #29
 80027b4:	1c5f      	adds	r7, r3, #1
 80027b6:	0fc9      	lsrs	r1, r1, #31
 80027b8:	4304      	orrs	r4, r0
 80027ba:	00d5      	lsls	r5, r2, #3
 80027bc:	4237      	tst	r7, r6
 80027be:	d00a      	beq.n	80027d6 <__aeabi_d2f+0x32>
 80027c0:	4839      	ldr	r0, [pc, #228]	; (80028a8 <__aeabi_d2f+0x104>)
 80027c2:	181e      	adds	r6, r3, r0
 80027c4:	2efe      	cmp	r6, #254	; 0xfe
 80027c6:	dd16      	ble.n	80027f6 <__aeabi_d2f+0x52>
 80027c8:	20ff      	movs	r0, #255	; 0xff
 80027ca:	2400      	movs	r4, #0
 80027cc:	05c0      	lsls	r0, r0, #23
 80027ce:	4320      	orrs	r0, r4
 80027d0:	07c9      	lsls	r1, r1, #31
 80027d2:	4308      	orrs	r0, r1
 80027d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <__aeabi_d2f+0x44>
 80027da:	432c      	orrs	r4, r5
 80027dc:	d026      	beq.n	800282c <__aeabi_d2f+0x88>
 80027de:	2205      	movs	r2, #5
 80027e0:	0192      	lsls	r2, r2, #6
 80027e2:	0a54      	lsrs	r4, r2, #9
 80027e4:	b2d8      	uxtb	r0, r3
 80027e6:	e7f1      	b.n	80027cc <__aeabi_d2f+0x28>
 80027e8:	4325      	orrs	r5, r4
 80027ea:	d0ed      	beq.n	80027c8 <__aeabi_d2f+0x24>
 80027ec:	2080      	movs	r0, #128	; 0x80
 80027ee:	03c0      	lsls	r0, r0, #15
 80027f0:	4304      	orrs	r4, r0
 80027f2:	20ff      	movs	r0, #255	; 0xff
 80027f4:	e7ea      	b.n	80027cc <__aeabi_d2f+0x28>
 80027f6:	2e00      	cmp	r6, #0
 80027f8:	dd1b      	ble.n	8002832 <__aeabi_d2f+0x8e>
 80027fa:	0192      	lsls	r2, r2, #6
 80027fc:	1e53      	subs	r3, r2, #1
 80027fe:	419a      	sbcs	r2, r3
 8002800:	00e4      	lsls	r4, r4, #3
 8002802:	0f6d      	lsrs	r5, r5, #29
 8002804:	4322      	orrs	r2, r4
 8002806:	432a      	orrs	r2, r5
 8002808:	0753      	lsls	r3, r2, #29
 800280a:	d048      	beq.n	800289e <__aeabi_d2f+0xfa>
 800280c:	230f      	movs	r3, #15
 800280e:	4013      	ands	r3, r2
 8002810:	2b04      	cmp	r3, #4
 8002812:	d000      	beq.n	8002816 <__aeabi_d2f+0x72>
 8002814:	3204      	adds	r2, #4
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	04db      	lsls	r3, r3, #19
 800281a:	4013      	ands	r3, r2
 800281c:	d03f      	beq.n	800289e <__aeabi_d2f+0xfa>
 800281e:	1c70      	adds	r0, r6, #1
 8002820:	2efe      	cmp	r6, #254	; 0xfe
 8002822:	d0d1      	beq.n	80027c8 <__aeabi_d2f+0x24>
 8002824:	0192      	lsls	r2, r2, #6
 8002826:	0a54      	lsrs	r4, r2, #9
 8002828:	b2c0      	uxtb	r0, r0
 800282a:	e7cf      	b.n	80027cc <__aeabi_d2f+0x28>
 800282c:	2000      	movs	r0, #0
 800282e:	2400      	movs	r4, #0
 8002830:	e7cc      	b.n	80027cc <__aeabi_d2f+0x28>
 8002832:	0032      	movs	r2, r6
 8002834:	3217      	adds	r2, #23
 8002836:	db22      	blt.n	800287e <__aeabi_d2f+0xda>
 8002838:	2080      	movs	r0, #128	; 0x80
 800283a:	0400      	lsls	r0, r0, #16
 800283c:	4320      	orrs	r0, r4
 800283e:	241e      	movs	r4, #30
 8002840:	1ba4      	subs	r4, r4, r6
 8002842:	2c1f      	cmp	r4, #31
 8002844:	dd1d      	ble.n	8002882 <__aeabi_d2f+0xde>
 8002846:	2202      	movs	r2, #2
 8002848:	4252      	negs	r2, r2
 800284a:	1b96      	subs	r6, r2, r6
 800284c:	0002      	movs	r2, r0
 800284e:	40f2      	lsrs	r2, r6
 8002850:	0016      	movs	r6, r2
 8002852:	2c20      	cmp	r4, #32
 8002854:	d004      	beq.n	8002860 <__aeabi_d2f+0xbc>
 8002856:	4a15      	ldr	r2, [pc, #84]	; (80028ac <__aeabi_d2f+0x108>)
 8002858:	4694      	mov	ip, r2
 800285a:	4463      	add	r3, ip
 800285c:	4098      	lsls	r0, r3
 800285e:	4305      	orrs	r5, r0
 8002860:	002a      	movs	r2, r5
 8002862:	1e53      	subs	r3, r2, #1
 8002864:	419a      	sbcs	r2, r3
 8002866:	4332      	orrs	r2, r6
 8002868:	2600      	movs	r6, #0
 800286a:	0753      	lsls	r3, r2, #29
 800286c:	d1ce      	bne.n	800280c <__aeabi_d2f+0x68>
 800286e:	2480      	movs	r4, #128	; 0x80
 8002870:	0013      	movs	r3, r2
 8002872:	04e4      	lsls	r4, r4, #19
 8002874:	2001      	movs	r0, #1
 8002876:	4023      	ands	r3, r4
 8002878:	4222      	tst	r2, r4
 800287a:	d1d3      	bne.n	8002824 <__aeabi_d2f+0x80>
 800287c:	e7b0      	b.n	80027e0 <__aeabi_d2f+0x3c>
 800287e:	2300      	movs	r3, #0
 8002880:	e7ad      	b.n	80027de <__aeabi_d2f+0x3a>
 8002882:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <__aeabi_d2f+0x10c>)
 8002884:	4694      	mov	ip, r2
 8002886:	002a      	movs	r2, r5
 8002888:	40e2      	lsrs	r2, r4
 800288a:	0014      	movs	r4, r2
 800288c:	002a      	movs	r2, r5
 800288e:	4463      	add	r3, ip
 8002890:	409a      	lsls	r2, r3
 8002892:	4098      	lsls	r0, r3
 8002894:	1e55      	subs	r5, r2, #1
 8002896:	41aa      	sbcs	r2, r5
 8002898:	4302      	orrs	r2, r0
 800289a:	4322      	orrs	r2, r4
 800289c:	e7e4      	b.n	8002868 <__aeabi_d2f+0xc4>
 800289e:	0033      	movs	r3, r6
 80028a0:	e79e      	b.n	80027e0 <__aeabi_d2f+0x3c>
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	000007fe 	.word	0x000007fe
 80028a8:	fffffc80 	.word	0xfffffc80
 80028ac:	fffffca2 	.word	0xfffffca2
 80028b0:	fffffc82 	.word	0xfffffc82

080028b4 <__clzsi2>:
 80028b4:	211c      	movs	r1, #28
 80028b6:	2301      	movs	r3, #1
 80028b8:	041b      	lsls	r3, r3, #16
 80028ba:	4298      	cmp	r0, r3
 80028bc:	d301      	bcc.n	80028c2 <__clzsi2+0xe>
 80028be:	0c00      	lsrs	r0, r0, #16
 80028c0:	3910      	subs	r1, #16
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	4298      	cmp	r0, r3
 80028c6:	d301      	bcc.n	80028cc <__clzsi2+0x18>
 80028c8:	0a00      	lsrs	r0, r0, #8
 80028ca:	3908      	subs	r1, #8
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	4298      	cmp	r0, r3
 80028d0:	d301      	bcc.n	80028d6 <__clzsi2+0x22>
 80028d2:	0900      	lsrs	r0, r0, #4
 80028d4:	3904      	subs	r1, #4
 80028d6:	a202      	add	r2, pc, #8	; (adr r2, 80028e0 <__clzsi2+0x2c>)
 80028d8:	5c10      	ldrb	r0, [r2, r0]
 80028da:	1840      	adds	r0, r0, r1
 80028dc:	4770      	bx	lr
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	02020304 	.word	0x02020304
 80028e4:	01010101 	.word	0x01010101
	...

080028f0 <__clzdi2>:
 80028f0:	b510      	push	{r4, lr}
 80028f2:	2900      	cmp	r1, #0
 80028f4:	d103      	bne.n	80028fe <__clzdi2+0xe>
 80028f6:	f7ff ffdd 	bl	80028b4 <__clzsi2>
 80028fa:	3020      	adds	r0, #32
 80028fc:	e002      	b.n	8002904 <__clzdi2+0x14>
 80028fe:	0008      	movs	r0, r1
 8002900:	f7ff ffd8 	bl	80028b4 <__clzsi2>
 8002904:	bd10      	pop	{r4, pc}
 8002906:	46c0      	nop			; (mov r8, r8)

08002908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002908:	b5b0      	push	{r4, r5, r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800290c:	f000 ff54 	bl	80037b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002910:	f000 fac2 	bl	8002e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002914:	f000 fcc0 	bl	8003298 <MX_GPIO_Init>
  MX_DMA_Init();
 8002918:	f000 fc98 	bl	800324c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800291c:	f000 fc14 	bl	8003148 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002920:	f000 fb74 	bl	800300c <MX_TIM2_Init>
  MX_TIM1_Init();
 8002924:	f000 fb16 	bl	8002f54 <MX_TIM1_Init>
  MX_USART5_UART_Init();
 8002928:	f000 fc5c 	bl	80031e4 <MX_USART5_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  dw[3]=dw[1]=dw[2]=48;
 800292c:	4bf4      	ldr	r3, [pc, #976]	; (8002d00 <main+0x3f8>)
 800292e:	2230      	movs	r2, #48	; 0x30
 8002930:	709a      	strb	r2, [r3, #2]
 8002932:	4bf3      	ldr	r3, [pc, #972]	; (8002d00 <main+0x3f8>)
 8002934:	2202      	movs	r2, #2
 8002936:	569a      	ldrsb	r2, [r3, r2]
 8002938:	4bf1      	ldr	r3, [pc, #964]	; (8002d00 <main+0x3f8>)
 800293a:	705a      	strb	r2, [r3, #1]
 800293c:	4bf0      	ldr	r3, [pc, #960]	; (8002d00 <main+0x3f8>)
 800293e:	2201      	movs	r2, #1
 8002940:	569a      	ldrsb	r2, [r3, r2]
 8002942:	4bef      	ldr	r3, [pc, #956]	; (8002d00 <main+0x3f8>)
 8002944:	70da      	strb	r2, [r3, #3]


  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	019b      	lsls	r3, r3, #6
 800294a:	48ee      	ldr	r0, [pc, #952]	; (8002d04 <main+0x3fc>)
 800294c:	2201      	movs	r2, #1
 800294e:	0019      	movs	r1, r3
 8002950:	f001 fcb8 	bl	80042c4 <HAL_GPIO_WritePin>
  while (1)
  {

	  HAL_UART_Receive_DMA(&huart1, &m[0],16);
 8002954:	49ec      	ldr	r1, [pc, #944]	; (8002d08 <main+0x400>)
 8002956:	4bed      	ldr	r3, [pc, #948]	; (8002d0c <main+0x404>)
 8002958:	2210      	movs	r2, #16
 800295a:	0018      	movs	r0, r3
 800295c:	f003 fc44 	bl	80061e8 <HAL_UART_Receive_DMA>
//	  HAL_UART_Receive(&huart1, &m[0],16, 0xffff);

	  angle_x=m[0];
 8002960:	4be9      	ldr	r3, [pc, #932]	; (8002d08 <main+0x400>)
 8002962:	2200      	movs	r2, #0
 8002964:	5e9b      	ldrsh	r3, [r3, r2]
 8002966:	001a      	movs	r2, r3
 8002968:	4be9      	ldr	r3, [pc, #932]	; (8002d10 <main+0x408>)
 800296a:	601a      	str	r2, [r3, #0]
	  angle_y=m[1];
 800296c:	4be6      	ldr	r3, [pc, #920]	; (8002d08 <main+0x400>)
 800296e:	2202      	movs	r2, #2
 8002970:	5e9b      	ldrsh	r3, [r3, r2]
 8002972:	001a      	movs	r2, r3
 8002974:	4be7      	ldr	r3, [pc, #924]	; (8002d14 <main+0x40c>)
 8002976:	601a      	str	r2, [r3, #0]
	  angle_z=m[2];
 8002978:	4be3      	ldr	r3, [pc, #908]	; (8002d08 <main+0x400>)
 800297a:	2204      	movs	r2, #4
 800297c:	5e9b      	ldrsh	r3, [r3, r2]
 800297e:	001a      	movs	r2, r3
 8002980:	4be5      	ldr	r3, [pc, #916]	; (8002d18 <main+0x410>)
 8002982:	601a      	str	r2, [r3, #0]
	  w_x=m[3];
 8002984:	4be0      	ldr	r3, [pc, #896]	; (8002d08 <main+0x400>)
 8002986:	2206      	movs	r2, #6
 8002988:	5e9b      	ldrsh	r3, [r3, r2]
 800298a:	001a      	movs	r2, r3
 800298c:	4be3      	ldr	r3, [pc, #908]	; (8002d1c <main+0x414>)
 800298e:	601a      	str	r2, [r3, #0]
	  w_y=m[4];
 8002990:	4bdd      	ldr	r3, [pc, #884]	; (8002d08 <main+0x400>)
 8002992:	2208      	movs	r2, #8
 8002994:	5e9b      	ldrsh	r3, [r3, r2]
 8002996:	001a      	movs	r2, r3
 8002998:	4be1      	ldr	r3, [pc, #900]	; (8002d20 <main+0x418>)
 800299a:	601a      	str	r2, [r3, #0]
	  w_z=m[5];
 800299c:	4bda      	ldr	r3, [pc, #872]	; (8002d08 <main+0x400>)
 800299e:	220a      	movs	r2, #10
 80029a0:	5e9b      	ldrsh	r3, [r3, r2]
 80029a2:	001a      	movs	r2, r3
 80029a4:	4bdf      	ldr	r3, [pc, #892]	; (8002d24 <main+0x41c>)
 80029a6:	601a      	str	r2, [r3, #0]

	  start_time=HAL_GetTick();
 80029a8:	f000 ff82 	bl	80038b0 <HAL_GetTick>
 80029ac:	0003      	movs	r3, r0
 80029ae:	0018      	movs	r0, r3
 80029b0:	f7fe fd04 	bl	80013bc <__aeabi_ui2f>
 80029b4:	1c02      	adds	r2, r0, #0
 80029b6:	4bdc      	ldr	r3, [pc, #880]	; (8002d28 <main+0x420>)
 80029b8:	601a      	str	r2, [r3, #0]
#endif

#if(OK3==1)


	  s_y=(-w_y)+(c_y* (10-angle_y) );
 80029ba:	4bd6      	ldr	r3, [pc, #856]	; (8002d14 <main+0x40c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	220a      	movs	r2, #10
 80029c0:	1ad2      	subs	r2, r2, r3
 80029c2:	0013      	movs	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	189a      	adds	r2, r3, r2
 80029c8:	4bd5      	ldr	r3, [pc, #852]	; (8002d20 <main+0x418>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	0018      	movs	r0, r3
 80029d0:	f7fe fca6 	bl	8001320 <__aeabi_i2f>
 80029d4:	1c02      	adds	r2, r0, #0
 80029d6:	4bd5      	ldr	r3, [pc, #852]	; (8002d2c <main+0x424>)
 80029d8:	601a      	str	r2, [r3, #0]
	  if(s_y>0)
 80029da:	4bd4      	ldr	r3, [pc, #848]	; (8002d2c <main+0x424>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2100      	movs	r1, #0
 80029e0:	1c18      	adds	r0, r3, #0
 80029e2:	f7fd fd2b 	bl	800043c <__aeabi_fcmpgt>
 80029e6:	1e03      	subs	r3, r0, #0
 80029e8:	d002      	beq.n	80029f0 <main+0xe8>
	  {sgn_y=1;}
 80029ea:	4bd1      	ldr	r3, [pc, #836]	; (8002d30 <main+0x428>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
	  if(s_y<0)
 80029f0:	4bce      	ldr	r3, [pc, #824]	; (8002d2c <main+0x424>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2100      	movs	r1, #0
 80029f6:	1c18      	adds	r0, r3, #0
 80029f8:	f7fd fd0c 	bl	8000414 <__aeabi_fcmplt>
 80029fc:	1e03      	subs	r3, r0, #0
 80029fe:	d003      	beq.n	8002a08 <main+0x100>
	  {sgn_y=-1;}
 8002a00:	4bcb      	ldr	r3, [pc, #812]	; (8002d30 <main+0x428>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	4252      	negs	r2, r2
 8002a06:	601a      	str	r2, [r3, #0]
	  if(s_y==0)
 8002a08:	4bc8      	ldr	r3, [pc, #800]	; (8002d2c <main+0x424>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	1c18      	adds	r0, r3, #0
 8002a10:	f7fd fcfa 	bl	8000408 <__aeabi_fcmpeq>
 8002a14:	1e03      	subs	r3, r0, #0
 8002a16:	d002      	beq.n	8002a1e <main+0x116>
	  {sgn_y=0;}
 8002a18:	4bc5      	ldr	r3, [pc, #788]	; (8002d30 <main+0x428>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
	  u_y=0.052233*((-0.80855*w_x*w_z)+(0.001631*w_x)-(c_y*w_y)+(k_y*s_y)+(q_y*sgn_y));
 8002a1e:	4bbf      	ldr	r3, [pc, #764]	; (8002d1c <main+0x414>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	0018      	movs	r0, r3
 8002a24:	f7ff fe46 	bl	80026b4 <__aeabi_i2d>
 8002a28:	4ac2      	ldr	r2, [pc, #776]	; (8002d34 <main+0x42c>)
 8002a2a:	4bc3      	ldr	r3, [pc, #780]	; (8002d38 <main+0x430>)
 8002a2c:	f7ff f844 	bl	8001ab8 <__aeabi_dmul>
 8002a30:	0002      	movs	r2, r0
 8002a32:	000b      	movs	r3, r1
 8002a34:	0014      	movs	r4, r2
 8002a36:	001d      	movs	r5, r3
 8002a38:	4bba      	ldr	r3, [pc, #744]	; (8002d24 <main+0x41c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f7ff fe39 	bl	80026b4 <__aeabi_i2d>
 8002a42:	0002      	movs	r2, r0
 8002a44:	000b      	movs	r3, r1
 8002a46:	0020      	movs	r0, r4
 8002a48:	0029      	movs	r1, r5
 8002a4a:	f7ff f835 	bl	8001ab8 <__aeabi_dmul>
 8002a4e:	0002      	movs	r2, r0
 8002a50:	000b      	movs	r3, r1
 8002a52:	0014      	movs	r4, r2
 8002a54:	001d      	movs	r5, r3
 8002a56:	4bb1      	ldr	r3, [pc, #708]	; (8002d1c <main+0x414>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7ff fe2a 	bl	80026b4 <__aeabi_i2d>
 8002a60:	4ab6      	ldr	r2, [pc, #728]	; (8002d3c <main+0x434>)
 8002a62:	4bb7      	ldr	r3, [pc, #732]	; (8002d40 <main+0x438>)
 8002a64:	f7ff f828 	bl	8001ab8 <__aeabi_dmul>
 8002a68:	0002      	movs	r2, r0
 8002a6a:	000b      	movs	r3, r1
 8002a6c:	0020      	movs	r0, r4
 8002a6e:	0029      	movs	r1, r5
 8002a70:	f7fe fce6 	bl	8001440 <__aeabi_dadd>
 8002a74:	0002      	movs	r2, r0
 8002a76:	000b      	movs	r3, r1
 8002a78:	0014      	movs	r4, r2
 8002a7a:	001d      	movs	r5, r3
 8002a7c:	4ba8      	ldr	r3, [pc, #672]	; (8002d20 <main+0x418>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	0013      	movs	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	189b      	adds	r3, r3, r2
 8002a86:	0018      	movs	r0, r3
 8002a88:	f7ff fe14 	bl	80026b4 <__aeabi_i2d>
 8002a8c:	0002      	movs	r2, r0
 8002a8e:	000b      	movs	r3, r1
 8002a90:	0020      	movs	r0, r4
 8002a92:	0029      	movs	r1, r5
 8002a94:	f7ff fa7c 	bl	8001f90 <__aeabi_dsub>
 8002a98:	0002      	movs	r2, r0
 8002a9a:	000b      	movs	r3, r1
 8002a9c:	0014      	movs	r4, r2
 8002a9e:	001d      	movs	r5, r3
 8002aa0:	4ba2      	ldr	r3, [pc, #648]	; (8002d2c <main+0x424>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	49a7      	ldr	r1, [pc, #668]	; (8002d44 <main+0x43c>)
 8002aa6:	1c18      	adds	r0, r3, #0
 8002aa8:	f7fe f946 	bl	8000d38 <__aeabi_fmul>
 8002aac:	1c03      	adds	r3, r0, #0
 8002aae:	1c18      	adds	r0, r3, #0
 8002ab0:	f7ff fe30 	bl	8002714 <__aeabi_f2d>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	000b      	movs	r3, r1
 8002ab8:	0020      	movs	r0, r4
 8002aba:	0029      	movs	r1, r5
 8002abc:	f7fe fcc0 	bl	8001440 <__aeabi_dadd>
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	000b      	movs	r3, r1
 8002ac4:	0014      	movs	r4, r2
 8002ac6:	001d      	movs	r5, r3
 8002ac8:	4b99      	ldr	r3, [pc, #612]	; (8002d30 <main+0x428>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f7ff fdf1 	bl	80026b4 <__aeabi_i2d>
 8002ad2:	4a9d      	ldr	r2, [pc, #628]	; (8002d48 <main+0x440>)
 8002ad4:	4b9d      	ldr	r3, [pc, #628]	; (8002d4c <main+0x444>)
 8002ad6:	f7fe ffef 	bl	8001ab8 <__aeabi_dmul>
 8002ada:	0002      	movs	r2, r0
 8002adc:	000b      	movs	r3, r1
 8002ade:	0020      	movs	r0, r4
 8002ae0:	0029      	movs	r1, r5
 8002ae2:	f7fe fcad 	bl	8001440 <__aeabi_dadd>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	000b      	movs	r3, r1
 8002aea:	0010      	movs	r0, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	4a98      	ldr	r2, [pc, #608]	; (8002d50 <main+0x448>)
 8002af0:	4b98      	ldr	r3, [pc, #608]	; (8002d54 <main+0x44c>)
 8002af2:	f7fe ffe1 	bl	8001ab8 <__aeabi_dmul>
 8002af6:	0002      	movs	r2, r0
 8002af8:	000b      	movs	r3, r1
 8002afa:	0010      	movs	r0, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	f7ff fe51 	bl	80027a4 <__aeabi_d2f>
 8002b02:	1c02      	adds	r2, r0, #0
 8002b04:	4b94      	ldr	r3, [pc, #592]	; (8002d58 <main+0x450>)
 8002b06:	601a      	str	r2, [r3, #0]

	  htim2.Instance->CCR4 = Normal_speed+u_y;
 8002b08:	4b93      	ldr	r3, [pc, #588]	; (8002d58 <main+0x450>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4993      	ldr	r1, [pc, #588]	; (8002d5c <main+0x454>)
 8002b0e:	1c18      	adds	r0, r3, #0
 8002b10:	f7fd fdac 	bl	800066c <__aeabi_fadd>
 8002b14:	1c03      	adds	r3, r0, #0
 8002b16:	1c1a      	adds	r2, r3, #0
 8002b18:	4b91      	ldr	r3, [pc, #580]	; (8002d60 <main+0x458>)
 8002b1a:	681c      	ldr	r4, [r3, #0]
 8002b1c:	1c10      	adds	r0, r2, #0
 8002b1e:	f7fd fcc1 	bl	80004a4 <__aeabi_f2uiz>
 8002b22:	0003      	movs	r3, r0
 8002b24:	6423      	str	r3, [r4, #64]	; 0x40


	  htim2.Instance->CCR3 = Normal_speed+u_y;
 8002b26:	4b8c      	ldr	r3, [pc, #560]	; (8002d58 <main+0x450>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	498c      	ldr	r1, [pc, #560]	; (8002d5c <main+0x454>)
 8002b2c:	1c18      	adds	r0, r3, #0
 8002b2e:	f7fd fd9d 	bl	800066c <__aeabi_fadd>
 8002b32:	1c03      	adds	r3, r0, #0
 8002b34:	1c1a      	adds	r2, r3, #0
 8002b36:	4b8a      	ldr	r3, [pc, #552]	; (8002d60 <main+0x458>)
 8002b38:	681c      	ldr	r4, [r3, #0]
 8002b3a:	1c10      	adds	r0, r2, #0
 8002b3c:	f7fd fcb2 	bl	80004a4 <__aeabi_f2uiz>
 8002b40:	0003      	movs	r3, r0
 8002b42:	63e3      	str	r3, [r4, #60]	; 0x3c


	  htim2.Instance->CCR1 = Normal_speed-u_y;
 8002b44:	4b84      	ldr	r3, [pc, #528]	; (8002d58 <main+0x450>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	1c19      	adds	r1, r3, #0
 8002b4a:	4884      	ldr	r0, [pc, #528]	; (8002d5c <main+0x454>)
 8002b4c:	f7fe fa1a 	bl	8000f84 <__aeabi_fsub>
 8002b50:	1c03      	adds	r3, r0, #0
 8002b52:	1c1a      	adds	r2, r3, #0
 8002b54:	4b82      	ldr	r3, [pc, #520]	; (8002d60 <main+0x458>)
 8002b56:	681c      	ldr	r4, [r3, #0]
 8002b58:	1c10      	adds	r0, r2, #0
 8002b5a:	f7fd fca3 	bl	80004a4 <__aeabi_f2uiz>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	6363      	str	r3, [r4, #52]	; 0x34



	  htim2.Instance->CCR2 = Normal_speed-u_y;
 8002b62:	4b7d      	ldr	r3, [pc, #500]	; (8002d58 <main+0x450>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	1c19      	adds	r1, r3, #0
 8002b68:	487c      	ldr	r0, [pc, #496]	; (8002d5c <main+0x454>)
 8002b6a:	f7fe fa0b 	bl	8000f84 <__aeabi_fsub>
 8002b6e:	1c03      	adds	r3, r0, #0
 8002b70:	1c1a      	adds	r2, r3, #0
 8002b72:	4b7b      	ldr	r3, [pc, #492]	; (8002d60 <main+0x458>)
 8002b74:	681c      	ldr	r4, [r3, #0]
 8002b76:	1c10      	adds	r0, r2, #0
 8002b78:	f7fd fc94 	bl	80004a4 <__aeabi_f2uiz>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	63a3      	str	r3, [r4, #56]	; 0x38

	  data[0]=angle_y;
 8002b80:	4b64      	ldr	r3, [pc, #400]	; (8002d14 <main+0x40c>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b77      	ldr	r3, [pc, #476]	; (8002d64 <main+0x45c>)
 8002b86:	601a      	str	r2, [r3, #0]

	  drow(m[1], start_time);
 8002b88:	4b5f      	ldr	r3, [pc, #380]	; (8002d08 <main+0x400>)
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	5e9b      	ldrsh	r3, [r3, r2]
 8002b8e:	001c      	movs	r4, r3
 8002b90:	4b65      	ldr	r3, [pc, #404]	; (8002d28 <main+0x420>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	1c18      	adds	r0, r3, #0
 8002b96:	f7fe fba3 	bl	80012e0 <__aeabi_f2iz>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	0020      	movs	r0, r4
 8002ba0:	f000 fdd6 	bl	8003750 <drow>





	  HAL_UART_Transmit(&huart5, &data[0], 1, 0xffff);
 8002ba4:	4b70      	ldr	r3, [pc, #448]	; (8002d68 <main+0x460>)
 8002ba6:	496f      	ldr	r1, [pc, #444]	; (8002d64 <main+0x45c>)
 8002ba8:	4870      	ldr	r0, [pc, #448]	; (8002d6c <main+0x464>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	f003 fa70 	bl	8006090 <HAL_UART_Transmit>

	  s_x=(-w_x)+(c_x* - angle_x);
 8002bb0:	4b5a      	ldr	r3, [pc, #360]	; (8002d1c <main+0x414>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	425a      	negs	r2, r3
 8002bb6:	4b56      	ldr	r3, [pc, #344]	; (8002d10 <main+0x408>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7fe fbaf 	bl	8001320 <__aeabi_i2f>
 8002bc2:	1c02      	adds	r2, r0, #0
 8002bc4:	4b6a      	ldr	r3, [pc, #424]	; (8002d70 <main+0x468>)
 8002bc6:	601a      	str	r2, [r3, #0]
	  if(s_x>0)
 8002bc8:	4b69      	ldr	r3, [pc, #420]	; (8002d70 <main+0x468>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2100      	movs	r1, #0
 8002bce:	1c18      	adds	r0, r3, #0
 8002bd0:	f7fd fc34 	bl	800043c <__aeabi_fcmpgt>
 8002bd4:	1e03      	subs	r3, r0, #0
 8002bd6:	d002      	beq.n	8002bde <main+0x2d6>
	  {sgn_x=1;}
 8002bd8:	4b66      	ldr	r3, [pc, #408]	; (8002d74 <main+0x46c>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
	  if(s_x<0)
 8002bde:	4b64      	ldr	r3, [pc, #400]	; (8002d70 <main+0x468>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2100      	movs	r1, #0
 8002be4:	1c18      	adds	r0, r3, #0
 8002be6:	f7fd fc15 	bl	8000414 <__aeabi_fcmplt>
 8002bea:	1e03      	subs	r3, r0, #0
 8002bec:	d003      	beq.n	8002bf6 <main+0x2ee>
	  {sgn_x=-1;}
 8002bee:	4b61      	ldr	r3, [pc, #388]	; (8002d74 <main+0x46c>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4252      	negs	r2, r2
 8002bf4:	601a      	str	r2, [r3, #0]
	  if(s_x==0)
 8002bf6:	4b5e      	ldr	r3, [pc, #376]	; (8002d70 <main+0x468>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	1c18      	adds	r0, r3, #0
 8002bfe:	f7fd fc03 	bl	8000408 <__aeabi_fcmpeq>
 8002c02:	1e03      	subs	r3, r0, #0
 8002c04:	d002      	beq.n	8002c0c <main+0x304>
	  {sgn_x=0;}
 8002c06:	4b5b      	ldr	r3, [pc, #364]	; (8002d74 <main+0x46c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
	  u_x=0.052233*((-0.80855*w_y*w_z)-(0.003835*w_y)-(c_x*w_x)+(k_x*s_x)+(q_x*sgn_x));
 8002c0c:	4b44      	ldr	r3, [pc, #272]	; (8002d20 <main+0x418>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff fd4f 	bl	80026b4 <__aeabi_i2d>
 8002c16:	4a47      	ldr	r2, [pc, #284]	; (8002d34 <main+0x42c>)
 8002c18:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <main+0x430>)
 8002c1a:	f7fe ff4d 	bl	8001ab8 <__aeabi_dmul>
 8002c1e:	0002      	movs	r2, r0
 8002c20:	000b      	movs	r3, r1
 8002c22:	0014      	movs	r4, r2
 8002c24:	001d      	movs	r5, r3
 8002c26:	4b3f      	ldr	r3, [pc, #252]	; (8002d24 <main+0x41c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f7ff fd42 	bl	80026b4 <__aeabi_i2d>
 8002c30:	0002      	movs	r2, r0
 8002c32:	000b      	movs	r3, r1
 8002c34:	0020      	movs	r0, r4
 8002c36:	0029      	movs	r1, r5
 8002c38:	f7fe ff3e 	bl	8001ab8 <__aeabi_dmul>
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	000b      	movs	r3, r1
 8002c40:	0014      	movs	r4, r2
 8002c42:	001d      	movs	r5, r3
 8002c44:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <main+0x418>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7ff fd33 	bl	80026b4 <__aeabi_i2d>
 8002c4e:	4a4a      	ldr	r2, [pc, #296]	; (8002d78 <main+0x470>)
 8002c50:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <main+0x474>)
 8002c52:	f7fe ff31 	bl	8001ab8 <__aeabi_dmul>
 8002c56:	0002      	movs	r2, r0
 8002c58:	000b      	movs	r3, r1
 8002c5a:	0020      	movs	r0, r4
 8002c5c:	0029      	movs	r1, r5
 8002c5e:	f7ff f997 	bl	8001f90 <__aeabi_dsub>
 8002c62:	0002      	movs	r2, r0
 8002c64:	000b      	movs	r3, r1
 8002c66:	0014      	movs	r4, r2
 8002c68:	001d      	movs	r5, r3
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <main+0x414>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f7ff fd20 	bl	80026b4 <__aeabi_i2d>
 8002c74:	0002      	movs	r2, r0
 8002c76:	000b      	movs	r3, r1
 8002c78:	0020      	movs	r0, r4
 8002c7a:	0029      	movs	r1, r5
 8002c7c:	f7ff f988 	bl	8001f90 <__aeabi_dsub>
 8002c80:	0002      	movs	r2, r0
 8002c82:	000b      	movs	r3, r1
 8002c84:	0014      	movs	r4, r2
 8002c86:	001d      	movs	r5, r3
 8002c88:	4b39      	ldr	r3, [pc, #228]	; (8002d70 <main+0x468>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	1c18      	adds	r0, r3, #0
 8002c8e:	f7ff fd41 	bl	8002714 <__aeabi_f2d>
 8002c92:	0002      	movs	r2, r0
 8002c94:	000b      	movs	r3, r1
 8002c96:	0020      	movs	r0, r4
 8002c98:	0029      	movs	r1, r5
 8002c9a:	f7fe fbd1 	bl	8001440 <__aeabi_dadd>
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	000b      	movs	r3, r1
 8002ca2:	0014      	movs	r4, r2
 8002ca4:	001d      	movs	r5, r3
 8002ca6:	4b33      	ldr	r3, [pc, #204]	; (8002d74 <main+0x46c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	0018      	movs	r0, r3
 8002cac:	f7ff fd02 	bl	80026b4 <__aeabi_i2d>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	000b      	movs	r3, r1
 8002cb4:	0020      	movs	r0, r4
 8002cb6:	0029      	movs	r1, r5
 8002cb8:	f7fe fbc2 	bl	8001440 <__aeabi_dadd>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	000b      	movs	r3, r1
 8002cc0:	0010      	movs	r0, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	4a22      	ldr	r2, [pc, #136]	; (8002d50 <main+0x448>)
 8002cc6:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <main+0x44c>)
 8002cc8:	f7fe fef6 	bl	8001ab8 <__aeabi_dmul>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	000b      	movs	r3, r1
 8002cd0:	0010      	movs	r0, r2
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	f7ff fd66 	bl	80027a4 <__aeabi_d2f>
 8002cd8:	1c02      	adds	r2, r0, #0
 8002cda:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <main+0x478>)
 8002cdc:	601a      	str	r2, [r3, #0]




	  s_z=c_z*(0-zz);
 8002cde:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <main+0x47c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	425b      	negs	r3, r3
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7fe fb1b 	bl	8001320 <__aeabi_i2f>
 8002cea:	1c02      	adds	r2, r0, #0
 8002cec:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <main+0x480>)
 8002cee:	601a      	str	r2, [r3, #0]
	  if(s_z>0)
 8002cf0:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <main+0x480>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	1c18      	adds	r0, r3, #0
 8002cf8:	f7fd fba0 	bl	800043c <__aeabi_fcmpgt>
 8002cfc:	e046      	b.n	8002d8c <main+0x484>
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	200012b0 	.word	0x200012b0
 8002d04:	50000800 	.word	0x50000800
 8002d08:	20000028 	.word	0x20000028
 8002d0c:	20000124 	.word	0x20000124
 8002d10:	20000048 	.word	0x20000048
 8002d14:	2000004c 	.word	0x2000004c
 8002d18:	20000050 	.word	0x20000050
 8002d1c:	20000054 	.word	0x20000054
 8002d20:	20000058 	.word	0x20000058
 8002d24:	2000005c 	.word	0x2000005c
 8002d28:	20000044 	.word	0x20000044
 8002d2c:	20000064 	.word	0x20000064
 8002d30:	2000006c 	.word	0x2000006c
 8002d34:	3fe5c91d 	.word	0x3fe5c91d
 8002d38:	bfe9dfa4 	.word	0xbfe9dfa4
 8002d3c:	ea39c51e 	.word	0xea39c51e
 8002d40:	3f5ab8e8 	.word	0x3f5ab8e8
 8002d44:	40400000 	.word	0x40400000
 8002d48:	47ae147b 	.word	0x47ae147b
 8002d4c:	3f847ae1 	.word	0x3f847ae1
 8002d50:	a58b3f64 	.word	0xa58b3f64
 8002d54:	3faabe48 	.word	0x3faabe48
 8002d58:	20000068 	.word	0x20000068
 8002d5c:	443b8000 	.word	0x443b8000
 8002d60:	200000d8 	.word	0x200000d8
 8002d64:	20000060 	.word	0x20000060
 8002d68:	0000ffff 	.word	0x0000ffff
 8002d6c:	200001b4 	.word	0x200001b4
 8002d70:	20000070 	.word	0x20000070
 8002d74:	20000078 	.word	0x20000078
 8002d78:	f290abb4 	.word	0xf290abb4
 8002d7c:	3f6f6a93 	.word	0x3f6f6a93
 8002d80:	20000074 	.word	0x20000074
 8002d84:	20000088 	.word	0x20000088
 8002d88:	2000007c 	.word	0x2000007c
 8002d8c:	1e03      	subs	r3, r0, #0
 8002d8e:	d002      	beq.n	8002d96 <main+0x48e>
	  {sgn_z=1;}
 8002d90:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <main+0x564>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
  	  if(s_z<0)
 8002d96:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <main+0x568>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	1c18      	adds	r0, r3, #0
 8002d9e:	f7fd fb39 	bl	8000414 <__aeabi_fcmplt>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d003      	beq.n	8002dae <main+0x4a6>
	  {sgn_z=-1;}
 8002da6:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <main+0x564>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	4252      	negs	r2, r2
 8002dac:	601a      	str	r2, [r3, #0]
	  if(s_z==0)
 8002dae:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <main+0x568>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2100      	movs	r1, #0
 8002db4:	1c18      	adds	r0, r3, #0
 8002db6:	f7fd fb27 	bl	8000408 <__aeabi_fcmpeq>
 8002dba:	1e03      	subs	r3, r0, #0
 8002dbc:	d002      	beq.n	8002dc4 <main+0x4bc>
	  {sgn_z=0;}
 8002dbe:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <main+0x564>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
	  u_z=mm*(gg+(k_z*s_z)+(q_z*sgn_z*s_z));
 8002dc4:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <main+0x568>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	1c18      	adds	r0, r3, #0
 8002dca:	f7ff fca3 	bl	8002714 <__aeabi_f2d>
 8002dce:	4a29      	ldr	r2, [pc, #164]	; (8002e74 <main+0x56c>)
 8002dd0:	4b29      	ldr	r3, [pc, #164]	; (8002e78 <main+0x570>)
 8002dd2:	f7fe fb35 	bl	8001440 <__aeabi_dadd>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	000b      	movs	r3, r1
 8002dda:	0014      	movs	r4, r2
 8002ddc:	001d      	movs	r5, r3
 8002dde:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <main+0x564>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7fe fa9c 	bl	8001320 <__aeabi_i2f>
 8002de8:	1c02      	adds	r2, r0, #0
 8002dea:	4b21      	ldr	r3, [pc, #132]	; (8002e70 <main+0x568>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	1c19      	adds	r1, r3, #0
 8002df0:	1c10      	adds	r0, r2, #0
 8002df2:	f7fd ffa1 	bl	8000d38 <__aeabi_fmul>
 8002df6:	1c03      	adds	r3, r0, #0
 8002df8:	1c18      	adds	r0, r3, #0
 8002dfa:	f7ff fc8b 	bl	8002714 <__aeabi_f2d>
 8002dfe:	0002      	movs	r2, r0
 8002e00:	000b      	movs	r3, r1
 8002e02:	0020      	movs	r0, r4
 8002e04:	0029      	movs	r1, r5
 8002e06:	f7fe fb1b 	bl	8001440 <__aeabi_dadd>
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	000b      	movs	r3, r1
 8002e0e:	0010      	movs	r0, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <main+0x56c>)
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <main+0x574>)
 8002e16:	f7fe fe4f 	bl	8001ab8 <__aeabi_dmul>
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	000b      	movs	r3, r1
 8002e1e:	0010      	movs	r0, r2
 8002e20:	0019      	movs	r1, r3
 8002e22:	f7ff fcbf 	bl	80027a4 <__aeabi_d2f>
 8002e26:	1c02      	adds	r2, r0, #0
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <main+0x578>)
 8002e2a:	601a      	str	r2, [r3, #0]

#endif



	  end_time=HAL_GetTick();
 8002e2c:	f000 fd40 	bl	80038b0 <HAL_GetTick>
 8002e30:	0003      	movs	r3, r0
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7fe fac2 	bl	80013bc <__aeabi_ui2f>
 8002e38:	1c02      	adds	r2, r0, #0
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <main+0x57c>)
 8002e3c:	601a      	str	r2, [r3, #0]

	  Loop_time=end_time-start_time;
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <main+0x57c>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <main+0x580>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	1c19      	adds	r1, r3, #0
 8002e48:	1c10      	adds	r0, r2, #0
 8002e4a:	f7fe f89b 	bl	8000f84 <__aeabi_fsub>
 8002e4e:	1c03      	adds	r3, r0, #0
 8002e50:	1c1a      	adds	r2, r3, #0
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <main+0x584>)
 8002e54:	601a      	str	r2, [r3, #0]

	  dt=Loop_time/1000;
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <main+0x584>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	490d      	ldr	r1, [pc, #52]	; (8002e90 <main+0x588>)
 8002e5c:	1c18      	adds	r0, r3, #0
 8002e5e:	f7fd fda3 	bl	80009a8 <__aeabi_fdiv>
 8002e62:	1c03      	adds	r3, r0, #0
 8002e64:	1c1a      	adds	r2, r3, #0
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <main+0x58c>)
 8002e68:	601a      	str	r2, [r3, #0]
	  HAL_UART_Receive_DMA(&huart1, &m[0],16);
 8002e6a:	e573      	b.n	8002954 <main+0x4c>
 8002e6c:	20000084 	.word	0x20000084
 8002e70:	2000007c 	.word	0x2000007c
 8002e74:	9999999a 	.word	0x9999999a
 8002e78:	40239999 	.word	0x40239999
 8002e7c:	3fe99999 	.word	0x3fe99999
 8002e80:	20000080 	.word	0x20000080
 8002e84:	20000040 	.word	0x20000040
 8002e88:	20000044 	.word	0x20000044
 8002e8c:	2000003c 	.word	0x2000003c
 8002e90:	447a0000 	.word	0x447a0000
 8002e94:	20000038 	.word	0x20000038

08002e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b095      	sub	sp, #84	; 0x54
 8002e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e9e:	2414      	movs	r4, #20
 8002ea0:	193b      	adds	r3, r7, r4
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	233c      	movs	r3, #60	; 0x3c
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	f004 facd 	bl	8007448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	2310      	movs	r3, #16
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	f004 fac6 	bl	8007448 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f001 fa1d 	bl	8004300 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ec6:	193b      	adds	r3, r7, r4
 8002ec8:	2202      	movs	r2, #2
 8002eca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ecc:	193b      	adds	r3, r7, r4
 8002ece:	2280      	movs	r2, #128	; 0x80
 8002ed0:	0052      	lsls	r2, r2, #1
 8002ed2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002ed4:	0021      	movs	r1, r4
 8002ed6:	187b      	adds	r3, r7, r1
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002edc:	187b      	adds	r3, r7, r1
 8002ede:	2240      	movs	r2, #64	; 0x40
 8002ee0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ee2:	187b      	adds	r3, r7, r1
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ee8:	187b      	adds	r3, r7, r1
 8002eea:	2202      	movs	r2, #2
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002eee:	187b      	adds	r3, r7, r1
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002ef4:	187b      	adds	r3, r7, r1
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	0292      	lsls	r2, r2, #10
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f02:	187b      	adds	r3, r7, r1
 8002f04:	2280      	movs	r2, #128	; 0x80
 8002f06:	0492      	lsls	r2, r2, #18
 8002f08:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f0a:	187b      	adds	r3, r7, r1
 8002f0c:	2280      	movs	r2, #128	; 0x80
 8002f0e:	0592      	lsls	r2, r2, #22
 8002f10:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f12:	187b      	adds	r3, r7, r1
 8002f14:	0018      	movs	r0, r3
 8002f16:	f001 fa3f 	bl	8004398 <HAL_RCC_OscConfig>
 8002f1a:	1e03      	subs	r3, r0, #0
 8002f1c:	d001      	beq.n	8002f22 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002f1e:	f000 fa0d 	bl	800333c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	2207      	movs	r2, #7
 8002f26:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	2200      	movs	r2, #0
 8002f38:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f001 fd90 	bl	8004a64 <HAL_RCC_ClockConfig>
 8002f44:	1e03      	subs	r3, r0, #0
 8002f46:	d001      	beq.n	8002f4c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002f48:	f000 f9f8 	bl	800333c <Error_Handler>
  }
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b015      	add	sp, #84	; 0x54
 8002f52:	bd90      	pop	{r4, r7, pc}

08002f54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f5a:	2310      	movs	r3, #16
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	0018      	movs	r0, r3
 8002f60:	2310      	movs	r3, #16
 8002f62:	001a      	movs	r2, r3
 8002f64:	2100      	movs	r1, #0
 8002f66:	f004 fa6f 	bl	8007448 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	230c      	movs	r3, #12
 8002f70:	001a      	movs	r2, r3
 8002f72:	2100      	movs	r1, #0
 8002f74:	f004 fa68 	bl	8007448 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f78:	4b21      	ldr	r3, [pc, #132]	; (8003000 <MX_TIM1_Init+0xac>)
 8002f7a:	4a22      	ldr	r2, [pc, #136]	; (8003004 <MX_TIM1_Init+0xb0>)
 8002f7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002f7e:	4b20      	ldr	r3, [pc, #128]	; (8003000 <MX_TIM1_Init+0xac>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f84:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <MX_TIM1_Init+0xac>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002f8a:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <MX_TIM1_Init+0xac>)
 8002f8c:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <MX_TIM1_Init+0xb4>)
 8002f8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f90:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <MX_TIM1_Init+0xac>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f96:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <MX_TIM1_Init+0xac>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f9c:	4b18      	ldr	r3, [pc, #96]	; (8003000 <MX_TIM1_Init+0xac>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002fa2:	4b17      	ldr	r3, [pc, #92]	; (8003000 <MX_TIM1_Init+0xac>)
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f002 f943 	bl	8005230 <HAL_TIM_Base_Init>
 8002faa:	1e03      	subs	r3, r0, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8002fae:	f000 f9c5 	bl	800333c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fb2:	2110      	movs	r1, #16
 8002fb4:	187b      	adds	r3, r7, r1
 8002fb6:	2280      	movs	r2, #128	; 0x80
 8002fb8:	0152      	lsls	r2, r2, #5
 8002fba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fbc:	187a      	adds	r2, r7, r1
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <MX_TIM1_Init+0xac>)
 8002fc0:	0011      	movs	r1, r2
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f002 fae2 	bl	800558c <HAL_TIM_ConfigClockSource>
 8002fc8:	1e03      	subs	r3, r0, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002fcc:	f000 f9b6 	bl	800333c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd0:	1d3b      	adds	r3, r7, #4
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002fd6:	1d3b      	adds	r3, r7, #4
 8002fd8:	2200      	movs	r2, #0
 8002fda:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fe2:	1d3a      	adds	r2, r7, #4
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <MX_TIM1_Init+0xac>)
 8002fe6:	0011      	movs	r1, r2
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f002 ff85 	bl	8005ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8002fee:	1e03      	subs	r3, r0, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002ff2:	f000 f9a3 	bl	800333c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b008      	add	sp, #32
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	2000008c 	.word	0x2000008c
 8003004:	40012c00 	.word	0x40012c00
 8003008:	0000ffff 	.word	0x0000ffff

0800300c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08e      	sub	sp, #56	; 0x38
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003012:	2328      	movs	r3, #40	; 0x28
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	0018      	movs	r0, r3
 8003018:	2310      	movs	r3, #16
 800301a:	001a      	movs	r2, r3
 800301c:	2100      	movs	r1, #0
 800301e:	f004 fa13 	bl	8007448 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003022:	231c      	movs	r3, #28
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	0018      	movs	r0, r3
 8003028:	230c      	movs	r3, #12
 800302a:	001a      	movs	r2, r3
 800302c:	2100      	movs	r1, #0
 800302e:	f004 fa0b 	bl	8007448 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003032:	003b      	movs	r3, r7
 8003034:	0018      	movs	r0, r3
 8003036:	231c      	movs	r3, #28
 8003038:	001a      	movs	r2, r3
 800303a:	2100      	movs	r1, #0
 800303c:	f004 fa04 	bl	8007448 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003040:	4b3f      	ldr	r3, [pc, #252]	; (8003140 <MX_TIM2_Init+0x134>)
 8003042:	2280      	movs	r2, #128	; 0x80
 8003044:	05d2      	lsls	r2, r2, #23
 8003046:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8003048:	4b3d      	ldr	r3, [pc, #244]	; (8003140 <MX_TIM2_Init+0x134>)
 800304a:	227f      	movs	r2, #127	; 0x7f
 800304c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800304e:	4b3c      	ldr	r3, [pc, #240]	; (8003140 <MX_TIM2_Init+0x134>)
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8003054:	4b3a      	ldr	r3, [pc, #232]	; (8003140 <MX_TIM2_Init+0x134>)
 8003056:	4a3b      	ldr	r2, [pc, #236]	; (8003144 <MX_TIM2_Init+0x138>)
 8003058:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800305a:	4b39      	ldr	r3, [pc, #228]	; (8003140 <MX_TIM2_Init+0x134>)
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003060:	4b37      	ldr	r3, [pc, #220]	; (8003140 <MX_TIM2_Init+0x134>)
 8003062:	2200      	movs	r2, #0
 8003064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003066:	4b36      	ldr	r3, [pc, #216]	; (8003140 <MX_TIM2_Init+0x134>)
 8003068:	0018      	movs	r0, r3
 800306a:	f002 f8e1 	bl	8005230 <HAL_TIM_Base_Init>
 800306e:	1e03      	subs	r3, r0, #0
 8003070:	d001      	beq.n	8003076 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003072:	f000 f963 	bl	800333c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003076:	2128      	movs	r1, #40	; 0x28
 8003078:	187b      	adds	r3, r7, r1
 800307a:	2280      	movs	r2, #128	; 0x80
 800307c:	0152      	lsls	r2, r2, #5
 800307e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003080:	187a      	adds	r2, r7, r1
 8003082:	4b2f      	ldr	r3, [pc, #188]	; (8003140 <MX_TIM2_Init+0x134>)
 8003084:	0011      	movs	r1, r2
 8003086:	0018      	movs	r0, r3
 8003088:	f002 fa80 	bl	800558c <HAL_TIM_ConfigClockSource>
 800308c:	1e03      	subs	r3, r0, #0
 800308e:	d001      	beq.n	8003094 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8003090:	f000 f954 	bl	800333c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003094:	4b2a      	ldr	r3, [pc, #168]	; (8003140 <MX_TIM2_Init+0x134>)
 8003096:	0018      	movs	r0, r3
 8003098:	f002 f922 	bl	80052e0 <HAL_TIM_PWM_Init>
 800309c:	1e03      	subs	r3, r0, #0
 800309e:	d001      	beq.n	80030a4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80030a0:	f000 f94c 	bl	800333c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030a4:	211c      	movs	r1, #28
 80030a6:	187b      	adds	r3, r7, r1
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ac:	187b      	adds	r3, r7, r1
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030b2:	187a      	adds	r2, r7, r1
 80030b4:	4b22      	ldr	r3, [pc, #136]	; (8003140 <MX_TIM2_Init+0x134>)
 80030b6:	0011      	movs	r1, r2
 80030b8:	0018      	movs	r0, r3
 80030ba:	f002 ff1d 	bl	8005ef8 <HAL_TIMEx_MasterConfigSynchronization>
 80030be:	1e03      	subs	r3, r0, #0
 80030c0:	d001      	beq.n	80030c6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80030c2:	f000 f93b 	bl	800333c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030c6:	003b      	movs	r3, r7
 80030c8:	2260      	movs	r2, #96	; 0x60
 80030ca:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80030cc:	003b      	movs	r3, r7
 80030ce:	2200      	movs	r2, #0
 80030d0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030d2:	003b      	movs	r3, r7
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030d8:	003b      	movs	r3, r7
 80030da:	2200      	movs	r2, #0
 80030dc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030de:	0039      	movs	r1, r7
 80030e0:	4b17      	ldr	r3, [pc, #92]	; (8003140 <MX_TIM2_Init+0x134>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	0018      	movs	r0, r3
 80030e6:	f002 f95b 	bl	80053a0 <HAL_TIM_PWM_ConfigChannel>
 80030ea:	1e03      	subs	r3, r0, #0
 80030ec:	d001      	beq.n	80030f2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80030ee:	f000 f925 	bl	800333c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030f2:	0039      	movs	r1, r7
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <MX_TIM2_Init+0x134>)
 80030f6:	2204      	movs	r2, #4
 80030f8:	0018      	movs	r0, r3
 80030fa:	f002 f951 	bl	80053a0 <HAL_TIM_PWM_ConfigChannel>
 80030fe:	1e03      	subs	r3, r0, #0
 8003100:	d001      	beq.n	8003106 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8003102:	f000 f91b 	bl	800333c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003106:	0039      	movs	r1, r7
 8003108:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <MX_TIM2_Init+0x134>)
 800310a:	2208      	movs	r2, #8
 800310c:	0018      	movs	r0, r3
 800310e:	f002 f947 	bl	80053a0 <HAL_TIM_PWM_ConfigChannel>
 8003112:	1e03      	subs	r3, r0, #0
 8003114:	d001      	beq.n	800311a <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 8003116:	f000 f911 	bl	800333c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800311a:	0039      	movs	r1, r7
 800311c:	4b08      	ldr	r3, [pc, #32]	; (8003140 <MX_TIM2_Init+0x134>)
 800311e:	220c      	movs	r2, #12
 8003120:	0018      	movs	r0, r3
 8003122:	f002 f93d 	bl	80053a0 <HAL_TIM_PWM_ConfigChannel>
 8003126:	1e03      	subs	r3, r0, #0
 8003128:	d001      	beq.n	800312e <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 800312a:	f000 f907 	bl	800333c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800312e:	4b04      	ldr	r3, [pc, #16]	; (8003140 <MX_TIM2_Init+0x134>)
 8003130:	0018      	movs	r0, r3
 8003132:	f000 f97b 	bl	800342c <HAL_TIM_MspPostInit>

}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	46bd      	mov	sp, r7
 800313a:	b00e      	add	sp, #56	; 0x38
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	200000d8 	.word	0x200000d8
 8003144:	0000270f 	.word	0x0000270f

08003148 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800314c:	4b23      	ldr	r3, [pc, #140]	; (80031dc <MX_USART1_UART_Init+0x94>)
 800314e:	4a24      	ldr	r2, [pc, #144]	; (80031e0 <MX_USART1_UART_Init+0x98>)
 8003150:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8003152:	4b22      	ldr	r3, [pc, #136]	; (80031dc <MX_USART1_UART_Init+0x94>)
 8003154:	22e1      	movs	r2, #225	; 0xe1
 8003156:	0312      	lsls	r2, r2, #12
 8003158:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <MX_USART1_UART_Init+0x94>)
 800315c:	2200      	movs	r2, #0
 800315e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003160:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <MX_USART1_UART_Init+0x94>)
 8003162:	2200      	movs	r2, #0
 8003164:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003166:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <MX_USART1_UART_Init+0x94>)
 8003168:	2200      	movs	r2, #0
 800316a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <MX_USART1_UART_Init+0x94>)
 800316e:	220c      	movs	r2, #12
 8003170:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <MX_USART1_UART_Init+0x94>)
 8003174:	2200      	movs	r2, #0
 8003176:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003178:	4b18      	ldr	r3, [pc, #96]	; (80031dc <MX_USART1_UART_Init+0x94>)
 800317a:	2200      	movs	r2, #0
 800317c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800317e:	4b17      	ldr	r3, [pc, #92]	; (80031dc <MX_USART1_UART_Init+0x94>)
 8003180:	2200      	movs	r2, #0
 8003182:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003184:	4b15      	ldr	r3, [pc, #84]	; (80031dc <MX_USART1_UART_Init+0x94>)
 8003186:	2200      	movs	r2, #0
 8003188:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <MX_USART1_UART_Init+0x94>)
 800318c:	2200      	movs	r2, #0
 800318e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003190:	4b12      	ldr	r3, [pc, #72]	; (80031dc <MX_USART1_UART_Init+0x94>)
 8003192:	0018      	movs	r0, r3
 8003194:	f002 ff26 	bl	8005fe4 <HAL_UART_Init>
 8003198:	1e03      	subs	r3, r0, #0
 800319a:	d001      	beq.n	80031a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800319c:	f000 f8ce 	bl	800333c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031a0:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <MX_USART1_UART_Init+0x94>)
 80031a2:	2100      	movs	r1, #0
 80031a4:	0018      	movs	r0, r3
 80031a6:	f004 f84b 	bl	8007240 <HAL_UARTEx_SetTxFifoThreshold>
 80031aa:	1e03      	subs	r3, r0, #0
 80031ac:	d001      	beq.n	80031b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80031ae:	f000 f8c5 	bl	800333c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <MX_USART1_UART_Init+0x94>)
 80031b4:	2100      	movs	r1, #0
 80031b6:	0018      	movs	r0, r3
 80031b8:	f004 f882 	bl	80072c0 <HAL_UARTEx_SetRxFifoThreshold>
 80031bc:	1e03      	subs	r3, r0, #0
 80031be:	d001      	beq.n	80031c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80031c0:	f000 f8bc 	bl	800333c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <MX_USART1_UART_Init+0x94>)
 80031c6:	0018      	movs	r0, r3
 80031c8:	f004 f800 	bl	80071cc <HAL_UARTEx_DisableFifoMode>
 80031cc:	1e03      	subs	r3, r0, #0
 80031ce:	d001      	beq.n	80031d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80031d0:	f000 f8b4 	bl	800333c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	20000124 	.word	0x20000124
 80031e0:	40013800 	.word	0x40013800

080031e4 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80031e8:	4b16      	ldr	r3, [pc, #88]	; (8003244 <MX_USART5_UART_Init+0x60>)
 80031ea:	4a17      	ldr	r2, [pc, #92]	; (8003248 <MX_USART5_UART_Init+0x64>)
 80031ec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <MX_USART5_UART_Init+0x60>)
 80031f0:	2296      	movs	r2, #150	; 0x96
 80031f2:	0192      	lsls	r2, r2, #6
 80031f4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <MX_USART5_UART_Init+0x60>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <MX_USART5_UART_Init+0x60>)
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <MX_USART5_UART_Init+0x60>)
 8003204:	2200      	movs	r2, #0
 8003206:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <MX_USART5_UART_Init+0x60>)
 800320a:	220c      	movs	r2, #12
 800320c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <MX_USART5_UART_Init+0x60>)
 8003210:	2200      	movs	r2, #0
 8003212:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <MX_USART5_UART_Init+0x60>)
 8003216:	2200      	movs	r2, #0
 8003218:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <MX_USART5_UART_Init+0x60>)
 800321c:	2200      	movs	r2, #0
 800321e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003220:	4b08      	ldr	r3, [pc, #32]	; (8003244 <MX_USART5_UART_Init+0x60>)
 8003222:	2200      	movs	r2, #0
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <MX_USART5_UART_Init+0x60>)
 8003228:	2200      	movs	r2, #0
 800322a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <MX_USART5_UART_Init+0x60>)
 800322e:	0018      	movs	r0, r3
 8003230:	f002 fed8 	bl	8005fe4 <HAL_UART_Init>
 8003234:	1e03      	subs	r3, r0, #0
 8003236:	d001      	beq.n	800323c <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8003238:	f000 f880 	bl	800333c <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	200001b4 	.word	0x200001b4
 8003248:	40005000 	.word	0x40005000

0800324c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <MX_DMA_Init+0x48>)
 8003254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003256:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <MX_DMA_Init+0x48>)
 8003258:	2101      	movs	r1, #1
 800325a:	430a      	orrs	r2, r1
 800325c:	639a      	str	r2, [r3, #56]	; 0x38
 800325e:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <MX_DMA_Init+0x48>)
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	2201      	movs	r2, #1
 8003264:	4013      	ands	r3, r2
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800326a:	2200      	movs	r2, #0
 800326c:	2100      	movs	r1, #0
 800326e:	2009      	movs	r0, #9
 8003270:	f000 fbea 	bl	8003a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003274:	2009      	movs	r0, #9
 8003276:	f000 fbfc 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800327a:	2200      	movs	r2, #0
 800327c:	2100      	movs	r1, #0
 800327e:	200a      	movs	r0, #10
 8003280:	f000 fbe2 	bl	8003a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003284:	200a      	movs	r0, #10
 8003286:	f000 fbf4 	bl	8003a72 <HAL_NVIC_EnableIRQ>

}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	46bd      	mov	sp, r7
 800328e:	b002      	add	sp, #8
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	40021000 	.word	0x40021000

08003298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329e:	240c      	movs	r4, #12
 80032a0:	193b      	adds	r3, r7, r4
 80032a2:	0018      	movs	r0, r3
 80032a4:	2314      	movs	r3, #20
 80032a6:	001a      	movs	r2, r3
 80032a8:	2100      	movs	r1, #0
 80032aa:	f004 f8cd 	bl	8007448 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <MX_GPIO_Init+0x9c>)
 80032b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <MX_GPIO_Init+0x9c>)
 80032b4:	2104      	movs	r1, #4
 80032b6:	430a      	orrs	r2, r1
 80032b8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ba:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <MX_GPIO_Init+0x9c>)
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	2204      	movs	r2, #4
 80032c0:	4013      	ands	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <MX_GPIO_Init+0x9c>)
 80032c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <MX_GPIO_Init+0x9c>)
 80032cc:	2101      	movs	r1, #1
 80032ce:	430a      	orrs	r2, r1
 80032d0:	635a      	str	r2, [r3, #52]	; 0x34
 80032d2:	4b18      	ldr	r3, [pc, #96]	; (8003334 <MX_GPIO_Init+0x9c>)
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	2201      	movs	r2, #1
 80032d8:	4013      	ands	r3, r2
 80032da:	607b      	str	r3, [r7, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <MX_GPIO_Init+0x9c>)
 80032e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e2:	4b14      	ldr	r3, [pc, #80]	; (8003334 <MX_GPIO_Init+0x9c>)
 80032e4:	2102      	movs	r1, #2
 80032e6:	430a      	orrs	r2, r1
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <MX_GPIO_Init+0x9c>)
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	2202      	movs	r2, #2
 80032f0:	4013      	ands	r3, r2
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	019b      	lsls	r3, r3, #6
 80032fa:	480f      	ldr	r0, [pc, #60]	; (8003338 <MX_GPIO_Init+0xa0>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	0019      	movs	r1, r3
 8003300:	f000 ffe0 	bl	80042c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003304:	193b      	adds	r3, r7, r4
 8003306:	2280      	movs	r2, #128	; 0x80
 8003308:	0192      	lsls	r2, r2, #6
 800330a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800330c:	193b      	adds	r3, r7, r4
 800330e:	2201      	movs	r2, #1
 8003310:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	193b      	adds	r3, r7, r4
 8003314:	2200      	movs	r2, #0
 8003316:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	193b      	adds	r3, r7, r4
 800331a:	2200      	movs	r2, #0
 800331c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800331e:	193b      	adds	r3, r7, r4
 8003320:	4a05      	ldr	r2, [pc, #20]	; (8003338 <MX_GPIO_Init+0xa0>)
 8003322:	0019      	movs	r1, r3
 8003324:	0010      	movs	r0, r2
 8003326:	f000 fe61 	bl	8003fec <HAL_GPIO_Init>

}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	46bd      	mov	sp, r7
 800332e:	b009      	add	sp, #36	; 0x24
 8003330:	bd90      	pop	{r4, r7, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	40021000 	.word	0x40021000
 8003338:	50000800 	.word	0x50000800

0800333c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003340:	b672      	cpsid	i
}
 8003342:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003344:	e7fe      	b.n	8003344 <Error_Handler+0x8>
	...

08003348 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_MspInit+0x4c>)
 8003350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <HAL_MspInit+0x4c>)
 8003354:	2101      	movs	r1, #1
 8003356:	430a      	orrs	r2, r1
 8003358:	641a      	str	r2, [r3, #64]	; 0x40
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <HAL_MspInit+0x4c>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2201      	movs	r2, #1
 8003360:	4013      	ands	r3, r2
 8003362:	607b      	str	r3, [r7, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_MspInit+0x4c>)
 8003368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <HAL_MspInit+0x4c>)
 800336c:	2180      	movs	r1, #128	; 0x80
 800336e:	0549      	lsls	r1, r1, #21
 8003370:	430a      	orrs	r2, r1
 8003372:	63da      	str	r2, [r3, #60]	; 0x3c
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <HAL_MspInit+0x4c>)
 8003376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	055b      	lsls	r3, r3, #21
 800337c:	4013      	ands	r3, r2
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003382:	23c0      	movs	r3, #192	; 0xc0
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	0018      	movs	r0, r3
 8003388:	f000 fa9c 	bl	80038c4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000

08003398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b099      	sub	sp, #100	; 0x64
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033a0:	2414      	movs	r4, #20
 80033a2:	193b      	adds	r3, r7, r4
 80033a4:	0018      	movs	r0, r3
 80033a6:	234c      	movs	r3, #76	; 0x4c
 80033a8:	001a      	movs	r2, r3
 80033aa:	2100      	movs	r1, #0
 80033ac:	f004 f84c 	bl	8007448 <memset>
  if(htim_base->Instance==TIM1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1b      	ldr	r2, [pc, #108]	; (8003424 <HAL_TIM_Base_MspInit+0x8c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d11d      	bne.n	80033f6 <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80033ba:	193b      	adds	r3, r7, r4
 80033bc:	2280      	movs	r2, #128	; 0x80
 80033be:	0392      	lsls	r2, r2, #14
 80033c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80033c2:	193b      	adds	r3, r7, r4
 80033c4:	2200      	movs	r2, #0
 80033c6:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033c8:	193b      	adds	r3, r7, r4
 80033ca:	0018      	movs	r0, r3
 80033cc:	f001 fcf4 	bl	8004db8 <HAL_RCCEx_PeriphCLKConfig>
 80033d0:	1e03      	subs	r3, r0, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80033d4:	f7ff ffb2 	bl	800333c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <HAL_TIM_Base_MspInit+0x90>)
 80033da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_TIM_Base_MspInit+0x90>)
 80033de:	2180      	movs	r1, #128	; 0x80
 80033e0:	0109      	lsls	r1, r1, #4
 80033e2:	430a      	orrs	r2, r1
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
 80033e6:	4b10      	ldr	r3, [pc, #64]	; (8003428 <HAL_TIM_Base_MspInit+0x90>)
 80033e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ea:	2380      	movs	r3, #128	; 0x80
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033f4:	e011      	b.n	800341a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	05db      	lsls	r3, r3, #23
 80033fe:	429a      	cmp	r2, r3
 8003400:	d10b      	bne.n	800341a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_TIM_Base_MspInit+0x90>)
 8003404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <HAL_TIM_Base_MspInit+0x90>)
 8003408:	2101      	movs	r1, #1
 800340a:	430a      	orrs	r2, r1
 800340c:	63da      	str	r2, [r3, #60]	; 0x3c
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_TIM_Base_MspInit+0x90>)
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	2201      	movs	r2, #1
 8003414:	4013      	ands	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b019      	add	sp, #100	; 0x64
 8003420:	bd90      	pop	{r4, r7, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	40012c00 	.word	0x40012c00
 8003428:	40021000 	.word	0x40021000

0800342c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b089      	sub	sp, #36	; 0x24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003434:	240c      	movs	r4, #12
 8003436:	193b      	adds	r3, r7, r4
 8003438:	0018      	movs	r0, r3
 800343a:	2314      	movs	r3, #20
 800343c:	001a      	movs	r2, r3
 800343e:	2100      	movs	r1, #0
 8003440:	f004 f802 	bl	8007448 <memset>
  if(htim->Instance==TIM2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	05db      	lsls	r3, r3, #23
 800344c:	429a      	cmp	r2, r3
 800344e:	d122      	bne.n	8003496 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003450:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <HAL_TIM_MspPostInit+0x74>)
 8003452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <HAL_TIM_MspPostInit+0x74>)
 8003456:	2101      	movs	r1, #1
 8003458:	430a      	orrs	r2, r1
 800345a:	635a      	str	r2, [r3, #52]	; 0x34
 800345c:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_TIM_MspPostInit+0x74>)
 800345e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003460:	2201      	movs	r2, #1
 8003462:	4013      	ands	r3, r2
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003468:	0021      	movs	r1, r4
 800346a:	187b      	adds	r3, r7, r1
 800346c:	220f      	movs	r2, #15
 800346e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003470:	187b      	adds	r3, r7, r1
 8003472:	2202      	movs	r2, #2
 8003474:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	187b      	adds	r3, r7, r1
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347c:	187b      	adds	r3, r7, r1
 800347e:	2200      	movs	r2, #0
 8003480:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003482:	187b      	adds	r3, r7, r1
 8003484:	2202      	movs	r2, #2
 8003486:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003488:	187a      	adds	r2, r7, r1
 800348a:	23a0      	movs	r3, #160	; 0xa0
 800348c:	05db      	lsls	r3, r3, #23
 800348e:	0011      	movs	r1, r2
 8003490:	0018      	movs	r0, r3
 8003492:	f000 fdab 	bl	8003fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	b009      	add	sp, #36	; 0x24
 800349c:	bd90      	pop	{r4, r7, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	40021000 	.word	0x40021000

080034a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b09f      	sub	sp, #124	; 0x7c
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	2364      	movs	r3, #100	; 0x64
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	0018      	movs	r0, r3
 80034b2:	2314      	movs	r3, #20
 80034b4:	001a      	movs	r2, r3
 80034b6:	2100      	movs	r1, #0
 80034b8:	f003 ffc6 	bl	8007448 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034bc:	2418      	movs	r4, #24
 80034be:	193b      	adds	r3, r7, r4
 80034c0:	0018      	movs	r0, r3
 80034c2:	234c      	movs	r3, #76	; 0x4c
 80034c4:	001a      	movs	r2, r3
 80034c6:	2100      	movs	r1, #0
 80034c8:	f003 ffbe 	bl	8007448 <memset>
  if(huart->Instance==USART1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a67      	ldr	r2, [pc, #412]	; (8003670 <HAL_UART_MspInit+0x1cc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d169      	bne.n	80035aa <HAL_UART_MspInit+0x106>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034d6:	193b      	adds	r3, r7, r4
 80034d8:	2201      	movs	r2, #1
 80034da:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80034dc:	193b      	adds	r3, r7, r4
 80034de:	2200      	movs	r2, #0
 80034e0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034e2:	193b      	adds	r3, r7, r4
 80034e4:	0018      	movs	r0, r3
 80034e6:	f001 fc67 	bl	8004db8 <HAL_RCCEx_PeriphCLKConfig>
 80034ea:	1e03      	subs	r3, r0, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80034ee:	f7ff ff25 	bl	800333c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034f2:	4b60      	ldr	r3, [pc, #384]	; (8003674 <HAL_UART_MspInit+0x1d0>)
 80034f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034f6:	4b5f      	ldr	r3, [pc, #380]	; (8003674 <HAL_UART_MspInit+0x1d0>)
 80034f8:	2180      	movs	r1, #128	; 0x80
 80034fa:	01c9      	lsls	r1, r1, #7
 80034fc:	430a      	orrs	r2, r1
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
 8003500:	4b5c      	ldr	r3, [pc, #368]	; (8003674 <HAL_UART_MspInit+0x1d0>)
 8003502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003504:	2380      	movs	r3, #128	; 0x80
 8003506:	01db      	lsls	r3, r3, #7
 8003508:	4013      	ands	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350e:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_UART_MspInit+0x1d0>)
 8003510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003512:	4b58      	ldr	r3, [pc, #352]	; (8003674 <HAL_UART_MspInit+0x1d0>)
 8003514:	2101      	movs	r1, #1
 8003516:	430a      	orrs	r2, r1
 8003518:	635a      	str	r2, [r3, #52]	; 0x34
 800351a:	4b56      	ldr	r3, [pc, #344]	; (8003674 <HAL_UART_MspInit+0x1d0>)
 800351c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351e:	2201      	movs	r2, #1
 8003520:	4013      	ands	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003526:	2164      	movs	r1, #100	; 0x64
 8003528:	187b      	adds	r3, r7, r1
 800352a:	22c0      	movs	r2, #192	; 0xc0
 800352c:	00d2      	lsls	r2, r2, #3
 800352e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	187b      	adds	r3, r7, r1
 8003532:	2202      	movs	r2, #2
 8003534:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	187b      	adds	r3, r7, r1
 8003538:	2200      	movs	r2, #0
 800353a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353c:	187b      	adds	r3, r7, r1
 800353e:	2200      	movs	r2, #0
 8003540:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003542:	187b      	adds	r3, r7, r1
 8003544:	2201      	movs	r2, #1
 8003546:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003548:	187a      	adds	r2, r7, r1
 800354a:	23a0      	movs	r3, #160	; 0xa0
 800354c:	05db      	lsls	r3, r3, #23
 800354e:	0011      	movs	r1, r2
 8003550:	0018      	movs	r0, r3
 8003552:	f000 fd4b 	bl	8003fec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003556:	4b48      	ldr	r3, [pc, #288]	; (8003678 <HAL_UART_MspInit+0x1d4>)
 8003558:	4a48      	ldr	r2, [pc, #288]	; (800367c <HAL_UART_MspInit+0x1d8>)
 800355a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800355c:	4b46      	ldr	r3, [pc, #280]	; (8003678 <HAL_UART_MspInit+0x1d4>)
 800355e:	2232      	movs	r2, #50	; 0x32
 8003560:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003562:	4b45      	ldr	r3, [pc, #276]	; (8003678 <HAL_UART_MspInit+0x1d4>)
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003568:	4b43      	ldr	r3, [pc, #268]	; (8003678 <HAL_UART_MspInit+0x1d4>)
 800356a:	2200      	movs	r2, #0
 800356c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800356e:	4b42      	ldr	r3, [pc, #264]	; (8003678 <HAL_UART_MspInit+0x1d4>)
 8003570:	2280      	movs	r2, #128	; 0x80
 8003572:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003574:	4b40      	ldr	r3, [pc, #256]	; (8003678 <HAL_UART_MspInit+0x1d4>)
 8003576:	2200      	movs	r2, #0
 8003578:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800357a:	4b3f      	ldr	r3, [pc, #252]	; (8003678 <HAL_UART_MspInit+0x1d4>)
 800357c:	2200      	movs	r2, #0
 800357e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003580:	4b3d      	ldr	r3, [pc, #244]	; (8003678 <HAL_UART_MspInit+0x1d4>)
 8003582:	2220      	movs	r2, #32
 8003584:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003586:	4b3c      	ldr	r3, [pc, #240]	; (8003678 <HAL_UART_MspInit+0x1d4>)
 8003588:	2200      	movs	r2, #0
 800358a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800358c:	4b3a      	ldr	r3, [pc, #232]	; (8003678 <HAL_UART_MspInit+0x1d4>)
 800358e:	0018      	movs	r0, r3
 8003590:	f000 fa8c 	bl	8003aac <HAL_DMA_Init>
 8003594:	1e03      	subs	r3, r0, #0
 8003596:	d001      	beq.n	800359c <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8003598:	f7ff fed0 	bl	800333c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a36      	ldr	r2, [pc, #216]	; (8003678 <HAL_UART_MspInit+0x1d4>)
 80035a0:	67da      	str	r2, [r3, #124]	; 0x7c
 80035a2:	4b35      	ldr	r3, [pc, #212]	; (8003678 <HAL_UART_MspInit+0x1d4>)
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 80035a8:	e05d      	b.n	8003666 <HAL_UART_MspInit+0x1c2>
  else if(huart->Instance==USART5)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a34      	ldr	r2, [pc, #208]	; (8003680 <HAL_UART_MspInit+0x1dc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d158      	bne.n	8003666 <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART5_CLK_ENABLE();
 80035b4:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <HAL_UART_MspInit+0x1d0>)
 80035b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035b8:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <HAL_UART_MspInit+0x1d0>)
 80035ba:	2180      	movs	r1, #128	; 0x80
 80035bc:	0049      	lsls	r1, r1, #1
 80035be:	430a      	orrs	r2, r1
 80035c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80035c2:	4b2c      	ldr	r3, [pc, #176]	; (8003674 <HAL_UART_MspInit+0x1d0>)
 80035c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4013      	ands	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d0:	4b28      	ldr	r3, [pc, #160]	; (8003674 <HAL_UART_MspInit+0x1d0>)
 80035d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d4:	4b27      	ldr	r3, [pc, #156]	; (8003674 <HAL_UART_MspInit+0x1d0>)
 80035d6:	2102      	movs	r1, #2
 80035d8:	430a      	orrs	r2, r1
 80035da:	635a      	str	r2, [r3, #52]	; 0x34
 80035dc:	4b25      	ldr	r3, [pc, #148]	; (8003674 <HAL_UART_MspInit+0x1d0>)
 80035de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e0:	2202      	movs	r2, #2
 80035e2:	4013      	ands	r3, r2
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035e8:	2164      	movs	r1, #100	; 0x64
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	2203      	movs	r2, #3
 80035ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f0:	187b      	adds	r3, r7, r1
 80035f2:	2202      	movs	r2, #2
 80035f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	187b      	adds	r3, r7, r1
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	2200      	movs	r2, #0
 8003600:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART5;
 8003602:	187b      	adds	r3, r7, r1
 8003604:	2208      	movs	r2, #8
 8003606:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003608:	187b      	adds	r3, r7, r1
 800360a:	4a1e      	ldr	r2, [pc, #120]	; (8003684 <HAL_UART_MspInit+0x1e0>)
 800360c:	0019      	movs	r1, r3
 800360e:	0010      	movs	r0, r2
 8003610:	f000 fcec 	bl	8003fec <HAL_GPIO_Init>
    hdma_usart5_rx.Instance = DMA1_Channel2;
 8003614:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <HAL_UART_MspInit+0x1e4>)
 8003616:	4a1d      	ldr	r2, [pc, #116]	; (800368c <HAL_UART_MspInit+0x1e8>)
 8003618:	601a      	str	r2, [r3, #0]
    hdma_usart5_rx.Init.Request = DMA_REQUEST_USART5_RX;
 800361a:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_UART_MspInit+0x1e4>)
 800361c:	224a      	movs	r2, #74	; 0x4a
 800361e:	605a      	str	r2, [r3, #4]
    hdma_usart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_UART_MspInit+0x1e4>)
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
    hdma_usart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003626:	4b18      	ldr	r3, [pc, #96]	; (8003688 <HAL_UART_MspInit+0x1e4>)
 8003628:	2200      	movs	r2, #0
 800362a:	60da      	str	r2, [r3, #12]
    hdma_usart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800362c:	4b16      	ldr	r3, [pc, #88]	; (8003688 <HAL_UART_MspInit+0x1e4>)
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	611a      	str	r2, [r3, #16]
    hdma_usart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_UART_MspInit+0x1e4>)
 8003634:	2200      	movs	r2, #0
 8003636:	615a      	str	r2, [r3, #20]
    hdma_usart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003638:	4b13      	ldr	r3, [pc, #76]	; (8003688 <HAL_UART_MspInit+0x1e4>)
 800363a:	2200      	movs	r2, #0
 800363c:	619a      	str	r2, [r3, #24]
    hdma_usart5_rx.Init.Mode = DMA_NORMAL;
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_UART_MspInit+0x1e4>)
 8003640:	2200      	movs	r2, #0
 8003642:	61da      	str	r2, [r3, #28]
    hdma_usart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003644:	4b10      	ldr	r3, [pc, #64]	; (8003688 <HAL_UART_MspInit+0x1e4>)
 8003646:	2200      	movs	r2, #0
 8003648:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart5_rx) != HAL_OK)
 800364a:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <HAL_UART_MspInit+0x1e4>)
 800364c:	0018      	movs	r0, r3
 800364e:	f000 fa2d 	bl	8003aac <HAL_DMA_Init>
 8003652:	1e03      	subs	r3, r0, #0
 8003654:	d001      	beq.n	800365a <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 8003656:	f7ff fe71 	bl	800333c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart5_rx);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <HAL_UART_MspInit+0x1e4>)
 800365e:	67da      	str	r2, [r3, #124]	; 0x7c
 8003660:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_UART_MspInit+0x1e4>)
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	46bd      	mov	sp, r7
 800366a:	b01f      	add	sp, #124	; 0x7c
 800366c:	bd90      	pop	{r4, r7, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	40013800 	.word	0x40013800
 8003674:	40021000 	.word	0x40021000
 8003678:	20000244 	.word	0x20000244
 800367c:	40020008 	.word	0x40020008
 8003680:	40005000 	.word	0x40005000
 8003684:	50000400 	.word	0x50000400
 8003688:	200002a4 	.word	0x200002a4
 800368c:	4002001c 	.word	0x4002001c

08003690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003694:	e7fe      	b.n	8003694 <NMI_Handler+0x4>

08003696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800369a:	e7fe      	b.n	800369a <HardFault_Handler+0x4>

0800369c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036b4:	f000 f8ea 	bl	800388c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80036c4:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <DMA1_Channel1_IRQHandler+0x14>)
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 fb22 	bl	8003d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	20000244 	.word	0x20000244

080036d8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart5_rx);
 80036dc:	4b03      	ldr	r3, [pc, #12]	; (80036ec <DMA1_Channel2_3_IRQHandler+0x14>)
 80036de:	0018      	movs	r0, r3
 80036e0:	f000 fb16 	bl	8003d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	200002a4 	.word	0x200002a4

080036f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


    ldr   r0, =_estack
 80036fc:	480d      	ldr	r0, [pc, #52]	; (8003734 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003700:	f7ff fff6 	bl	80036f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003704:	480c      	ldr	r0, [pc, #48]	; (8003738 <LoopForever+0x6>)
  ldr r1, =_edata
 8003706:	490d      	ldr	r1, [pc, #52]	; (800373c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003708:	4a0d      	ldr	r2, [pc, #52]	; (8003740 <LoopForever+0xe>)
  movs r3, #0
 800370a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800370c:	e002      	b.n	8003714 <LoopCopyDataInit>

0800370e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800370e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003712:	3304      	adds	r3, #4

08003714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003718:	d3f9      	bcc.n	800370e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800371a:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <LoopForever+0x12>)
  ldr r4, =_ebss
 800371c:	4c0a      	ldr	r4, [pc, #40]	; (8003748 <LoopForever+0x16>)
  movs r3, #0
 800371e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003720:	e001      	b.n	8003726 <LoopFillZerobss>

08003722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003724:	3204      	adds	r2, #4

08003726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003728:	d3fb      	bcc.n	8003722 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800372a:	f003 fe69 	bl	8007400 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800372e:	f7ff f8eb 	bl	8002908 <main>

08003732 <LoopForever>:

LoopForever:
  b LoopForever
 8003732:	e7fe      	b.n	8003732 <LoopForever>
    ldr   r0, =_estack
 8003734:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800373c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003740:	0800765c 	.word	0x0800765c
  ldr r2, =_sbss
 8003744:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003748:	200012b8 	.word	0x200012b8

0800374c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800374c:	e7fe      	b.n	800374c <ADC1_COMP_IRQHandler>
	...

08003750 <drow>:
int dr2[number];
int tt2[number];
int i2 ;

void drow (int parameter,int t)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
	if(parameter!=p_parameter)
 800375a:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <drow+0x58>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d019      	beq.n	8003798 <drow+0x48>
	{
		dr[i]=parameter;
 8003764:	4b11      	ldr	r3, [pc, #68]	; (80037ac <drow+0x5c>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <drow+0x60>)
 800376a:	0092      	lsls	r2, r2, #2
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	50d1      	str	r1, [r2, r3]
		tt[i]=t;
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <drow+0x5c>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <drow+0x64>)
 8003776:	0092      	lsls	r2, r2, #2
 8003778:	6839      	ldr	r1, [r7, #0]
 800377a:	50d1      	str	r1, [r2, r3]
		i++;
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <drow+0x5c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <drow+0x5c>)
 8003784:	601a      	str	r2, [r3, #0]
		if(i==number)i=0;
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <drow+0x5c>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	23fa      	movs	r3, #250	; 0xfa
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	429a      	cmp	r2, r3
 8003790:	d102      	bne.n	8003798 <drow+0x48>
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <drow+0x5c>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

	}
	p_parameter=parameter;
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <drow+0x58>)
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	601a      	str	r2, [r3, #0]
}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b002      	add	sp, #8
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	20000304 	.word	0x20000304
 80037ac:	200012a8 	.word	0x200012a8
 80037b0:	20000308 	.word	0x20000308
 80037b4:	20000ad8 	.word	0x20000ad8

080037b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037be:	1dfb      	adds	r3, r7, #7
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_Init+0x3c>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <HAL_Init+0x3c>)
 80037ca:	2180      	movs	r1, #128	; 0x80
 80037cc:	0049      	lsls	r1, r1, #1
 80037ce:	430a      	orrs	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037d2:	2003      	movs	r0, #3
 80037d4:	f000 f810 	bl	80037f8 <HAL_InitTick>
 80037d8:	1e03      	subs	r3, r0, #0
 80037da:	d003      	beq.n	80037e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80037dc:	1dfb      	adds	r3, r7, #7
 80037de:	2201      	movs	r2, #1
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	e001      	b.n	80037e8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80037e4:	f7ff fdb0 	bl	8003348 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037e8:	1dfb      	adds	r3, r7, #7
 80037ea:	781b      	ldrb	r3, [r3, #0]
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40022000 	.word	0x40022000

080037f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003800:	230f      	movs	r3, #15
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_InitTick+0x88>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d02b      	beq.n	8003868 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003810:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <HAL_InitTick+0x8c>)
 8003812:	681c      	ldr	r4, [r3, #0]
 8003814:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <HAL_InitTick+0x88>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	0019      	movs	r1, r3
 800381a:	23fa      	movs	r3, #250	; 0xfa
 800381c:	0098      	lsls	r0, r3, #2
 800381e:	f7fc fc71 	bl	8000104 <__udivsi3>
 8003822:	0003      	movs	r3, r0
 8003824:	0019      	movs	r1, r3
 8003826:	0020      	movs	r0, r4
 8003828:	f7fc fc6c 	bl	8000104 <__udivsi3>
 800382c:	0003      	movs	r3, r0
 800382e:	0018      	movs	r0, r3
 8003830:	f000 f92f 	bl	8003a92 <HAL_SYSTICK_Config>
 8003834:	1e03      	subs	r3, r0, #0
 8003836:	d112      	bne.n	800385e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b03      	cmp	r3, #3
 800383c:	d80a      	bhi.n	8003854 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	2301      	movs	r3, #1
 8003842:	425b      	negs	r3, r3
 8003844:	2200      	movs	r2, #0
 8003846:	0018      	movs	r0, r3
 8003848:	f000 f8fe 	bl	8003a48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800384c:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <HAL_InitTick+0x90>)
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e00d      	b.n	8003870 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003854:	230f      	movs	r3, #15
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e008      	b.n	8003870 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800385e:	230f      	movs	r3, #15
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e003      	b.n	8003870 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003868:	230f      	movs	r3, #15
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003870:	230f      	movs	r3, #15
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	781b      	ldrb	r3, [r3, #0]
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b005      	add	sp, #20
 800387c:	bd90      	pop	{r4, r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	20000008 	.word	0x20000008
 8003884:	20000000 	.word	0x20000000
 8003888:	20000004 	.word	0x20000004

0800388c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_IncTick+0x1c>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	001a      	movs	r2, r3
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_IncTick+0x20>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	18d2      	adds	r2, r2, r3
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_IncTick+0x20>)
 800389e:	601a      	str	r2, [r3, #0]
}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	20000008 	.word	0x20000008
 80038ac:	200012ac 	.word	0x200012ac

080038b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  return uwTick;
 80038b4:	4b02      	ldr	r3, [pc, #8]	; (80038c0 <HAL_GetTick+0x10>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	200012ac 	.word	0x200012ac

080038c4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a06      	ldr	r2, [pc, #24]	; (80038ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	430a      	orrs	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]
}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b002      	add	sp, #8
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	40010000 	.word	0x40010000
 80038ec:	fffff9ff 	.word	0xfffff9ff

080038f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	0002      	movs	r2, r0
 80038f8:	1dfb      	adds	r3, r7, #7
 80038fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038fc:	1dfb      	adds	r3, r7, #7
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b7f      	cmp	r3, #127	; 0x7f
 8003902:	d809      	bhi.n	8003918 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003904:	1dfb      	adds	r3, r7, #7
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	001a      	movs	r2, r3
 800390a:	231f      	movs	r3, #31
 800390c:	401a      	ands	r2, r3
 800390e:	4b04      	ldr	r3, [pc, #16]	; (8003920 <__NVIC_EnableIRQ+0x30>)
 8003910:	2101      	movs	r1, #1
 8003912:	4091      	lsls	r1, r2
 8003914:	000a      	movs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b002      	add	sp, #8
 800391e:	bd80      	pop	{r7, pc}
 8003920:	e000e100 	.word	0xe000e100

08003924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003924:	b590      	push	{r4, r7, lr}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	0002      	movs	r2, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	1dfb      	adds	r3, r7, #7
 8003930:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003932:	1dfb      	adds	r3, r7, #7
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b7f      	cmp	r3, #127	; 0x7f
 8003938:	d828      	bhi.n	800398c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800393a:	4a2f      	ldr	r2, [pc, #188]	; (80039f8 <__NVIC_SetPriority+0xd4>)
 800393c:	1dfb      	adds	r3, r7, #7
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	b25b      	sxtb	r3, r3
 8003942:	089b      	lsrs	r3, r3, #2
 8003944:	33c0      	adds	r3, #192	; 0xc0
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	589b      	ldr	r3, [r3, r2]
 800394a:	1dfa      	adds	r2, r7, #7
 800394c:	7812      	ldrb	r2, [r2, #0]
 800394e:	0011      	movs	r1, r2
 8003950:	2203      	movs	r2, #3
 8003952:	400a      	ands	r2, r1
 8003954:	00d2      	lsls	r2, r2, #3
 8003956:	21ff      	movs	r1, #255	; 0xff
 8003958:	4091      	lsls	r1, r2
 800395a:	000a      	movs	r2, r1
 800395c:	43d2      	mvns	r2, r2
 800395e:	401a      	ands	r2, r3
 8003960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	019b      	lsls	r3, r3, #6
 8003966:	22ff      	movs	r2, #255	; 0xff
 8003968:	401a      	ands	r2, r3
 800396a:	1dfb      	adds	r3, r7, #7
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	0018      	movs	r0, r3
 8003970:	2303      	movs	r3, #3
 8003972:	4003      	ands	r3, r0
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003978:	481f      	ldr	r0, [pc, #124]	; (80039f8 <__NVIC_SetPriority+0xd4>)
 800397a:	1dfb      	adds	r3, r7, #7
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	b25b      	sxtb	r3, r3
 8003980:	089b      	lsrs	r3, r3, #2
 8003982:	430a      	orrs	r2, r1
 8003984:	33c0      	adds	r3, #192	; 0xc0
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800398a:	e031      	b.n	80039f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800398c:	4a1b      	ldr	r2, [pc, #108]	; (80039fc <__NVIC_SetPriority+0xd8>)
 800398e:	1dfb      	adds	r3, r7, #7
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	0019      	movs	r1, r3
 8003994:	230f      	movs	r3, #15
 8003996:	400b      	ands	r3, r1
 8003998:	3b08      	subs	r3, #8
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	3306      	adds	r3, #6
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	18d3      	adds	r3, r2, r3
 80039a2:	3304      	adds	r3, #4
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	1dfa      	adds	r2, r7, #7
 80039a8:	7812      	ldrb	r2, [r2, #0]
 80039aa:	0011      	movs	r1, r2
 80039ac:	2203      	movs	r2, #3
 80039ae:	400a      	ands	r2, r1
 80039b0:	00d2      	lsls	r2, r2, #3
 80039b2:	21ff      	movs	r1, #255	; 0xff
 80039b4:	4091      	lsls	r1, r2
 80039b6:	000a      	movs	r2, r1
 80039b8:	43d2      	mvns	r2, r2
 80039ba:	401a      	ands	r2, r3
 80039bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	019b      	lsls	r3, r3, #6
 80039c2:	22ff      	movs	r2, #255	; 0xff
 80039c4:	401a      	ands	r2, r3
 80039c6:	1dfb      	adds	r3, r7, #7
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	0018      	movs	r0, r3
 80039cc:	2303      	movs	r3, #3
 80039ce:	4003      	ands	r3, r0
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039d4:	4809      	ldr	r0, [pc, #36]	; (80039fc <__NVIC_SetPriority+0xd8>)
 80039d6:	1dfb      	adds	r3, r7, #7
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	001c      	movs	r4, r3
 80039dc:	230f      	movs	r3, #15
 80039de:	4023      	ands	r3, r4
 80039e0:	3b08      	subs	r3, #8
 80039e2:	089b      	lsrs	r3, r3, #2
 80039e4:	430a      	orrs	r2, r1
 80039e6:	3306      	adds	r3, #6
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	18c3      	adds	r3, r0, r3
 80039ec:	3304      	adds	r3, #4
 80039ee:	601a      	str	r2, [r3, #0]
}
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b003      	add	sp, #12
 80039f6:	bd90      	pop	{r4, r7, pc}
 80039f8:	e000e100 	.word	0xe000e100
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	1e5a      	subs	r2, r3, #1
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	045b      	lsls	r3, r3, #17
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d301      	bcc.n	8003a18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a14:	2301      	movs	r3, #1
 8003a16:	e010      	b.n	8003a3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a18:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <SysTick_Config+0x44>)
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	3a01      	subs	r2, #1
 8003a1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a20:	2301      	movs	r3, #1
 8003a22:	425b      	negs	r3, r3
 8003a24:	2103      	movs	r1, #3
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7ff ff7c 	bl	8003924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <SysTick_Config+0x44>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a32:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <SysTick_Config+0x44>)
 8003a34:	2207      	movs	r2, #7
 8003a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b002      	add	sp, #8
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	e000e010 	.word	0xe000e010

08003a48 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	210f      	movs	r1, #15
 8003a54:	187b      	adds	r3, r7, r1
 8003a56:	1c02      	adds	r2, r0, #0
 8003a58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	187b      	adds	r3, r7, r1
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	b25b      	sxtb	r3, r3
 8003a62:	0011      	movs	r1, r2
 8003a64:	0018      	movs	r0, r3
 8003a66:	f7ff ff5d 	bl	8003924 <__NVIC_SetPriority>
}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b004      	add	sp, #16
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	0002      	movs	r2, r0
 8003a7a:	1dfb      	adds	r3, r7, #7
 8003a7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a7e:	1dfb      	adds	r3, r7, #7
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	b25b      	sxtb	r3, r3
 8003a84:	0018      	movs	r0, r3
 8003a86:	f7ff ff33 	bl	80038f0 <__NVIC_EnableIRQ>
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b002      	add	sp, #8
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f7ff ffaf 	bl	8003a00 <SysTick_Config>
 8003aa2:	0003      	movs	r3, r0
}
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b002      	add	sp, #8
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e091      	b.n	8003be2 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	001a      	movs	r2, r3
 8003ac4:	4b49      	ldr	r3, [pc, #292]	; (8003bec <HAL_DMA_Init+0x140>)
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d810      	bhi.n	8003aec <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a48      	ldr	r2, [pc, #288]	; (8003bf0 <HAL_DMA_Init+0x144>)
 8003ad0:	4694      	mov	ip, r2
 8003ad2:	4463      	add	r3, ip
 8003ad4:	2114      	movs	r1, #20
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f7fc fb14 	bl	8000104 <__udivsi3>
 8003adc:	0003      	movs	r3, r0
 8003ade:	009a      	lsls	r2, r3, #2
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a43      	ldr	r2, [pc, #268]	; (8003bf4 <HAL_DMA_Init+0x148>)
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40
 8003aea:	e00f      	b.n	8003b0c <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a41      	ldr	r2, [pc, #260]	; (8003bf8 <HAL_DMA_Init+0x14c>)
 8003af2:	4694      	mov	ip, r2
 8003af4:	4463      	add	r3, ip
 8003af6:	2114      	movs	r1, #20
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7fc fb03 	bl	8000104 <__udivsi3>
 8003afe:	0003      	movs	r3, r0
 8003b00:	009a      	lsls	r2, r3, #2
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a3c      	ldr	r2, [pc, #240]	; (8003bfc <HAL_DMA_Init+0x150>)
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2225      	movs	r2, #37	; 0x25
 8003b10:	2102      	movs	r1, #2
 8003b12:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4938      	ldr	r1, [pc, #224]	; (8003c00 <HAL_DMA_Init+0x154>)
 8003b20:	400a      	ands	r2, r1
 8003b22:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6819      	ldr	r1, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f000 f9d7 	bl	8003f10 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	01db      	lsls	r3, r3, #7
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d102      	bne.n	8003b74 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7c:	217f      	movs	r1, #127	; 0x7f
 8003b7e:	400a      	ands	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b8a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d011      	beq.n	8003bb8 <HAL_DMA_Init+0x10c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d80d      	bhi.n	8003bb8 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f000 fa00 	bl	8003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	e008      	b.n	8003bca <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2225      	movs	r2, #37	; 0x25
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2224      	movs	r2, #36	; 0x24
 8003bdc:	2100      	movs	r1, #0
 8003bde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	0018      	movs	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b002      	add	sp, #8
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	40020407 	.word	0x40020407
 8003bf0:	bffdfff8 	.word	0xbffdfff8
 8003bf4:	40020000 	.word	0x40020000
 8003bf8:	bffdfbf8 	.word	0xbffdfbf8
 8003bfc:	40020400 	.word	0x40020400
 8003c00:	ffff800f 	.word	0xffff800f

08003c04 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c12:	2317      	movs	r3, #23
 8003c14:	18fb      	adds	r3, r7, r3
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2224      	movs	r2, #36	; 0x24
 8003c1e:	5c9b      	ldrb	r3, [r3, r2]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_DMA_Start_IT+0x24>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e06f      	b.n	8003d08 <HAL_DMA_Start_IT+0x104>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2224      	movs	r2, #36	; 0x24
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2225      	movs	r2, #37	; 0x25
 8003c34:	5c9b      	ldrb	r3, [r3, r2]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d157      	bne.n	8003cec <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2225      	movs	r2, #37	; 0x25
 8003c40:	2102      	movs	r1, #2
 8003c42:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2101      	movs	r1, #1
 8003c56:	438a      	bics	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f919 	bl	8003e98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	210e      	movs	r1, #14
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	e00f      	b.n	8003ca0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2104      	movs	r1, #4
 8003c8c:	438a      	bics	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	210a      	movs	r1, #10
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	025b      	lsls	r3, r3, #9
 8003caa:	4013      	ands	r3, r2
 8003cac:	d008      	beq.n	8003cc0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	0049      	lsls	r1, r1, #1
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	0049      	lsls	r1, r1, #1
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	e00a      	b.n	8003d02 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2280      	movs	r2, #128	; 0x80
 8003cf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2224      	movs	r2, #36	; 0x24
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003cfa:	2317      	movs	r3, #23
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003d02:	2317      	movs	r3, #23
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	781b      	ldrb	r3, [r3, #0]
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b006      	add	sp, #24
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	221c      	movs	r2, #28
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2204      	movs	r2, #4
 8003d32:	409a      	lsls	r2, r3
 8003d34:	0013      	movs	r3, r2
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d026      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x7a>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2204      	movs	r2, #4
 8003d40:	4013      	ands	r3, r2
 8003d42:	d022      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d107      	bne.n	8003d60 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2104      	movs	r1, #4
 8003d5c:	438a      	bics	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d64:	221c      	movs	r2, #28
 8003d66:	401a      	ands	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	2104      	movs	r1, #4
 8003d6e:	4091      	lsls	r1, r2
 8003d70:	000a      	movs	r2, r1
 8003d72:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d100      	bne.n	8003d7e <HAL_DMA_IRQHandler+0x6e>
 8003d7c:	e080      	b.n	8003e80 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	0010      	movs	r0, r2
 8003d86:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003d88:	e07a      	b.n	8003e80 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	221c      	movs	r2, #28
 8003d90:	4013      	ands	r3, r2
 8003d92:	2202      	movs	r2, #2
 8003d94:	409a      	lsls	r2, r3
 8003d96:	0013      	movs	r3, r2
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d03c      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x108>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2202      	movs	r2, #2
 8003da2:	4013      	ands	r3, r2
 8003da4:	d038      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2220      	movs	r2, #32
 8003dae:	4013      	ands	r3, r2
 8003db0:	d10b      	bne.n	8003dca <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	210a      	movs	r1, #10
 8003dbe:	438a      	bics	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2225      	movs	r2, #37	; 0x25
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	001a      	movs	r2, r3
 8003dd0:	4b2e      	ldr	r3, [pc, #184]	; (8003e8c <HAL_DMA_IRQHandler+0x17c>)
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d909      	bls.n	8003dea <HAL_DMA_IRQHandler+0xda>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	221c      	movs	r2, #28
 8003ddc:	401a      	ands	r2, r3
 8003dde:	4b2c      	ldr	r3, [pc, #176]	; (8003e90 <HAL_DMA_IRQHandler+0x180>)
 8003de0:	2102      	movs	r1, #2
 8003de2:	4091      	lsls	r1, r2
 8003de4:	000a      	movs	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	e008      	b.n	8003dfc <HAL_DMA_IRQHandler+0xec>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	221c      	movs	r2, #28
 8003df0:	401a      	ands	r2, r3
 8003df2:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <HAL_DMA_IRQHandler+0x184>)
 8003df4:	2102      	movs	r1, #2
 8003df6:	4091      	lsls	r1, r2
 8003df8:	000a      	movs	r2, r1
 8003dfa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2224      	movs	r2, #36	; 0x24
 8003e00:	2100      	movs	r1, #0
 8003e02:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d039      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	0010      	movs	r0, r2
 8003e14:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003e16:	e033      	b.n	8003e80 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	221c      	movs	r2, #28
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2208      	movs	r2, #8
 8003e22:	409a      	lsls	r2, r3
 8003e24:	0013      	movs	r3, r2
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d02a      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x172>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2208      	movs	r2, #8
 8003e30:	4013      	ands	r3, r2
 8003e32:	d026      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	210e      	movs	r1, #14
 8003e40:	438a      	bics	r2, r1
 8003e42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	221c      	movs	r2, #28
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	2101      	movs	r1, #1
 8003e52:	4091      	lsls	r1, r2
 8003e54:	000a      	movs	r2, r1
 8003e56:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2225      	movs	r2, #37	; 0x25
 8003e62:	2101      	movs	r1, #1
 8003e64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2224      	movs	r2, #36	; 0x24
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	0010      	movs	r0, r2
 8003e7e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46c0      	nop			; (mov r8, r8)
}
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b004      	add	sp, #16
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	40020080 	.word	0x40020080
 8003e90:	40020400 	.word	0x40020400
 8003e94:	40020000 	.word	0x40020000

08003e98 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003eae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ec0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	221c      	movs	r2, #28
 8003ec8:	401a      	ands	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	2101      	movs	r1, #1
 8003ed0:	4091      	lsls	r1, r2
 8003ed2:	000a      	movs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b10      	cmp	r3, #16
 8003ee4:	d108      	bne.n	8003ef8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ef6:	e007      	b.n	8003f08 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	60da      	str	r2, [r3, #12]
}
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b004      	add	sp, #16
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	001a      	movs	r2, r3
 8003f1e:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d814      	bhi.n	8003f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	089b      	lsrs	r3, r3, #2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4a1a      	ldr	r2, [pc, #104]	; (8003f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003f2e:	189a      	adds	r2, r3, r2
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	001a      	movs	r2, r3
 8003f3a:	23ff      	movs	r3, #255	; 0xff
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	3b08      	subs	r3, #8
 8003f40:	2114      	movs	r1, #20
 8003f42:	0018      	movs	r0, r3
 8003f44:	f7fc f8de 	bl	8000104 <__udivsi3>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	e014      	b.n	8003f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4a11      	ldr	r2, [pc, #68]	; (8003f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003f58:	189a      	adds	r2, r3, r2
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	001a      	movs	r2, r3
 8003f64:	23ff      	movs	r3, #255	; 0xff
 8003f66:	4013      	ands	r3, r2
 8003f68:	3b08      	subs	r3, #8
 8003f6a:	2114      	movs	r1, #20
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7fc f8c9 	bl	8000104 <__udivsi3>
 8003f72:	0003      	movs	r3, r0
 8003f74:	3307      	adds	r3, #7
 8003f76:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8003f7c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	221f      	movs	r2, #31
 8003f82:	4013      	ands	r3, r2
 8003f84:	2201      	movs	r2, #1
 8003f86:	409a      	lsls	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f8c:	46c0      	nop			; (mov r8, r8)
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b004      	add	sp, #16
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40020407 	.word	0x40020407
 8003f98:	40020800 	.word	0x40020800
 8003f9c:	4002081c 	.word	0x4002081c
 8003fa0:	40020880 	.word	0x40020880

08003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	227f      	movs	r2, #127	; 0x7f
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003fba:	4694      	mov	ip, r2
 8003fbc:	4463      	add	r3, ip
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	001a      	movs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a07      	ldr	r2, [pc, #28]	; (8003fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003fca:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b004      	add	sp, #16
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	1000823f 	.word	0x1000823f
 8003fe8:	40020940 	.word	0x40020940

08003fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ffa:	e14d      	b.n	8004298 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2101      	movs	r1, #1
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4091      	lsls	r1, r2
 8004006:	000a      	movs	r2, r1
 8004008:	4013      	ands	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d100      	bne.n	8004014 <HAL_GPIO_Init+0x28>
 8004012:	e13e      	b.n	8004292 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2203      	movs	r2, #3
 800401a:	4013      	ands	r3, r2
 800401c:	2b01      	cmp	r3, #1
 800401e:	d005      	beq.n	800402c <HAL_GPIO_Init+0x40>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2203      	movs	r2, #3
 8004026:	4013      	ands	r3, r2
 8004028:	2b02      	cmp	r3, #2
 800402a:	d130      	bne.n	800408e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	2203      	movs	r2, #3
 8004038:	409a      	lsls	r2, r3
 800403a:	0013      	movs	r3, r2
 800403c:	43da      	mvns	r2, r3
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4013      	ands	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	409a      	lsls	r2, r3
 800404e:	0013      	movs	r3, r2
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004062:	2201      	movs	r2, #1
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	409a      	lsls	r2, r3
 8004068:	0013      	movs	r3, r2
 800406a:	43da      	mvns	r2, r3
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	4013      	ands	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	2201      	movs	r2, #1
 800407a:	401a      	ands	r2, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	409a      	lsls	r2, r3
 8004080:	0013      	movs	r3, r2
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2203      	movs	r2, #3
 8004094:	4013      	ands	r3, r2
 8004096:	2b03      	cmp	r3, #3
 8004098:	d017      	beq.n	80040ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	2203      	movs	r2, #3
 80040a6:	409a      	lsls	r2, r3
 80040a8:	0013      	movs	r3, r2
 80040aa:	43da      	mvns	r2, r3
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	409a      	lsls	r2, r3
 80040bc:	0013      	movs	r3, r2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2203      	movs	r2, #3
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d123      	bne.n	800411e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	08da      	lsrs	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3208      	adds	r2, #8
 80040de:	0092      	lsls	r2, r2, #2
 80040e0:	58d3      	ldr	r3, [r2, r3]
 80040e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2207      	movs	r2, #7
 80040e8:	4013      	ands	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	220f      	movs	r2, #15
 80040ee:	409a      	lsls	r2, r3
 80040f0:	0013      	movs	r3, r2
 80040f2:	43da      	mvns	r2, r3
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2107      	movs	r1, #7
 8004102:	400b      	ands	r3, r1
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	409a      	lsls	r2, r3
 8004108:	0013      	movs	r3, r2
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	08da      	lsrs	r2, r3, #3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3208      	adds	r2, #8
 8004118:	0092      	lsls	r2, r2, #2
 800411a:	6939      	ldr	r1, [r7, #16]
 800411c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	2203      	movs	r2, #3
 800412a:	409a      	lsls	r2, r3
 800412c:	0013      	movs	r3, r2
 800412e:	43da      	mvns	r2, r3
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2203      	movs	r2, #3
 800413c:	401a      	ands	r2, r3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	409a      	lsls	r2, r3
 8004144:	0013      	movs	r3, r2
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	23c0      	movs	r3, #192	; 0xc0
 8004158:	029b      	lsls	r3, r3, #10
 800415a:	4013      	ands	r3, r2
 800415c:	d100      	bne.n	8004160 <HAL_GPIO_Init+0x174>
 800415e:	e098      	b.n	8004292 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004160:	4a53      	ldr	r2, [pc, #332]	; (80042b0 <HAL_GPIO_Init+0x2c4>)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	089b      	lsrs	r3, r3, #2
 8004166:	3318      	adds	r3, #24
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	589b      	ldr	r3, [r3, r2]
 800416c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2203      	movs	r2, #3
 8004172:	4013      	ands	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	220f      	movs	r2, #15
 8004178:	409a      	lsls	r2, r3
 800417a:	0013      	movs	r3, r2
 800417c:	43da      	mvns	r2, r3
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	23a0      	movs	r3, #160	; 0xa0
 8004188:	05db      	lsls	r3, r3, #23
 800418a:	429a      	cmp	r2, r3
 800418c:	d019      	beq.n	80041c2 <HAL_GPIO_Init+0x1d6>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a48      	ldr	r2, [pc, #288]	; (80042b4 <HAL_GPIO_Init+0x2c8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <HAL_GPIO_Init+0x1d2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a47      	ldr	r2, [pc, #284]	; (80042b8 <HAL_GPIO_Init+0x2cc>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00d      	beq.n	80041ba <HAL_GPIO_Init+0x1ce>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a46      	ldr	r2, [pc, #280]	; (80042bc <HAL_GPIO_Init+0x2d0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d007      	beq.n	80041b6 <HAL_GPIO_Init+0x1ca>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a45      	ldr	r2, [pc, #276]	; (80042c0 <HAL_GPIO_Init+0x2d4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d101      	bne.n	80041b2 <HAL_GPIO_Init+0x1c6>
 80041ae:	2304      	movs	r3, #4
 80041b0:	e008      	b.n	80041c4 <HAL_GPIO_Init+0x1d8>
 80041b2:	2305      	movs	r3, #5
 80041b4:	e006      	b.n	80041c4 <HAL_GPIO_Init+0x1d8>
 80041b6:	2303      	movs	r3, #3
 80041b8:	e004      	b.n	80041c4 <HAL_GPIO_Init+0x1d8>
 80041ba:	2302      	movs	r3, #2
 80041bc:	e002      	b.n	80041c4 <HAL_GPIO_Init+0x1d8>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_GPIO_Init+0x1d8>
 80041c2:	2300      	movs	r3, #0
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	2103      	movs	r1, #3
 80041c8:	400a      	ands	r2, r1
 80041ca:	00d2      	lsls	r2, r2, #3
 80041cc:	4093      	lsls	r3, r2
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80041d4:	4936      	ldr	r1, [pc, #216]	; (80042b0 <HAL_GPIO_Init+0x2c4>)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	089b      	lsrs	r3, r3, #2
 80041da:	3318      	adds	r3, #24
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041e2:	4a33      	ldr	r2, [pc, #204]	; (80042b0 <HAL_GPIO_Init+0x2c4>)
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	58d3      	ldr	r3, [r2, r3]
 80041e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	43da      	mvns	r2, r3
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4013      	ands	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	025b      	lsls	r3, r3, #9
 80041fc:	4013      	ands	r3, r2
 80041fe:	d003      	beq.n	8004208 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004208:	4929      	ldr	r1, [pc, #164]	; (80042b0 <HAL_GPIO_Init+0x2c4>)
 800420a:	2280      	movs	r2, #128	; 0x80
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004210:	4a27      	ldr	r2, [pc, #156]	; (80042b0 <HAL_GPIO_Init+0x2c4>)
 8004212:	2384      	movs	r3, #132	; 0x84
 8004214:	58d3      	ldr	r3, [r2, r3]
 8004216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	43da      	mvns	r2, r3
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4013      	ands	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	2380      	movs	r3, #128	; 0x80
 8004228:	029b      	lsls	r3, r3, #10
 800422a:	4013      	ands	r3, r2
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004236:	491e      	ldr	r1, [pc, #120]	; (80042b0 <HAL_GPIO_Init+0x2c4>)
 8004238:	2284      	movs	r2, #132	; 0x84
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800423e:	4b1c      	ldr	r3, [pc, #112]	; (80042b0 <HAL_GPIO_Init+0x2c4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	43da      	mvns	r2, r3
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4013      	ands	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	035b      	lsls	r3, r3, #13
 8004256:	4013      	ands	r3, r2
 8004258:	d003      	beq.n	8004262 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004262:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <HAL_GPIO_Init+0x2c4>)
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004268:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <HAL_GPIO_Init+0x2c4>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	43da      	mvns	r2, r3
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4013      	ands	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	039b      	lsls	r3, r3, #14
 8004280:	4013      	ands	r3, r2
 8004282:	d003      	beq.n	800428c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800428c:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <HAL_GPIO_Init+0x2c4>)
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	3301      	adds	r3, #1
 8004296:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	40da      	lsrs	r2, r3
 80042a0:	1e13      	subs	r3, r2, #0
 80042a2:	d000      	beq.n	80042a6 <HAL_GPIO_Init+0x2ba>
 80042a4:	e6aa      	b.n	8003ffc <HAL_GPIO_Init+0x10>
  }
}
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b006      	add	sp, #24
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40021800 	.word	0x40021800
 80042b4:	50000400 	.word	0x50000400
 80042b8:	50000800 	.word	0x50000800
 80042bc:	50000c00 	.word	0x50000c00
 80042c0:	50001000 	.word	0x50001000

080042c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	0008      	movs	r0, r1
 80042ce:	0011      	movs	r1, r2
 80042d0:	1cbb      	adds	r3, r7, #2
 80042d2:	1c02      	adds	r2, r0, #0
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	1c7b      	adds	r3, r7, #1
 80042d8:	1c0a      	adds	r2, r1, #0
 80042da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042dc:	1c7b      	adds	r3, r7, #1
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d004      	beq.n	80042ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042e4:	1cbb      	adds	r3, r7, #2
 80042e6:	881a      	ldrh	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042ec:	e003      	b.n	80042f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042ee:	1cbb      	adds	r3, r7, #2
 80042f0:	881a      	ldrh	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b002      	add	sp, #8
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004308:	4b19      	ldr	r3, [pc, #100]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a19      	ldr	r2, [pc, #100]	; (8004374 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800430e:	4013      	ands	r3, r2
 8004310:	0019      	movs	r1, r3
 8004312:	4b17      	ldr	r3, [pc, #92]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	430a      	orrs	r2, r1
 8004318:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	429a      	cmp	r2, r3
 8004322:	d11f      	bne.n	8004364 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004324:	4b14      	ldr	r3, [pc, #80]	; (8004378 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	0013      	movs	r3, r2
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	189b      	adds	r3, r3, r2
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4912      	ldr	r1, [pc, #72]	; (800437c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004332:	0018      	movs	r0, r3
 8004334:	f7fb fee6 	bl	8000104 <__udivsi3>
 8004338:	0003      	movs	r3, r0
 800433a:	3301      	adds	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800433e:	e008      	b.n	8004352 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3b01      	subs	r3, #1
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	e001      	b.n	8004352 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e009      	b.n	8004366 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004352:	4b07      	ldr	r3, [pc, #28]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	2380      	movs	r3, #128	; 0x80
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	401a      	ands	r2, r3
 800435c:	2380      	movs	r3, #128	; 0x80
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	429a      	cmp	r2, r3
 8004362:	d0ed      	beq.n	8004340 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	0018      	movs	r0, r3
 8004368:	46bd      	mov	sp, r7
 800436a:	b004      	add	sp, #16
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	40007000 	.word	0x40007000
 8004374:	fffff9ff 	.word	0xfffff9ff
 8004378:	20000000 	.word	0x20000000
 800437c:	000f4240 	.word	0x000f4240

08004380 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004384:	4b03      	ldr	r3, [pc, #12]	; (8004394 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	23e0      	movs	r3, #224	; 0xe0
 800438a:	01db      	lsls	r3, r3, #7
 800438c:	4013      	ands	r3, r2
}
 800438e:	0018      	movs	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000

08004398 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f000 fb56 	bl	8004a58 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2201      	movs	r2, #1
 80043b2:	4013      	ands	r3, r2
 80043b4:	d100      	bne.n	80043b8 <HAL_RCC_OscConfig+0x20>
 80043b6:	e07d      	b.n	80044b4 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043b8:	4bc3      	ldr	r3, [pc, #780]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2238      	movs	r2, #56	; 0x38
 80043be:	4013      	ands	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043c2:	4bc1      	ldr	r3, [pc, #772]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2203      	movs	r2, #3
 80043c8:	4013      	ands	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b10      	cmp	r3, #16
 80043d0:	d102      	bne.n	80043d8 <HAL_RCC_OscConfig+0x40>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d002      	beq.n	80043de <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043de:	4bba      	ldr	r3, [pc, #744]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	029b      	lsls	r3, r3, #10
 80043e6:	4013      	ands	r3, r2
 80043e8:	d063      	beq.n	80044b2 <HAL_RCC_OscConfig+0x11a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d15f      	bne.n	80044b2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f000 fb30 	bl	8004a58 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	025b      	lsls	r3, r3, #9
 8004400:	429a      	cmp	r2, r3
 8004402:	d107      	bne.n	8004414 <HAL_RCC_OscConfig+0x7c>
 8004404:	4bb0      	ldr	r3, [pc, #704]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	4baf      	ldr	r3, [pc, #700]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800440a:	2180      	movs	r1, #128	; 0x80
 800440c:	0249      	lsls	r1, r1, #9
 800440e:	430a      	orrs	r2, r1
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e020      	b.n	8004456 <HAL_RCC_OscConfig+0xbe>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	23a0      	movs	r3, #160	; 0xa0
 800441a:	02db      	lsls	r3, r3, #11
 800441c:	429a      	cmp	r2, r3
 800441e:	d10e      	bne.n	800443e <HAL_RCC_OscConfig+0xa6>
 8004420:	4ba9      	ldr	r3, [pc, #676]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4ba8      	ldr	r3, [pc, #672]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004426:	2180      	movs	r1, #128	; 0x80
 8004428:	02c9      	lsls	r1, r1, #11
 800442a:	430a      	orrs	r2, r1
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	4ba6      	ldr	r3, [pc, #664]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4ba5      	ldr	r3, [pc, #660]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004434:	2180      	movs	r1, #128	; 0x80
 8004436:	0249      	lsls	r1, r1, #9
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	e00b      	b.n	8004456 <HAL_RCC_OscConfig+0xbe>
 800443e:	4ba2      	ldr	r3, [pc, #648]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4ba1      	ldr	r3, [pc, #644]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004444:	49a1      	ldr	r1, [pc, #644]	; (80046cc <HAL_RCC_OscConfig+0x334>)
 8004446:	400a      	ands	r2, r1
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	4b9f      	ldr	r3, [pc, #636]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4b9e      	ldr	r3, [pc, #632]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004450:	499f      	ldr	r1, [pc, #636]	; (80046d0 <HAL_RCC_OscConfig+0x338>)
 8004452:	400a      	ands	r2, r1
 8004454:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d014      	beq.n	8004488 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445e:	f7ff fa27 	bl	80038b0 <HAL_GetTick>
 8004462:	0003      	movs	r3, r0
 8004464:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004468:	f7ff fa22 	bl	80038b0 <HAL_GetTick>
 800446c:	0002      	movs	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e2ee      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800447a:	4b93      	ldr	r3, [pc, #588]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	029b      	lsls	r3, r3, #10
 8004482:	4013      	ands	r3, r2
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0xd0>
 8004486:	e015      	b.n	80044b4 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7ff fa12 	bl	80038b0 <HAL_GetTick>
 800448c:	0003      	movs	r3, r0
 800448e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004492:	f7ff fa0d 	bl	80038b0 <HAL_GetTick>
 8004496:	0002      	movs	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b64      	cmp	r3, #100	; 0x64
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e2d9      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044a4:	4b88      	ldr	r3, [pc, #544]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	2380      	movs	r3, #128	; 0x80
 80044aa:	029b      	lsls	r3, r3, #10
 80044ac:	4013      	ands	r3, r2
 80044ae:	d1f0      	bne.n	8004492 <HAL_RCC_OscConfig+0xfa>
 80044b0:	e000      	b.n	80044b4 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2202      	movs	r2, #2
 80044ba:	4013      	ands	r3, r2
 80044bc:	d100      	bne.n	80044c0 <HAL_RCC_OscConfig+0x128>
 80044be:	e099      	b.n	80045f4 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044c0:	4b81      	ldr	r3, [pc, #516]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2238      	movs	r2, #56	; 0x38
 80044c6:	4013      	ands	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044ca:	4b7f      	ldr	r3, [pc, #508]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	2203      	movs	r2, #3
 80044d0:	4013      	ands	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b10      	cmp	r3, #16
 80044d8:	d102      	bne.n	80044e0 <HAL_RCC_OscConfig+0x148>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d002      	beq.n	80044e6 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d135      	bne.n	8004552 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044e6:	4b78      	ldr	r3, [pc, #480]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4013      	ands	r3, r2
 80044f0:	d005      	beq.n	80044fe <HAL_RCC_OscConfig+0x166>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e2ac      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fe:	4b72      	ldr	r3, [pc, #456]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	4a74      	ldr	r2, [pc, #464]	; (80046d4 <HAL_RCC_OscConfig+0x33c>)
 8004504:	4013      	ands	r3, r2
 8004506:	0019      	movs	r1, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	021a      	lsls	r2, r3, #8
 800450e:	4b6e      	ldr	r3, [pc, #440]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004510:	430a      	orrs	r2, r1
 8004512:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d112      	bne.n	8004540 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800451a:	4b6b      	ldr	r3, [pc, #428]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a6e      	ldr	r2, [pc, #440]	; (80046d8 <HAL_RCC_OscConfig+0x340>)
 8004520:	4013      	ands	r3, r2
 8004522:	0019      	movs	r1, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	4b67      	ldr	r3, [pc, #412]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800452a:	430a      	orrs	r2, r1
 800452c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800452e:	4b66      	ldr	r3, [pc, #408]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	0adb      	lsrs	r3, r3, #11
 8004534:	2207      	movs	r2, #7
 8004536:	4013      	ands	r3, r2
 8004538:	4a68      	ldr	r2, [pc, #416]	; (80046dc <HAL_RCC_OscConfig+0x344>)
 800453a:	40da      	lsrs	r2, r3
 800453c:	4b68      	ldr	r3, [pc, #416]	; (80046e0 <HAL_RCC_OscConfig+0x348>)
 800453e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004540:	4b68      	ldr	r3, [pc, #416]	; (80046e4 <HAL_RCC_OscConfig+0x34c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	0018      	movs	r0, r3
 8004546:	f7ff f957 	bl	80037f8 <HAL_InitTick>
 800454a:	1e03      	subs	r3, r0, #0
 800454c:	d051      	beq.n	80045f2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e282      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d030      	beq.n	80045bc <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800455a:	4b5b      	ldr	r3, [pc, #364]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a5e      	ldr	r2, [pc, #376]	; (80046d8 <HAL_RCC_OscConfig+0x340>)
 8004560:	4013      	ands	r3, r2
 8004562:	0019      	movs	r1, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	4b57      	ldr	r3, [pc, #348]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800456a:	430a      	orrs	r2, r1
 800456c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800456e:	4b56      	ldr	r3, [pc, #344]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b55      	ldr	r3, [pc, #340]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004574:	2180      	movs	r1, #128	; 0x80
 8004576:	0049      	lsls	r1, r1, #1
 8004578:	430a      	orrs	r2, r1
 800457a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7ff f998 	bl	80038b0 <HAL_GetTick>
 8004580:	0003      	movs	r3, r0
 8004582:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004586:	f7ff f993 	bl	80038b0 <HAL_GetTick>
 800458a:	0002      	movs	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e25f      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004598:	4b4b      	ldr	r3, [pc, #300]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	2380      	movs	r3, #128	; 0x80
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4013      	ands	r3, r2
 80045a2:	d0f0      	beq.n	8004586 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a4:	4b48      	ldr	r3, [pc, #288]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	4a4a      	ldr	r2, [pc, #296]	; (80046d4 <HAL_RCC_OscConfig+0x33c>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	0019      	movs	r1, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	021a      	lsls	r2, r3, #8
 80045b4:	4b44      	ldr	r3, [pc, #272]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	e01b      	b.n	80045f4 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80045bc:	4b42      	ldr	r3, [pc, #264]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b41      	ldr	r3, [pc, #260]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80045c2:	4949      	ldr	r1, [pc, #292]	; (80046e8 <HAL_RCC_OscConfig+0x350>)
 80045c4:	400a      	ands	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7ff f972 	bl	80038b0 <HAL_GetTick>
 80045cc:	0003      	movs	r3, r0
 80045ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d2:	f7ff f96d 	bl	80038b0 <HAL_GetTick>
 80045d6:	0002      	movs	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e239      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045e4:	4b38      	ldr	r3, [pc, #224]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4013      	ands	r3, r2
 80045ee:	d1f0      	bne.n	80045d2 <HAL_RCC_OscConfig+0x23a>
 80045f0:	e000      	b.n	80045f4 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2208      	movs	r2, #8
 80045fa:	4013      	ands	r3, r2
 80045fc:	d047      	beq.n	800468e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80045fe:	4b32      	ldr	r3, [pc, #200]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2238      	movs	r2, #56	; 0x38
 8004604:	4013      	ands	r3, r2
 8004606:	2b18      	cmp	r3, #24
 8004608:	d10a      	bne.n	8004620 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800460a:	4b2f      	ldr	r3, [pc, #188]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800460c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460e:	2202      	movs	r2, #2
 8004610:	4013      	ands	r3, r2
 8004612:	d03c      	beq.n	800468e <HAL_RCC_OscConfig+0x2f6>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d138      	bne.n	800468e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e21b      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d019      	beq.n	800465c <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004628:	4b27      	ldr	r3, [pc, #156]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800462a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800462c:	4b26      	ldr	r3, [pc, #152]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800462e:	2101      	movs	r1, #1
 8004630:	430a      	orrs	r2, r1
 8004632:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7ff f93c 	bl	80038b0 <HAL_GetTick>
 8004638:	0003      	movs	r3, r0
 800463a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463e:	f7ff f937 	bl	80038b0 <HAL_GetTick>
 8004642:	0002      	movs	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e203      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004650:	4b1d      	ldr	r3, [pc, #116]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004654:	2202      	movs	r2, #2
 8004656:	4013      	ands	r3, r2
 8004658:	d0f1      	beq.n	800463e <HAL_RCC_OscConfig+0x2a6>
 800465a:	e018      	b.n	800468e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800465c:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 800465e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004660:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004662:	2101      	movs	r1, #1
 8004664:	438a      	bics	r2, r1
 8004666:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7ff f922 	bl	80038b0 <HAL_GetTick>
 800466c:	0003      	movs	r3, r0
 800466e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004672:	f7ff f91d 	bl	80038b0 <HAL_GetTick>
 8004676:	0002      	movs	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e1e9      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004684:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 8004686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004688:	2202      	movs	r2, #2
 800468a:	4013      	ands	r3, r2
 800468c:	d1f1      	bne.n	8004672 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2204      	movs	r2, #4
 8004694:	4013      	ands	r3, r2
 8004696:	d100      	bne.n	800469a <HAL_RCC_OscConfig+0x302>
 8004698:	e0c6      	b.n	8004828 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469a:	231f      	movs	r3, #31
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80046a2:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2238      	movs	r2, #56	; 0x38
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d11e      	bne.n	80046ec <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80046ae:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_RCC_OscConfig+0x330>)
 80046b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b2:	2202      	movs	r2, #2
 80046b4:	4013      	ands	r3, r2
 80046b6:	d100      	bne.n	80046ba <HAL_RCC_OscConfig+0x322>
 80046b8:	e0b6      	b.n	8004828 <HAL_RCC_OscConfig+0x490>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d000      	beq.n	80046c4 <HAL_RCC_OscConfig+0x32c>
 80046c2:	e0b1      	b.n	8004828 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e1c7      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
 80046c8:	40021000 	.word	0x40021000
 80046cc:	fffeffff 	.word	0xfffeffff
 80046d0:	fffbffff 	.word	0xfffbffff
 80046d4:	ffff80ff 	.word	0xffff80ff
 80046d8:	ffffc7ff 	.word	0xffffc7ff
 80046dc:	00f42400 	.word	0x00f42400
 80046e0:	20000000 	.word	0x20000000
 80046e4:	20000004 	.word	0x20000004
 80046e8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046ec:	4bb8      	ldr	r3, [pc, #736]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 80046ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	055b      	lsls	r3, r3, #21
 80046f4:	4013      	ands	r3, r2
 80046f6:	d101      	bne.n	80046fc <HAL_RCC_OscConfig+0x364>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <HAL_RCC_OscConfig+0x366>
 80046fc:	2300      	movs	r3, #0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d011      	beq.n	8004726 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	4bb3      	ldr	r3, [pc, #716]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004704:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004706:	4bb2      	ldr	r3, [pc, #712]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004708:	2180      	movs	r1, #128	; 0x80
 800470a:	0549      	lsls	r1, r1, #21
 800470c:	430a      	orrs	r2, r1
 800470e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004710:	4baf      	ldr	r3, [pc, #700]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	055b      	lsls	r3, r3, #21
 8004718:	4013      	ands	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800471e:	231f      	movs	r3, #31
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	2201      	movs	r2, #1
 8004724:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004726:	4bab      	ldr	r3, [pc, #684]	; (80049d4 <HAL_RCC_OscConfig+0x63c>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	2380      	movs	r3, #128	; 0x80
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4013      	ands	r3, r2
 8004730:	d11a      	bne.n	8004768 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004732:	4ba8      	ldr	r3, [pc, #672]	; (80049d4 <HAL_RCC_OscConfig+0x63c>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4ba7      	ldr	r3, [pc, #668]	; (80049d4 <HAL_RCC_OscConfig+0x63c>)
 8004738:	2180      	movs	r1, #128	; 0x80
 800473a:	0049      	lsls	r1, r1, #1
 800473c:	430a      	orrs	r2, r1
 800473e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004740:	f7ff f8b6 	bl	80038b0 <HAL_GetTick>
 8004744:	0003      	movs	r3, r0
 8004746:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474a:	f7ff f8b1 	bl	80038b0 <HAL_GetTick>
 800474e:	0002      	movs	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e17d      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800475c:	4b9d      	ldr	r3, [pc, #628]	; (80049d4 <HAL_RCC_OscConfig+0x63c>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4013      	ands	r3, r2
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d106      	bne.n	800477e <HAL_RCC_OscConfig+0x3e6>
 8004770:	4b97      	ldr	r3, [pc, #604]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004772:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004774:	4b96      	ldr	r3, [pc, #600]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004776:	2101      	movs	r1, #1
 8004778:	430a      	orrs	r2, r1
 800477a:	65da      	str	r2, [r3, #92]	; 0x5c
 800477c:	e01c      	b.n	80047b8 <HAL_RCC_OscConfig+0x420>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b05      	cmp	r3, #5
 8004784:	d10c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x408>
 8004786:	4b92      	ldr	r3, [pc, #584]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004788:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800478a:	4b91      	ldr	r3, [pc, #580]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 800478c:	2104      	movs	r1, #4
 800478e:	430a      	orrs	r2, r1
 8004790:	65da      	str	r2, [r3, #92]	; 0x5c
 8004792:	4b8f      	ldr	r3, [pc, #572]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004794:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004796:	4b8e      	ldr	r3, [pc, #568]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004798:	2101      	movs	r1, #1
 800479a:	430a      	orrs	r2, r1
 800479c:	65da      	str	r2, [r3, #92]	; 0x5c
 800479e:	e00b      	b.n	80047b8 <HAL_RCC_OscConfig+0x420>
 80047a0:	4b8b      	ldr	r3, [pc, #556]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 80047a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047a4:	4b8a      	ldr	r3, [pc, #552]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 80047a6:	2101      	movs	r1, #1
 80047a8:	438a      	bics	r2, r1
 80047aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80047ac:	4b88      	ldr	r3, [pc, #544]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 80047ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047b0:	4b87      	ldr	r3, [pc, #540]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 80047b2:	2104      	movs	r1, #4
 80047b4:	438a      	bics	r2, r1
 80047b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d014      	beq.n	80047ea <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7ff f876 	bl	80038b0 <HAL_GetTick>
 80047c4:	0003      	movs	r3, r0
 80047c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c8:	e009      	b.n	80047de <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ca:	f7ff f871 	bl	80038b0 <HAL_GetTick>
 80047ce:	0002      	movs	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	4a80      	ldr	r2, [pc, #512]	; (80049d8 <HAL_RCC_OscConfig+0x640>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e13c      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047de:	4b7c      	ldr	r3, [pc, #496]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 80047e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e2:	2202      	movs	r2, #2
 80047e4:	4013      	ands	r3, r2
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x432>
 80047e8:	e013      	b.n	8004812 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ea:	f7ff f861 	bl	80038b0 <HAL_GetTick>
 80047ee:	0003      	movs	r3, r0
 80047f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047f2:	e009      	b.n	8004808 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f4:	f7ff f85c 	bl	80038b0 <HAL_GetTick>
 80047f8:	0002      	movs	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	4a76      	ldr	r2, [pc, #472]	; (80049d8 <HAL_RCC_OscConfig+0x640>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e127      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004808:	4b71      	ldr	r3, [pc, #452]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 800480a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480c:	2202      	movs	r2, #2
 800480e:	4013      	ands	r3, r2
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004812:	231f      	movs	r3, #31
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d105      	bne.n	8004828 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800481c:	4b6c      	ldr	r3, [pc, #432]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 800481e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004820:	4b6b      	ldr	r3, [pc, #428]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004822:	496e      	ldr	r1, [pc, #440]	; (80049dc <HAL_RCC_OscConfig+0x644>)
 8004824:	400a      	ands	r2, r1
 8004826:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2220      	movs	r2, #32
 800482e:	4013      	ands	r3, r2
 8004830:	d039      	beq.n	80048a6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01b      	beq.n	8004872 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800483a:	4b65      	ldr	r3, [pc, #404]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4b64      	ldr	r3, [pc, #400]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	03c9      	lsls	r1, r1, #15
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004848:	f7ff f832 	bl	80038b0 <HAL_GetTick>
 800484c:	0003      	movs	r3, r0
 800484e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004852:	f7ff f82d 	bl	80038b0 <HAL_GetTick>
 8004856:	0002      	movs	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e0f9      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004864:	4b5a      	ldr	r3, [pc, #360]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	4013      	ands	r3, r2
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x4ba>
 8004870:	e019      	b.n	80048a6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004872:	4b57      	ldr	r3, [pc, #348]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b56      	ldr	r3, [pc, #344]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004878:	4959      	ldr	r1, [pc, #356]	; (80049e0 <HAL_RCC_OscConfig+0x648>)
 800487a:	400a      	ands	r2, r1
 800487c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487e:	f7ff f817 	bl	80038b0 <HAL_GetTick>
 8004882:	0003      	movs	r3, r0
 8004884:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004888:	f7ff f812 	bl	80038b0 <HAL_GetTick>
 800488c:	0002      	movs	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e0de      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800489a:	4b4d      	ldr	r3, [pc, #308]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	2380      	movs	r3, #128	; 0x80
 80048a0:	041b      	lsls	r3, r3, #16
 80048a2:	4013      	ands	r3, r2
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d100      	bne.n	80048b0 <HAL_RCC_OscConfig+0x518>
 80048ae:	e0d2      	b.n	8004a56 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048b0:	4b47      	ldr	r3, [pc, #284]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2238      	movs	r2, #56	; 0x38
 80048b6:	4013      	ands	r3, r2
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d100      	bne.n	80048be <HAL_RCC_OscConfig+0x526>
 80048bc:	e081      	b.n	80049c2 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d156      	bne.n	8004974 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c6:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b41      	ldr	r3, [pc, #260]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 80048cc:	4945      	ldr	r1, [pc, #276]	; (80049e4 <HAL_RCC_OscConfig+0x64c>)
 80048ce:	400a      	ands	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d2:	f7fe ffed 	bl	80038b0 <HAL_GetTick>
 80048d6:	0003      	movs	r3, r0
 80048d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fe ffe8 	bl	80038b0 <HAL_GetTick>
 80048e0:	0002      	movs	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e0b4      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ee:	4b38      	ldr	r3, [pc, #224]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	049b      	lsls	r3, r3, #18
 80048f6:	4013      	ands	r3, r2
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048fa:	4b35      	ldr	r3, [pc, #212]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	4a3a      	ldr	r2, [pc, #232]	; (80049e8 <HAL_RCC_OscConfig+0x650>)
 8004900:	4013      	ands	r3, r2
 8004902:	0019      	movs	r1, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	431a      	orrs	r2, r3
 8004928:	4b29      	ldr	r3, [pc, #164]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 800492a:	430a      	orrs	r2, r1
 800492c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800492e:	4b28      	ldr	r3, [pc, #160]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	4b27      	ldr	r3, [pc, #156]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004934:	2180      	movs	r1, #128	; 0x80
 8004936:	0449      	lsls	r1, r1, #17
 8004938:	430a      	orrs	r2, r1
 800493a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800493c:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	4b23      	ldr	r3, [pc, #140]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004942:	2180      	movs	r1, #128	; 0x80
 8004944:	0549      	lsls	r1, r1, #21
 8004946:	430a      	orrs	r2, r1
 8004948:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494a:	f7fe ffb1 	bl	80038b0 <HAL_GetTick>
 800494e:	0003      	movs	r3, r0
 8004950:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004954:	f7fe ffac 	bl	80038b0 <HAL_GetTick>
 8004958:	0002      	movs	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e078      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004966:	4b1a      	ldr	r3, [pc, #104]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	049b      	lsls	r3, r3, #18
 800496e:	4013      	ands	r3, r2
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x5bc>
 8004972:	e070      	b.n	8004a56 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004974:	4b16      	ldr	r3, [pc, #88]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 800497a:	491a      	ldr	r1, [pc, #104]	; (80049e4 <HAL_RCC_OscConfig+0x64c>)
 800497c:	400a      	ands	r2, r1
 800497e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004980:	4b13      	ldr	r3, [pc, #76]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004986:	2103      	movs	r1, #3
 8004988:	438a      	bics	r2, r1
 800498a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800498c:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 8004992:	4916      	ldr	r1, [pc, #88]	; (80049ec <HAL_RCC_OscConfig+0x654>)
 8004994:	400a      	ands	r2, r1
 8004996:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004998:	f7fe ff8a 	bl	80038b0 <HAL_GetTick>
 800499c:	0003      	movs	r3, r0
 800499e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a2:	f7fe ff85 	bl	80038b0 <HAL_GetTick>
 80049a6:	0002      	movs	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e051      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b4:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <HAL_RCC_OscConfig+0x638>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	049b      	lsls	r3, r3, #18
 80049bc:	4013      	ands	r3, r2
 80049be:	d1f0      	bne.n	80049a2 <HAL_RCC_OscConfig+0x60a>
 80049c0:	e049      	b.n	8004a56 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d112      	bne.n	80049f0 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e044      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40007000 	.word	0x40007000
 80049d8:	00001388 	.word	0x00001388
 80049dc:	efffffff 	.word	0xefffffff
 80049e0:	ffbfffff 	.word	0xffbfffff
 80049e4:	feffffff 	.word	0xfeffffff
 80049e8:	11c1808c 	.word	0x11c1808c
 80049ec:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80049f0:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <HAL_RCC_OscConfig+0x6c8>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2203      	movs	r2, #3
 80049fa:	401a      	ands	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d126      	bne.n	8004a52 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2270      	movs	r2, #112	; 0x70
 8004a08:	401a      	ands	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d11f      	bne.n	8004a52 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	23fe      	movs	r3, #254	; 0xfe
 8004a16:	01db      	lsls	r3, r3, #7
 8004a18:	401a      	ands	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d116      	bne.n	8004a52 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	23f8      	movs	r3, #248	; 0xf8
 8004a28:	039b      	lsls	r3, r3, #14
 8004a2a:	401a      	ands	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d10e      	bne.n	8004a52 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	23e0      	movs	r3, #224	; 0xe0
 8004a38:	051b      	lsls	r3, r3, #20
 8004a3a:	401a      	ands	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d106      	bne.n	8004a52 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	0f5b      	lsrs	r3, r3, #29
 8004a48:	075a      	lsls	r2, r3, #29
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d001      	beq.n	8004a56 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	0018      	movs	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b008      	add	sp, #32
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40021000 	.word	0x40021000

08004a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0e9      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a78:	4b76      	ldr	r3, [pc, #472]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2207      	movs	r2, #7
 8004a7e:	4013      	ands	r3, r2
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d91e      	bls.n	8004ac4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a86:	4b73      	ldr	r3, [pc, #460]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2207      	movs	r2, #7
 8004a8c:	4393      	bics	r3, r2
 8004a8e:	0019      	movs	r1, r3
 8004a90:	4b70      	ldr	r3, [pc, #448]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a98:	f7fe ff0a 	bl	80038b0 <HAL_GetTick>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004aa0:	e009      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa2:	f7fe ff05 	bl	80038b0 <HAL_GetTick>
 8004aa6:	0002      	movs	r2, r0
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	4a6a      	ldr	r2, [pc, #424]	; (8004c58 <HAL_RCC_ClockConfig+0x1f4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e0ca      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ab6:	4b67      	ldr	r3, [pc, #412]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2207      	movs	r2, #7
 8004abc:	4013      	ands	r3, r2
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d1ee      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	4013      	ands	r3, r2
 8004acc:	d015      	beq.n	8004afa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2204      	movs	r2, #4
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d006      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004ad8:	4b60      	ldr	r3, [pc, #384]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	4b5f      	ldr	r3, [pc, #380]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004ade:	21e0      	movs	r1, #224	; 0xe0
 8004ae0:	01c9      	lsls	r1, r1, #7
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae6:	4b5d      	ldr	r3, [pc, #372]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	4a5d      	ldr	r2, [pc, #372]	; (8004c60 <HAL_RCC_ClockConfig+0x1fc>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	0019      	movs	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	4b59      	ldr	r3, [pc, #356]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004af6:	430a      	orrs	r2, r1
 8004af8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2201      	movs	r2, #1
 8004b00:	4013      	ands	r3, r2
 8004b02:	d057      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b0c:	4b53      	ldr	r3, [pc, #332]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	029b      	lsls	r3, r3, #10
 8004b14:	4013      	ands	r3, r2
 8004b16:	d12b      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e097      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b24:	4b4d      	ldr	r3, [pc, #308]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	2380      	movs	r3, #128	; 0x80
 8004b2a:	049b      	lsls	r3, r3, #18
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d11f      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e08b      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d107      	bne.n	8004b4c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b3c:	4b47      	ldr	r3, [pc, #284]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	2380      	movs	r3, #128	; 0x80
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4013      	ands	r3, r2
 8004b46:	d113      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e07f      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d106      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b54:	4b41      	ldr	r3, [pc, #260]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b58:	2202      	movs	r2, #2
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d108      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e074      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b62:	4b3e      	ldr	r3, [pc, #248]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b66:	2202      	movs	r2, #2
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e06d      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b70:	4b3a      	ldr	r3, [pc, #232]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2207      	movs	r2, #7
 8004b76:	4393      	bics	r3, r2
 8004b78:	0019      	movs	r1, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	4b37      	ldr	r3, [pc, #220]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004b80:	430a      	orrs	r2, r1
 8004b82:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b84:	f7fe fe94 	bl	80038b0 <HAL_GetTick>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8c:	e009      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b8e:	f7fe fe8f 	bl	80038b0 <HAL_GetTick>
 8004b92:	0002      	movs	r2, r0
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	4a2f      	ldr	r2, [pc, #188]	; (8004c58 <HAL_RCC_ClockConfig+0x1f4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e054      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba2:	4b2e      	ldr	r3, [pc, #184]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2238      	movs	r2, #56	; 0x38
 8004ba8:	401a      	ands	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d1ec      	bne.n	8004b8e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb4:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2207      	movs	r2, #7
 8004bba:	4013      	ands	r3, r2
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d21e      	bcs.n	8004c00 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2207      	movs	r2, #7
 8004bc8:	4393      	bics	r3, r2
 8004bca:	0019      	movs	r1, r3
 8004bcc:	4b21      	ldr	r3, [pc, #132]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004bd4:	f7fe fe6c 	bl	80038b0 <HAL_GetTick>
 8004bd8:	0003      	movs	r3, r0
 8004bda:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004bdc:	e009      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bde:	f7fe fe67 	bl	80038b0 <HAL_GetTick>
 8004be2:	0002      	movs	r2, r0
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	4a1b      	ldr	r2, [pc, #108]	; (8004c58 <HAL_RCC_ClockConfig+0x1f4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e02c      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004bf2:	4b18      	ldr	r3, [pc, #96]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2207      	movs	r2, #7
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d1ee      	bne.n	8004bde <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2204      	movs	r2, #4
 8004c06:	4013      	ands	r3, r2
 8004c08:	d009      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c0a:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <HAL_RCC_ClockConfig+0x200>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	0019      	movs	r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c1e:	f000 f829 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 8004c22:	0001      	movs	r1, r0
 8004c24:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	0a1b      	lsrs	r3, r3, #8
 8004c2a:	220f      	movs	r2, #15
 8004c2c:	401a      	ands	r2, r3
 8004c2e:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <HAL_RCC_ClockConfig+0x204>)
 8004c30:	0092      	lsls	r2, r2, #2
 8004c32:	58d3      	ldr	r3, [r2, r3]
 8004c34:	221f      	movs	r2, #31
 8004c36:	4013      	ands	r3, r2
 8004c38:	000a      	movs	r2, r1
 8004c3a:	40da      	lsrs	r2, r3
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <HAL_RCC_ClockConfig+0x208>)
 8004c3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <HAL_RCC_ClockConfig+0x20c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	0018      	movs	r0, r3
 8004c46:	f7fe fdd7 	bl	80037f8 <HAL_InitTick>
 8004c4a:	0003      	movs	r3, r0
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b004      	add	sp, #16
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40022000 	.word	0x40022000
 8004c58:	00001388 	.word	0x00001388
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	fffff0ff 	.word	0xfffff0ff
 8004c64:	ffff8fff 	.word	0xffff8fff
 8004c68:	08007570 	.word	0x08007570
 8004c6c:	20000000 	.word	0x20000000
 8004c70:	20000004 	.word	0x20000004

08004c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c7a:	4b3c      	ldr	r3, [pc, #240]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2238      	movs	r2, #56	; 0x38
 8004c80:	4013      	ands	r3, r2
 8004c82:	d10f      	bne.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004c84:	4b39      	ldr	r3, [pc, #228]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	0adb      	lsrs	r3, r3, #11
 8004c8a:	2207      	movs	r2, #7
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2201      	movs	r2, #1
 8004c90:	409a      	lsls	r2, r3
 8004c92:	0013      	movs	r3, r2
 8004c94:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	4835      	ldr	r0, [pc, #212]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004c9a:	f7fb fa33 	bl	8000104 <__udivsi3>
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	e05d      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ca4:	4b31      	ldr	r3, [pc, #196]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2238      	movs	r2, #56	; 0x38
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d102      	bne.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cb0:	4b30      	ldr	r3, [pc, #192]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x100>)
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	e054      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cb6:	4b2d      	ldr	r3, [pc, #180]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2238      	movs	r2, #56	; 0x38
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b10      	cmp	r3, #16
 8004cc0:	d138      	bne.n	8004d34 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004cc2:	4b2a      	ldr	r3, [pc, #168]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ccc:	4b27      	ldr	r3, [pc, #156]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	2207      	movs	r2, #7
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d10d      	bne.n	8004cfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	4824      	ldr	r0, [pc, #144]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ce4:	f7fb fa0e 	bl	8000104 <__udivsi3>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	0019      	movs	r1, r3
 8004cec:	4b1f      	ldr	r3, [pc, #124]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	0a1b      	lsrs	r3, r3, #8
 8004cf2:	227f      	movs	r2, #127	; 0x7f
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	434b      	muls	r3, r1
 8004cf8:	617b      	str	r3, [r7, #20]
        break;
 8004cfa:	e00d      	b.n	8004d18 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004cfc:	68b9      	ldr	r1, [r7, #8]
 8004cfe:	481c      	ldr	r0, [pc, #112]	; (8004d70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d00:	f7fb fa00 	bl	8000104 <__udivsi3>
 8004d04:	0003      	movs	r3, r0
 8004d06:	0019      	movs	r1, r3
 8004d08:	4b18      	ldr	r3, [pc, #96]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	0a1b      	lsrs	r3, r3, #8
 8004d0e:	227f      	movs	r2, #127	; 0x7f
 8004d10:	4013      	ands	r3, r2
 8004d12:	434b      	muls	r3, r1
 8004d14:	617b      	str	r3, [r7, #20]
        break;
 8004d16:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004d18:	4b14      	ldr	r3, [pc, #80]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	0f5b      	lsrs	r3, r3, #29
 8004d1e:	2207      	movs	r2, #7
 8004d20:	4013      	ands	r3, r2
 8004d22:	3301      	adds	r3, #1
 8004d24:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	6978      	ldr	r0, [r7, #20]
 8004d2a:	f7fb f9eb 	bl	8000104 <__udivsi3>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	e015      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004d34:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2238      	movs	r2, #56	; 0x38
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d103      	bne.n	8004d48 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	613b      	str	r3, [r7, #16]
 8004d46:	e00b      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d48:	4b08      	ldr	r3, [pc, #32]	; (8004d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2238      	movs	r2, #56	; 0x38
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b18      	cmp	r3, #24
 8004d52:	d103      	bne.n	8004d5c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004d54:	23fa      	movs	r3, #250	; 0xfa
 8004d56:	01db      	lsls	r3, r3, #7
 8004d58:	613b      	str	r3, [r7, #16]
 8004d5a:	e001      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d60:	693b      	ldr	r3, [r7, #16]
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b006      	add	sp, #24
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	00f42400 	.word	0x00f42400
 8004d74:	007a1200 	.word	0x007a1200

08004d78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d7c:	4b02      	ldr	r3, [pc, #8]	; (8004d88 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
}
 8004d80:	0018      	movs	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	20000000 	.word	0x20000000

08004d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d8c:	b5b0      	push	{r4, r5, r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004d90:	f7ff fff2 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 8004d94:	0004      	movs	r4, r0
 8004d96:	f7ff faf3 	bl	8004380 <LL_RCC_GetAPB1Prescaler>
 8004d9a:	0003      	movs	r3, r0
 8004d9c:	0b1a      	lsrs	r2, r3, #12
 8004d9e:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004da0:	0092      	lsls	r2, r2, #2
 8004da2:	58d3      	ldr	r3, [r2, r3]
 8004da4:	221f      	movs	r2, #31
 8004da6:	4013      	ands	r3, r2
 8004da8:	40dc      	lsrs	r4, r3
 8004daa:	0023      	movs	r3, r4
}
 8004dac:	0018      	movs	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bdb0      	pop	{r4, r5, r7, pc}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	080075b0 	.word	0x080075b0

08004db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004dc0:	2313      	movs	r3, #19
 8004dc2:	18fb      	adds	r3, r7, r3
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dc8:	2312      	movs	r3, #18
 8004dca:	18fb      	adds	r3, r7, r3
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	2380      	movs	r3, #128	; 0x80
 8004dd6:	029b      	lsls	r3, r3, #10
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d100      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004ddc:	e0ad      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dde:	2011      	movs	r0, #17
 8004de0:	183b      	adds	r3, r7, r0
 8004de2:	2200      	movs	r2, #0
 8004de4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004de6:	4b47      	ldr	r3, [pc, #284]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004de8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	055b      	lsls	r3, r3, #21
 8004dee:	4013      	ands	r3, r2
 8004df0:	d110      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004df2:	4b44      	ldr	r3, [pc, #272]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004df4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df6:	4b43      	ldr	r3, [pc, #268]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	0549      	lsls	r1, r1, #21
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e00:	4b40      	ldr	r3, [pc, #256]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	055b      	lsls	r3, r3, #21
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60bb      	str	r3, [r7, #8]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e0e:	183b      	adds	r3, r7, r0
 8004e10:	2201      	movs	r2, #1
 8004e12:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e14:	4b3c      	ldr	r3, [pc, #240]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	4b3b      	ldr	r3, [pc, #236]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004e1a:	2180      	movs	r1, #128	; 0x80
 8004e1c:	0049      	lsls	r1, r1, #1
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e22:	f7fe fd45 	bl	80038b0 <HAL_GetTick>
 8004e26:	0003      	movs	r3, r0
 8004e28:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e2a:	e00b      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e2c:	f7fe fd40 	bl	80038b0 <HAL_GetTick>
 8004e30:	0002      	movs	r2, r0
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d904      	bls.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004e3a:	2313      	movs	r3, #19
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	2203      	movs	r2, #3
 8004e40:	701a      	strb	r2, [r3, #0]
        break;
 8004e42:	e005      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e44:	4b30      	ldr	r3, [pc, #192]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	2380      	movs	r3, #128	; 0x80
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	d0ed      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004e50:	2313      	movs	r3, #19
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d15e      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e5a:	4b2a      	ldr	r3, [pc, #168]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e5e:	23c0      	movs	r3, #192	; 0xc0
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4013      	ands	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d019      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d014      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e76:	4b23      	ldr	r3, [pc, #140]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7a:	4a24      	ldr	r2, [pc, #144]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e80:	4b20      	ldr	r3, [pc, #128]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e84:	4b1f      	ldr	r3, [pc, #124]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e86:	2180      	movs	r1, #128	; 0x80
 8004e88:	0249      	lsls	r1, r1, #9
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e8e:	4b1d      	ldr	r3, [pc, #116]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e92:	4b1c      	ldr	r3, [pc, #112]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e94:	491e      	ldr	r1, [pc, #120]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004e96:	400a      	ands	r2, r1
 8004e98:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e9a:	4b1a      	ldr	r3, [pc, #104]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d016      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea8:	f7fe fd02 	bl	80038b0 <HAL_GetTick>
 8004eac:	0003      	movs	r3, r0
 8004eae:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb0:	e00c      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fe fcfd 	bl	80038b0 <HAL_GetTick>
 8004eb6:	0002      	movs	r2, r0
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	4a15      	ldr	r2, [pc, #84]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d904      	bls.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004ec2:	2313      	movs	r3, #19
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	701a      	strb	r2, [r3, #0]
            break;
 8004eca:	e004      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ecc:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d0ed      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004ed6:	2313      	movs	r3, #19
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ee0:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee4:	4a09      	ldr	r2, [pc, #36]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	0019      	movs	r1, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ef4:	e016      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ef6:	2312      	movs	r3, #18
 8004ef8:	18fb      	adds	r3, r7, r3
 8004efa:	2213      	movs	r2, #19
 8004efc:	18ba      	adds	r2, r7, r2
 8004efe:	7812      	ldrb	r2, [r2, #0]
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	e00f      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004f04:	40021000 	.word	0x40021000
 8004f08:	40007000 	.word	0x40007000
 8004f0c:	fffffcff 	.word	0xfffffcff
 8004f10:	fffeffff 	.word	0xfffeffff
 8004f14:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f18:	2312      	movs	r3, #18
 8004f1a:	18fb      	adds	r3, r7, r3
 8004f1c:	2213      	movs	r2, #19
 8004f1e:	18ba      	adds	r2, r7, r2
 8004f20:	7812      	ldrb	r2, [r2, #0]
 8004f22:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f24:	2311      	movs	r3, #17
 8004f26:	18fb      	adds	r3, r7, r3
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d105      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f2e:	4bb6      	ldr	r3, [pc, #728]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f32:	4bb5      	ldr	r3, [pc, #724]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f34:	49b5      	ldr	r1, [pc, #724]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004f36:	400a      	ands	r2, r1
 8004f38:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	4013      	ands	r3, r2
 8004f42:	d009      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f44:	4bb0      	ldr	r3, [pc, #704]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f48:	2203      	movs	r2, #3
 8004f4a:	4393      	bics	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	4bad      	ldr	r3, [pc, #692]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f54:	430a      	orrs	r2, r1
 8004f56:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d009      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f62:	4ba9      	ldr	r3, [pc, #676]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	220c      	movs	r2, #12
 8004f68:	4393      	bics	r3, r2
 8004f6a:	0019      	movs	r1, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	4ba5      	ldr	r3, [pc, #660]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f72:	430a      	orrs	r2, r1
 8004f74:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d009      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f80:	4ba1      	ldr	r3, [pc, #644]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f84:	2230      	movs	r2, #48	; 0x30
 8004f86:	4393      	bics	r3, r2
 8004f88:	0019      	movs	r1, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	4b9e      	ldr	r3, [pc, #632]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f90:	430a      	orrs	r2, r1
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2210      	movs	r2, #16
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d009      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f9e:	4b9a      	ldr	r3, [pc, #616]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa2:	4a9b      	ldr	r2, [pc, #620]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	4b96      	ldr	r3, [pc, #600]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	2380      	movs	r3, #128	; 0x80
 8004fb8:	015b      	lsls	r3, r3, #5
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004fbe:	4b92      	ldr	r3, [pc, #584]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	4a94      	ldr	r2, [pc, #592]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	0019      	movs	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695a      	ldr	r2, [r3, #20]
 8004fcc:	4b8e      	ldr	r3, [pc, #568]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	2380      	movs	r3, #128	; 0x80
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d009      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fde:	4b8a      	ldr	r3, [pc, #552]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe2:	4a8d      	ldr	r2, [pc, #564]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	0019      	movs	r1, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fec:	4b86      	ldr	r3, [pc, #536]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d009      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ffe:	4b82      	ldr	r3, [pc, #520]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005002:	4a86      	ldr	r2, [pc, #536]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005004:	4013      	ands	r3, r2
 8005006:	0019      	movs	r1, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500c:	4b7e      	ldr	r3, [pc, #504]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800500e:	430a      	orrs	r2, r1
 8005010:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2220      	movs	r2, #32
 8005018:	4013      	ands	r3, r2
 800501a:	d009      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800501c:	4b7a      	ldr	r3, [pc, #488]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800501e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005020:	4a7f      	ldr	r2, [pc, #508]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005022:	4013      	ands	r3, r2
 8005024:	0019      	movs	r1, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	4b77      	ldr	r3, [pc, #476]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800502c:	430a      	orrs	r2, r1
 800502e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2240      	movs	r2, #64	; 0x40
 8005036:	4013      	ands	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800503a:	4b73      	ldr	r3, [pc, #460]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	4a79      	ldr	r2, [pc, #484]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005040:	4013      	ands	r3, r2
 8005042:	0019      	movs	r1, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	4b6f      	ldr	r3, [pc, #444]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800504a:	430a      	orrs	r2, r1
 800504c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	01db      	lsls	r3, r3, #7
 8005056:	4013      	ands	r3, r2
 8005058:	d015      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800505a:	4b6b      	ldr	r3, [pc, #428]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800505c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	0899      	lsrs	r1, r3, #2
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005066:	4b68      	ldr	r3, [pc, #416]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005068:	430a      	orrs	r2, r1
 800506a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	05db      	lsls	r3, r3, #23
 8005074:	429a      	cmp	r2, r3
 8005076:	d106      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005078:	4b63      	ldr	r3, [pc, #396]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	4b62      	ldr	r3, [pc, #392]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800507e:	2180      	movs	r1, #128	; 0x80
 8005080:	0249      	lsls	r1, r1, #9
 8005082:	430a      	orrs	r2, r1
 8005084:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	2380      	movs	r3, #128	; 0x80
 800508c:	031b      	lsls	r3, r3, #12
 800508e:	4013      	ands	r3, r2
 8005090:	d009      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005092:	4b5d      	ldr	r3, [pc, #372]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	2240      	movs	r2, #64	; 0x40
 8005098:	4393      	bics	r3, r2
 800509a:	0019      	movs	r1, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a0:	4b59      	ldr	r3, [pc, #356]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050a2:	430a      	orrs	r2, r1
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	2380      	movs	r3, #128	; 0x80
 80050ac:	039b      	lsls	r3, r3, #14
 80050ae:	4013      	ands	r3, r2
 80050b0:	d016      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80050b2:	4b55      	ldr	r3, [pc, #340]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b6:	4a5c      	ldr	r2, [pc, #368]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	0019      	movs	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050c0:	4b51      	ldr	r3, [pc, #324]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050c2:	430a      	orrs	r2, r1
 80050c4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ca:	2380      	movs	r3, #128	; 0x80
 80050cc:	03db      	lsls	r3, r3, #15
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d106      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80050d2:	4b4d      	ldr	r3, [pc, #308]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	4b4c      	ldr	r3, [pc, #304]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050d8:	2180      	movs	r1, #128	; 0x80
 80050da:	0449      	lsls	r1, r1, #17
 80050dc:	430a      	orrs	r2, r1
 80050de:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	2380      	movs	r3, #128	; 0x80
 80050e6:	03db      	lsls	r3, r3, #15
 80050e8:	4013      	ands	r3, r2
 80050ea:	d016      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80050ec:	4b46      	ldr	r3, [pc, #280]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f0:	4a4e      	ldr	r2, [pc, #312]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	0019      	movs	r1, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050fa:	4b43      	ldr	r3, [pc, #268]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050fc:	430a      	orrs	r2, r1
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005104:	2380      	movs	r3, #128	; 0x80
 8005106:	045b      	lsls	r3, r3, #17
 8005108:	429a      	cmp	r2, r3
 800510a:	d106      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800510c:	4b3e      	ldr	r3, [pc, #248]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	4b3d      	ldr	r3, [pc, #244]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005112:	2180      	movs	r1, #128	; 0x80
 8005114:	0449      	lsls	r1, r1, #17
 8005116:	430a      	orrs	r2, r1
 8005118:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	2380      	movs	r3, #128	; 0x80
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	4013      	ands	r3, r2
 8005124:	d014      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005126:	4b38      	ldr	r3, [pc, #224]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512a:	2203      	movs	r2, #3
 800512c:	4393      	bics	r3, r2
 800512e:	0019      	movs	r1, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a1a      	ldr	r2, [r3, #32]
 8005134:	4b34      	ldr	r3, [pc, #208]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005136:	430a      	orrs	r2, r1
 8005138:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d106      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005142:	4b31      	ldr	r3, [pc, #196]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	4b30      	ldr	r3, [pc, #192]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005148:	2180      	movs	r1, #128	; 0x80
 800514a:	0249      	lsls	r1, r1, #9
 800514c:	430a      	orrs	r2, r1
 800514e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	019b      	lsls	r3, r3, #6
 8005158:	4013      	ands	r3, r2
 800515a:	d014      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800515c:	4b2a      	ldr	r3, [pc, #168]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005160:	220c      	movs	r2, #12
 8005162:	4393      	bics	r3, r2
 8005164:	0019      	movs	r1, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800516a:	4b27      	ldr	r3, [pc, #156]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800516c:	430a      	orrs	r2, r1
 800516e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	2b04      	cmp	r3, #4
 8005176:	d106      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005178:	4b23      	ldr	r3, [pc, #140]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	4b22      	ldr	r3, [pc, #136]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800517e:	2180      	movs	r1, #128	; 0x80
 8005180:	0249      	lsls	r1, r1, #9
 8005182:	430a      	orrs	r2, r1
 8005184:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	2380      	movs	r3, #128	; 0x80
 800518c:	045b      	lsls	r3, r3, #17
 800518e:	4013      	ands	r3, r2
 8005190:	d016      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005192:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005196:	4a22      	ldr	r2, [pc, #136]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005198:	4013      	ands	r3, r2
 800519a:	0019      	movs	r1, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051a0:	4b19      	ldr	r3, [pc, #100]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051a2:	430a      	orrs	r2, r1
 80051a4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051aa:	2380      	movs	r3, #128	; 0x80
 80051ac:	019b      	lsls	r3, r3, #6
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d106      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80051b2:	4b15      	ldr	r3, [pc, #84]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	4b14      	ldr	r3, [pc, #80]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051b8:	2180      	movs	r1, #128	; 0x80
 80051ba:	0449      	lsls	r1, r1, #17
 80051bc:	430a      	orrs	r2, r1
 80051be:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	2380      	movs	r3, #128	; 0x80
 80051c6:	049b      	lsls	r3, r3, #18
 80051c8:	4013      	ands	r3, r2
 80051ca:	d016      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051cc:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d0:	4a10      	ldr	r2, [pc, #64]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	0019      	movs	r1, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051da:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051dc:	430a      	orrs	r2, r1
 80051de:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051e4:	2380      	movs	r3, #128	; 0x80
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d106      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	4b05      	ldr	r3, [pc, #20]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051f2:	2180      	movs	r1, #128	; 0x80
 80051f4:	0449      	lsls	r1, r1, #17
 80051f6:	430a      	orrs	r2, r1
 80051f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80051fa:	2312      	movs	r3, #18
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	781b      	ldrb	r3, [r3, #0]
}
 8005200:	0018      	movs	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	b006      	add	sp, #24
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40021000 	.word	0x40021000
 800520c:	efffffff 	.word	0xefffffff
 8005210:	fffff3ff 	.word	0xfffff3ff
 8005214:	fffffcff 	.word	0xfffffcff
 8005218:	fff3ffff 	.word	0xfff3ffff
 800521c:	ffcfffff 	.word	0xffcfffff
 8005220:	ffffcfff 	.word	0xffffcfff
 8005224:	ffff3fff 	.word	0xffff3fff
 8005228:	ffbfffff 	.word	0xffbfffff
 800522c:	feffffff 	.word	0xfeffffff

08005230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e04a      	b.n	80052d8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	223d      	movs	r2, #61	; 0x3d
 8005246:	5c9b      	ldrb	r3, [r3, r2]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d107      	bne.n	800525e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	223c      	movs	r2, #60	; 0x3c
 8005252:	2100      	movs	r1, #0
 8005254:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	0018      	movs	r0, r3
 800525a:	f7fe f89d 	bl	8003398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	223d      	movs	r2, #61	; 0x3d
 8005262:	2102      	movs	r1, #2
 8005264:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3304      	adds	r3, #4
 800526e:	0019      	movs	r1, r3
 8005270:	0010      	movs	r0, r2
 8005272:	f000 fa57 	bl	8005724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2248      	movs	r2, #72	; 0x48
 800527a:	2101      	movs	r1, #1
 800527c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	223e      	movs	r2, #62	; 0x3e
 8005282:	2101      	movs	r1, #1
 8005284:	5499      	strb	r1, [r3, r2]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	223f      	movs	r2, #63	; 0x3f
 800528a:	2101      	movs	r1, #1
 800528c:	5499      	strb	r1, [r3, r2]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2240      	movs	r2, #64	; 0x40
 8005292:	2101      	movs	r1, #1
 8005294:	5499      	strb	r1, [r3, r2]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2241      	movs	r2, #65	; 0x41
 800529a:	2101      	movs	r1, #1
 800529c:	5499      	strb	r1, [r3, r2]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2242      	movs	r2, #66	; 0x42
 80052a2:	2101      	movs	r1, #1
 80052a4:	5499      	strb	r1, [r3, r2]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2243      	movs	r2, #67	; 0x43
 80052aa:	2101      	movs	r1, #1
 80052ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2244      	movs	r2, #68	; 0x44
 80052b2:	2101      	movs	r1, #1
 80052b4:	5499      	strb	r1, [r3, r2]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2245      	movs	r2, #69	; 0x45
 80052ba:	2101      	movs	r1, #1
 80052bc:	5499      	strb	r1, [r3, r2]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2246      	movs	r2, #70	; 0x46
 80052c2:	2101      	movs	r1, #1
 80052c4:	5499      	strb	r1, [r3, r2]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2247      	movs	r2, #71	; 0x47
 80052ca:	2101      	movs	r1, #1
 80052cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	223d      	movs	r2, #61	; 0x3d
 80052d2:	2101      	movs	r1, #1
 80052d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	0018      	movs	r0, r3
 80052da:	46bd      	mov	sp, r7
 80052dc:	b002      	add	sp, #8
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e04a      	b.n	8005388 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	223d      	movs	r2, #61	; 0x3d
 80052f6:	5c9b      	ldrb	r3, [r3, r2]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d107      	bne.n	800530e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	223c      	movs	r2, #60	; 0x3c
 8005302:	2100      	movs	r1, #0
 8005304:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	0018      	movs	r0, r3
 800530a:	f000 f841 	bl	8005390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	223d      	movs	r2, #61	; 0x3d
 8005312:	2102      	movs	r1, #2
 8005314:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3304      	adds	r3, #4
 800531e:	0019      	movs	r1, r3
 8005320:	0010      	movs	r0, r2
 8005322:	f000 f9ff 	bl	8005724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2248      	movs	r2, #72	; 0x48
 800532a:	2101      	movs	r1, #1
 800532c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	223e      	movs	r2, #62	; 0x3e
 8005332:	2101      	movs	r1, #1
 8005334:	5499      	strb	r1, [r3, r2]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	223f      	movs	r2, #63	; 0x3f
 800533a:	2101      	movs	r1, #1
 800533c:	5499      	strb	r1, [r3, r2]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2240      	movs	r2, #64	; 0x40
 8005342:	2101      	movs	r1, #1
 8005344:	5499      	strb	r1, [r3, r2]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2241      	movs	r2, #65	; 0x41
 800534a:	2101      	movs	r1, #1
 800534c:	5499      	strb	r1, [r3, r2]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2242      	movs	r2, #66	; 0x42
 8005352:	2101      	movs	r1, #1
 8005354:	5499      	strb	r1, [r3, r2]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2243      	movs	r2, #67	; 0x43
 800535a:	2101      	movs	r1, #1
 800535c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2244      	movs	r2, #68	; 0x44
 8005362:	2101      	movs	r1, #1
 8005364:	5499      	strb	r1, [r3, r2]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2245      	movs	r2, #69	; 0x45
 800536a:	2101      	movs	r1, #1
 800536c:	5499      	strb	r1, [r3, r2]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2246      	movs	r2, #70	; 0x46
 8005372:	2101      	movs	r1, #1
 8005374:	5499      	strb	r1, [r3, r2]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2247      	movs	r2, #71	; 0x47
 800537a:	2101      	movs	r1, #1
 800537c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	223d      	movs	r2, #61	; 0x3d
 8005382:	2101      	movs	r1, #1
 8005384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	0018      	movs	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	b002      	add	sp, #8
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005398:	46c0      	nop			; (mov r8, r8)
 800539a:	46bd      	mov	sp, r7
 800539c:	b002      	add	sp, #8
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	223c      	movs	r2, #60	; 0x3c
 80053b0:	5c9b      	ldrb	r3, [r3, r2]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e0df      	b.n	800557a <HAL_TIM_PWM_ConfigChannel+0x1da>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	223c      	movs	r2, #60	; 0x3c
 80053be:	2101      	movs	r1, #1
 80053c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b14      	cmp	r3, #20
 80053c6:	d900      	bls.n	80053ca <HAL_TIM_PWM_ConfigChannel+0x2a>
 80053c8:	e0d1      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	009a      	lsls	r2, r3, #2
 80053ce:	4b6d      	ldr	r3, [pc, #436]	; (8005584 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80053d0:	18d3      	adds	r3, r2, r3
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	0011      	movs	r1, r2
 80053de:	0018      	movs	r0, r3
 80053e0:	f000 fa2a 	bl	8005838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2108      	movs	r1, #8
 80053f0:	430a      	orrs	r2, r1
 80053f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699a      	ldr	r2, [r3, #24]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2104      	movs	r1, #4
 8005400:	438a      	bics	r2, r1
 8005402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6999      	ldr	r1, [r3, #24]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	619a      	str	r2, [r3, #24]
      break;
 8005416:	e0ab      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	0011      	movs	r1, r2
 8005420:	0018      	movs	r0, r3
 8005422:	f000 fa93 	bl	800594c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699a      	ldr	r2, [r3, #24]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2180      	movs	r1, #128	; 0x80
 8005432:	0109      	lsls	r1, r1, #4
 8005434:	430a      	orrs	r2, r1
 8005436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4951      	ldr	r1, [pc, #324]	; (8005588 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8005444:	400a      	ands	r2, r1
 8005446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6999      	ldr	r1, [r3, #24]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	021a      	lsls	r2, r3, #8
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	619a      	str	r2, [r3, #24]
      break;
 800545c:	e088      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	0011      	movs	r1, r2
 8005466:	0018      	movs	r0, r3
 8005468:	f000 faf4 	bl	8005a54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2108      	movs	r1, #8
 8005478:	430a      	orrs	r2, r1
 800547a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69da      	ldr	r2, [r3, #28]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2104      	movs	r1, #4
 8005488:	438a      	bics	r2, r1
 800548a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69d9      	ldr	r1, [r3, #28]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	61da      	str	r2, [r3, #28]
      break;
 800549e:	e067      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	0011      	movs	r1, r2
 80054a8:	0018      	movs	r0, r3
 80054aa:	f000 fb5b 	bl	8005b64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2180      	movs	r1, #128	; 0x80
 80054ba:	0109      	lsls	r1, r1, #4
 80054bc:	430a      	orrs	r2, r1
 80054be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69da      	ldr	r2, [r3, #28]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	492f      	ldr	r1, [pc, #188]	; (8005588 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80054cc:	400a      	ands	r2, r1
 80054ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69d9      	ldr	r1, [r3, #28]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	021a      	lsls	r2, r3, #8
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	61da      	str	r2, [r3, #28]
      break;
 80054e4:	e044      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	0011      	movs	r1, r2
 80054ee:	0018      	movs	r0, r3
 80054f0:	f000 fba2 	bl	8005c38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2108      	movs	r1, #8
 8005500:	430a      	orrs	r2, r1
 8005502:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2104      	movs	r1, #4
 8005510:	438a      	bics	r2, r1
 8005512:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005526:	e023      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	0011      	movs	r1, r2
 8005530:	0018      	movs	r0, r3
 8005532:	f000 fbe1 	bl	8005cf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2180      	movs	r1, #128	; 0x80
 8005542:	0109      	lsls	r1, r1, #4
 8005544:	430a      	orrs	r2, r1
 8005546:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	490d      	ldr	r1, [pc, #52]	; (8005588 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8005554:	400a      	ands	r2, r1
 8005556:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	021a      	lsls	r2, r3, #8
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800556c:	e000      	b.n	8005570 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800556e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	223c      	movs	r2, #60	; 0x3c
 8005574:	2100      	movs	r1, #0
 8005576:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	0018      	movs	r0, r3
 800557c:	46bd      	mov	sp, r7
 800557e:	b004      	add	sp, #16
 8005580:	bd80      	pop	{r7, pc}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	080075d0 	.word	0x080075d0
 8005588:	fffffbff 	.word	0xfffffbff

0800558c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	223c      	movs	r2, #60	; 0x3c
 800559a:	5c9b      	ldrb	r3, [r3, r2]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_TIM_ConfigClockSource+0x18>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e0b7      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x188>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	223c      	movs	r2, #60	; 0x3c
 80055a8:	2101      	movs	r1, #1
 80055aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	223d      	movs	r2, #61	; 0x3d
 80055b0:	2102      	movs	r1, #2
 80055b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a57      	ldr	r2, [pc, #348]	; (800571c <HAL_TIM_ConfigClockSource+0x190>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4a56      	ldr	r2, [pc, #344]	; (8005720 <HAL_TIM_ConfigClockSource+0x194>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2280      	movs	r2, #128	; 0x80
 80055da:	0192      	lsls	r2, r2, #6
 80055dc:	4293      	cmp	r3, r2
 80055de:	d040      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0xd6>
 80055e0:	2280      	movs	r2, #128	; 0x80
 80055e2:	0192      	lsls	r2, r2, #6
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d900      	bls.n	80055ea <HAL_TIM_ConfigClockSource+0x5e>
 80055e8:	e088      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x170>
 80055ea:	2280      	movs	r2, #128	; 0x80
 80055ec:	0152      	lsls	r2, r2, #5
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d100      	bne.n	80055f4 <HAL_TIM_ConfigClockSource+0x68>
 80055f2:	e085      	b.n	8005700 <HAL_TIM_ConfigClockSource+0x174>
 80055f4:	2280      	movs	r2, #128	; 0x80
 80055f6:	0152      	lsls	r2, r2, #5
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d900      	bls.n	80055fe <HAL_TIM_ConfigClockSource+0x72>
 80055fc:	e07e      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x170>
 80055fe:	2b70      	cmp	r3, #112	; 0x70
 8005600:	d018      	beq.n	8005634 <HAL_TIM_ConfigClockSource+0xa8>
 8005602:	d900      	bls.n	8005606 <HAL_TIM_ConfigClockSource+0x7a>
 8005604:	e07a      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x170>
 8005606:	2b60      	cmp	r3, #96	; 0x60
 8005608:	d04f      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x11e>
 800560a:	d900      	bls.n	800560e <HAL_TIM_ConfigClockSource+0x82>
 800560c:	e076      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x170>
 800560e:	2b50      	cmp	r3, #80	; 0x50
 8005610:	d03b      	beq.n	800568a <HAL_TIM_ConfigClockSource+0xfe>
 8005612:	d900      	bls.n	8005616 <HAL_TIM_ConfigClockSource+0x8a>
 8005614:	e072      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x170>
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d057      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x13e>
 800561a:	d900      	bls.n	800561e <HAL_TIM_ConfigClockSource+0x92>
 800561c:	e06e      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x170>
 800561e:	2b30      	cmp	r3, #48	; 0x30
 8005620:	d063      	beq.n	80056ea <HAL_TIM_ConfigClockSource+0x15e>
 8005622:	d86b      	bhi.n	80056fc <HAL_TIM_ConfigClockSource+0x170>
 8005624:	2b20      	cmp	r3, #32
 8005626:	d060      	beq.n	80056ea <HAL_TIM_ConfigClockSource+0x15e>
 8005628:	d868      	bhi.n	80056fc <HAL_TIM_ConfigClockSource+0x170>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d05d      	beq.n	80056ea <HAL_TIM_ConfigClockSource+0x15e>
 800562e:	2b10      	cmp	r3, #16
 8005630:	d05b      	beq.n	80056ea <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005632:	e063      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	6899      	ldr	r1, [r3, #8]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f000 fc38 	bl	8005eb8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2277      	movs	r2, #119	; 0x77
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	609a      	str	r2, [r3, #8]
      break;
 8005660:	e04f      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6899      	ldr	r1, [r3, #8]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f000 fc21 	bl	8005eb8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2180      	movs	r1, #128	; 0x80
 8005682:	01c9      	lsls	r1, r1, #7
 8005684:	430a      	orrs	r2, r1
 8005686:	609a      	str	r2, [r3, #8]
      break;
 8005688:	e03b      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6859      	ldr	r1, [r3, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	001a      	movs	r2, r3
 8005698:	f000 fb92 	bl	8005dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2150      	movs	r1, #80	; 0x50
 80056a2:	0018      	movs	r0, r3
 80056a4:	f000 fbec 	bl	8005e80 <TIM_ITRx_SetConfig>
      break;
 80056a8:	e02b      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6859      	ldr	r1, [r3, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	001a      	movs	r2, r3
 80056b8:	f000 fbb0 	bl	8005e1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2160      	movs	r1, #96	; 0x60
 80056c2:	0018      	movs	r0, r3
 80056c4:	f000 fbdc 	bl	8005e80 <TIM_ITRx_SetConfig>
      break;
 80056c8:	e01b      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6818      	ldr	r0, [r3, #0]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	6859      	ldr	r1, [r3, #4]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	001a      	movs	r2, r3
 80056d8:	f000 fb72 	bl	8005dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2140      	movs	r1, #64	; 0x40
 80056e2:	0018      	movs	r0, r3
 80056e4:	f000 fbcc 	bl	8005e80 <TIM_ITRx_SetConfig>
      break;
 80056e8:	e00b      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	0019      	movs	r1, r3
 80056f4:	0010      	movs	r0, r2
 80056f6:	f000 fbc3 	bl	8005e80 <TIM_ITRx_SetConfig>
        break;
 80056fa:	e002      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80056fc:	46c0      	nop			; (mov r8, r8)
 80056fe:	e000      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005700:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	223d      	movs	r2, #61	; 0x3d
 8005706:	2101      	movs	r1, #1
 8005708:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	223c      	movs	r2, #60	; 0x3c
 800570e:	2100      	movs	r1, #0
 8005710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	0018      	movs	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	b004      	add	sp, #16
 800571a:	bd80      	pop	{r7, pc}
 800571c:	ffceff88 	.word	0xffceff88
 8005720:	ffff00ff 	.word	0xffff00ff

08005724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a38      	ldr	r2, [pc, #224]	; (8005818 <TIM_Base_SetConfig+0xf4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00c      	beq.n	8005756 <TIM_Base_SetConfig+0x32>
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	2380      	movs	r3, #128	; 0x80
 8005740:	05db      	lsls	r3, r3, #23
 8005742:	429a      	cmp	r2, r3
 8005744:	d007      	beq.n	8005756 <TIM_Base_SetConfig+0x32>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a34      	ldr	r2, [pc, #208]	; (800581c <TIM_Base_SetConfig+0xf8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_Base_SetConfig+0x32>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a33      	ldr	r2, [pc, #204]	; (8005820 <TIM_Base_SetConfig+0xfc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d108      	bne.n	8005768 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2270      	movs	r2, #112	; 0x70
 800575a:	4393      	bics	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a2b      	ldr	r2, [pc, #172]	; (8005818 <TIM_Base_SetConfig+0xf4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d01c      	beq.n	80057aa <TIM_Base_SetConfig+0x86>
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	2380      	movs	r3, #128	; 0x80
 8005774:	05db      	lsls	r3, r3, #23
 8005776:	429a      	cmp	r2, r3
 8005778:	d017      	beq.n	80057aa <TIM_Base_SetConfig+0x86>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a27      	ldr	r2, [pc, #156]	; (800581c <TIM_Base_SetConfig+0xf8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d013      	beq.n	80057aa <TIM_Base_SetConfig+0x86>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a26      	ldr	r2, [pc, #152]	; (8005820 <TIM_Base_SetConfig+0xfc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00f      	beq.n	80057aa <TIM_Base_SetConfig+0x86>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a25      	ldr	r2, [pc, #148]	; (8005824 <TIM_Base_SetConfig+0x100>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00b      	beq.n	80057aa <TIM_Base_SetConfig+0x86>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a24      	ldr	r2, [pc, #144]	; (8005828 <TIM_Base_SetConfig+0x104>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d007      	beq.n	80057aa <TIM_Base_SetConfig+0x86>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a23      	ldr	r2, [pc, #140]	; (800582c <TIM_Base_SetConfig+0x108>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d003      	beq.n	80057aa <TIM_Base_SetConfig+0x86>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a22      	ldr	r2, [pc, #136]	; (8005830 <TIM_Base_SetConfig+0x10c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d108      	bne.n	80057bc <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4a21      	ldr	r2, [pc, #132]	; (8005834 <TIM_Base_SetConfig+0x110>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2280      	movs	r2, #128	; 0x80
 80057c0:	4393      	bics	r3, r2
 80057c2:	001a      	movs	r2, r3
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a0c      	ldr	r2, [pc, #48]	; (8005818 <TIM_Base_SetConfig+0xf4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00b      	beq.n	8005802 <TIM_Base_SetConfig+0xde>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a0e      	ldr	r2, [pc, #56]	; (8005828 <TIM_Base_SetConfig+0x104>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d007      	beq.n	8005802 <TIM_Base_SetConfig+0xde>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a0d      	ldr	r2, [pc, #52]	; (800582c <TIM_Base_SetConfig+0x108>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d003      	beq.n	8005802 <TIM_Base_SetConfig+0xde>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a0c      	ldr	r2, [pc, #48]	; (8005830 <TIM_Base_SetConfig+0x10c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d103      	bne.n	800580a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	615a      	str	r2, [r3, #20]
}
 8005810:	46c0      	nop			; (mov r8, r8)
 8005812:	46bd      	mov	sp, r7
 8005814:	b004      	add	sp, #16
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40012c00 	.word	0x40012c00
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40002000 	.word	0x40002000
 8005828:	40014000 	.word	0x40014000
 800582c:	40014400 	.word	0x40014400
 8005830:	40014800 	.word	0x40014800
 8005834:	fffffcff 	.word	0xfffffcff

08005838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	2201      	movs	r2, #1
 8005848:	4393      	bics	r3, r2
 800584a:	001a      	movs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4a32      	ldr	r2, [pc, #200]	; (8005930 <TIM_OC1_SetConfig+0xf8>)
 8005866:	4013      	ands	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2203      	movs	r2, #3
 800586e:	4393      	bics	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2202      	movs	r2, #2
 8005880:	4393      	bics	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a28      	ldr	r2, [pc, #160]	; (8005934 <TIM_OC1_SetConfig+0xfc>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00b      	beq.n	80058ae <TIM_OC1_SetConfig+0x76>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a27      	ldr	r2, [pc, #156]	; (8005938 <TIM_OC1_SetConfig+0x100>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d007      	beq.n	80058ae <TIM_OC1_SetConfig+0x76>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a26      	ldr	r2, [pc, #152]	; (800593c <TIM_OC1_SetConfig+0x104>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d003      	beq.n	80058ae <TIM_OC1_SetConfig+0x76>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a25      	ldr	r2, [pc, #148]	; (8005940 <TIM_OC1_SetConfig+0x108>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d10c      	bne.n	80058c8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2208      	movs	r2, #8
 80058b2:	4393      	bics	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2204      	movs	r2, #4
 80058c4:	4393      	bics	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a1a      	ldr	r2, [pc, #104]	; (8005934 <TIM_OC1_SetConfig+0xfc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00b      	beq.n	80058e8 <TIM_OC1_SetConfig+0xb0>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a19      	ldr	r2, [pc, #100]	; (8005938 <TIM_OC1_SetConfig+0x100>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_OC1_SetConfig+0xb0>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a18      	ldr	r2, [pc, #96]	; (800593c <TIM_OC1_SetConfig+0x104>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_OC1_SetConfig+0xb0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a17      	ldr	r2, [pc, #92]	; (8005940 <TIM_OC1_SetConfig+0x108>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d111      	bne.n	800590c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	4a16      	ldr	r2, [pc, #88]	; (8005944 <TIM_OC1_SetConfig+0x10c>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	4a15      	ldr	r2, [pc, #84]	; (8005948 <TIM_OC1_SetConfig+0x110>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	621a      	str	r2, [r3, #32]
}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	46bd      	mov	sp, r7
 800592a:	b006      	add	sp, #24
 800592c:	bd80      	pop	{r7, pc}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	fffeff8f 	.word	0xfffeff8f
 8005934:	40012c00 	.word	0x40012c00
 8005938:	40014000 	.word	0x40014000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800
 8005944:	fffffeff 	.word	0xfffffeff
 8005948:	fffffdff 	.word	0xfffffdff

0800594c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	2210      	movs	r2, #16
 800595c:	4393      	bics	r3, r2
 800595e:	001a      	movs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	4a2e      	ldr	r2, [pc, #184]	; (8005a34 <TIM_OC2_SetConfig+0xe8>)
 800597a:	4013      	ands	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4a2d      	ldr	r2, [pc, #180]	; (8005a38 <TIM_OC2_SetConfig+0xec>)
 8005982:	4013      	ands	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2220      	movs	r2, #32
 8005996:	4393      	bics	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a24      	ldr	r2, [pc, #144]	; (8005a3c <TIM_OC2_SetConfig+0xf0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d10d      	bne.n	80059ca <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2280      	movs	r2, #128	; 0x80
 80059b2:	4393      	bics	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2240      	movs	r2, #64	; 0x40
 80059c6:	4393      	bics	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1b      	ldr	r2, [pc, #108]	; (8005a3c <TIM_OC2_SetConfig+0xf0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00b      	beq.n	80059ea <TIM_OC2_SetConfig+0x9e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1a      	ldr	r2, [pc, #104]	; (8005a40 <TIM_OC2_SetConfig+0xf4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d007      	beq.n	80059ea <TIM_OC2_SetConfig+0x9e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a19      	ldr	r2, [pc, #100]	; (8005a44 <TIM_OC2_SetConfig+0xf8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d003      	beq.n	80059ea <TIM_OC2_SetConfig+0x9e>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a18      	ldr	r2, [pc, #96]	; (8005a48 <TIM_OC2_SetConfig+0xfc>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d113      	bne.n	8005a12 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <TIM_OC2_SetConfig+0x100>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <TIM_OC2_SetConfig+0x104>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	621a      	str	r2, [r3, #32]
}
 8005a2c:	46c0      	nop			; (mov r8, r8)
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b006      	add	sp, #24
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	feff8fff 	.word	0xfeff8fff
 8005a38:	fffffcff 	.word	0xfffffcff
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40014000 	.word	0x40014000
 8005a44:	40014400 	.word	0x40014400
 8005a48:	40014800 	.word	0x40014800
 8005a4c:	fffffbff 	.word	0xfffffbff
 8005a50:	fffff7ff 	.word	0xfffff7ff

08005a54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	4a35      	ldr	r2, [pc, #212]	; (8005b38 <TIM_OC3_SetConfig+0xe4>)
 8005a64:	401a      	ands	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4a2f      	ldr	r2, [pc, #188]	; (8005b3c <TIM_OC3_SetConfig+0xe8>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2203      	movs	r2, #3
 8005a88:	4393      	bics	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	4a29      	ldr	r2, [pc, #164]	; (8005b40 <TIM_OC3_SetConfig+0xec>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a25      	ldr	r2, [pc, #148]	; (8005b44 <TIM_OC3_SetConfig+0xf0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d10d      	bne.n	8005ace <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	4a24      	ldr	r2, [pc, #144]	; (8005b48 <TIM_OC3_SetConfig+0xf4>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	021b      	lsls	r3, r3, #8
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	4a20      	ldr	r2, [pc, #128]	; (8005b4c <TIM_OC3_SetConfig+0xf8>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a1c      	ldr	r2, [pc, #112]	; (8005b44 <TIM_OC3_SetConfig+0xf0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00b      	beq.n	8005aee <TIM_OC3_SetConfig+0x9a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a1d      	ldr	r2, [pc, #116]	; (8005b50 <TIM_OC3_SetConfig+0xfc>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d007      	beq.n	8005aee <TIM_OC3_SetConfig+0x9a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <TIM_OC3_SetConfig+0x100>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d003      	beq.n	8005aee <TIM_OC3_SetConfig+0x9a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <TIM_OC3_SetConfig+0x104>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d113      	bne.n	8005b16 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	4a1a      	ldr	r2, [pc, #104]	; (8005b5c <TIM_OC3_SetConfig+0x108>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	4a19      	ldr	r2, [pc, #100]	; (8005b60 <TIM_OC3_SetConfig+0x10c>)
 8005afa:	4013      	ands	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	621a      	str	r2, [r3, #32]
}
 8005b30:	46c0      	nop			; (mov r8, r8)
 8005b32:	46bd      	mov	sp, r7
 8005b34:	b006      	add	sp, #24
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	fffffeff 	.word	0xfffffeff
 8005b3c:	fffeff8f 	.word	0xfffeff8f
 8005b40:	fffffdff 	.word	0xfffffdff
 8005b44:	40012c00 	.word	0x40012c00
 8005b48:	fffff7ff 	.word	0xfffff7ff
 8005b4c:	fffffbff 	.word	0xfffffbff
 8005b50:	40014000 	.word	0x40014000
 8005b54:	40014400 	.word	0x40014400
 8005b58:	40014800 	.word	0x40014800
 8005b5c:	ffffefff 	.word	0xffffefff
 8005b60:	ffffdfff 	.word	0xffffdfff

08005b64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	4a28      	ldr	r2, [pc, #160]	; (8005c14 <TIM_OC4_SetConfig+0xb0>)
 8005b74:	401a      	ands	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4a22      	ldr	r2, [pc, #136]	; (8005c18 <TIM_OC4_SetConfig+0xb4>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4a21      	ldr	r2, [pc, #132]	; (8005c1c <TIM_OC4_SetConfig+0xb8>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4a1d      	ldr	r2, [pc, #116]	; (8005c20 <TIM_OC4_SetConfig+0xbc>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	031b      	lsls	r3, r3, #12
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a19      	ldr	r2, [pc, #100]	; (8005c24 <TIM_OC4_SetConfig+0xc0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00b      	beq.n	8005bdc <TIM_OC4_SetConfig+0x78>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a18      	ldr	r2, [pc, #96]	; (8005c28 <TIM_OC4_SetConfig+0xc4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d007      	beq.n	8005bdc <TIM_OC4_SetConfig+0x78>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <TIM_OC4_SetConfig+0xc8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_OC4_SetConfig+0x78>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a16      	ldr	r2, [pc, #88]	; (8005c30 <TIM_OC4_SetConfig+0xcc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d109      	bne.n	8005bf0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	4a15      	ldr	r2, [pc, #84]	; (8005c34 <TIM_OC4_SetConfig+0xd0>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	019b      	lsls	r3, r3, #6
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	b006      	add	sp, #24
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	ffffefff 	.word	0xffffefff
 8005c18:	feff8fff 	.word	0xfeff8fff
 8005c1c:	fffffcff 	.word	0xfffffcff
 8005c20:	ffffdfff 	.word	0xffffdfff
 8005c24:	40012c00 	.word	0x40012c00
 8005c28:	40014000 	.word	0x40014000
 8005c2c:	40014400 	.word	0x40014400
 8005c30:	40014800 	.word	0x40014800
 8005c34:	ffffbfff 	.word	0xffffbfff

08005c38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	4a25      	ldr	r2, [pc, #148]	; (8005cdc <TIM_OC5_SetConfig+0xa4>)
 8005c48:	401a      	ands	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4a1f      	ldr	r2, [pc, #124]	; (8005ce0 <TIM_OC5_SetConfig+0xa8>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4a1b      	ldr	r2, [pc, #108]	; (8005ce4 <TIM_OC5_SetConfig+0xac>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	041b      	lsls	r3, r3, #16
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a17      	ldr	r2, [pc, #92]	; (8005ce8 <TIM_OC5_SetConfig+0xb0>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d00b      	beq.n	8005ca6 <TIM_OC5_SetConfig+0x6e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a16      	ldr	r2, [pc, #88]	; (8005cec <TIM_OC5_SetConfig+0xb4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d007      	beq.n	8005ca6 <TIM_OC5_SetConfig+0x6e>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a15      	ldr	r2, [pc, #84]	; (8005cf0 <TIM_OC5_SetConfig+0xb8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d003      	beq.n	8005ca6 <TIM_OC5_SetConfig+0x6e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <TIM_OC5_SetConfig+0xbc>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d109      	bne.n	8005cba <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4a0c      	ldr	r2, [pc, #48]	; (8005cdc <TIM_OC5_SetConfig+0xa4>)
 8005caa:	4013      	ands	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	621a      	str	r2, [r3, #32]
}
 8005cd4:	46c0      	nop			; (mov r8, r8)
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	b006      	add	sp, #24
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	fffeffff 	.word	0xfffeffff
 8005ce0:	fffeff8f 	.word	0xfffeff8f
 8005ce4:	fffdffff 	.word	0xfffdffff
 8005ce8:	40012c00 	.word	0x40012c00
 8005cec:	40014000 	.word	0x40014000
 8005cf0:	40014400 	.word	0x40014400
 8005cf4:	40014800 	.word	0x40014800

08005cf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	4a26      	ldr	r2, [pc, #152]	; (8005da0 <TIM_OC6_SetConfig+0xa8>)
 8005d08:	401a      	ands	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a20      	ldr	r2, [pc, #128]	; (8005da4 <TIM_OC6_SetConfig+0xac>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	021b      	lsls	r3, r3, #8
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4a1c      	ldr	r2, [pc, #112]	; (8005da8 <TIM_OC6_SetConfig+0xb0>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	051b      	lsls	r3, r3, #20
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a18      	ldr	r2, [pc, #96]	; (8005dac <TIM_OC6_SetConfig+0xb4>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00b      	beq.n	8005d68 <TIM_OC6_SetConfig+0x70>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a17      	ldr	r2, [pc, #92]	; (8005db0 <TIM_OC6_SetConfig+0xb8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d007      	beq.n	8005d68 <TIM_OC6_SetConfig+0x70>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a16      	ldr	r2, [pc, #88]	; (8005db4 <TIM_OC6_SetConfig+0xbc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC6_SetConfig+0x70>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a15      	ldr	r2, [pc, #84]	; (8005db8 <TIM_OC6_SetConfig+0xc0>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d109      	bne.n	8005d7c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	4a14      	ldr	r2, [pc, #80]	; (8005dbc <TIM_OC6_SetConfig+0xc4>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	029b      	lsls	r3, r3, #10
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	621a      	str	r2, [r3, #32]
}
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	b006      	add	sp, #24
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	46c0      	nop			; (mov r8, r8)
 8005da0:	ffefffff 	.word	0xffefffff
 8005da4:	feff8fff 	.word	0xfeff8fff
 8005da8:	ffdfffff 	.word	0xffdfffff
 8005dac:	40012c00 	.word	0x40012c00
 8005db0:	40014000 	.word	0x40014000
 8005db4:	40014400 	.word	0x40014400
 8005db8:	40014800 	.word	0x40014800
 8005dbc:	fffbffff 	.word	0xfffbffff

08005dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	4393      	bics	r3, r2
 8005dda:	001a      	movs	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	22f0      	movs	r2, #240	; 0xf0
 8005dea:	4393      	bics	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	220a      	movs	r2, #10
 8005dfc:	4393      	bics	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	621a      	str	r2, [r3, #32]
}
 8005e14:	46c0      	nop			; (mov r8, r8)
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b006      	add	sp, #24
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	2210      	movs	r2, #16
 8005e2e:	4393      	bics	r3, r2
 8005e30:	001a      	movs	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	4a0d      	ldr	r2, [pc, #52]	; (8005e7c <TIM_TI2_ConfigInputStage+0x60>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	031b      	lsls	r3, r3, #12
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	22a0      	movs	r2, #160	; 0xa0
 8005e58:	4393      	bics	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b006      	add	sp, #24
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	ffff0fff 	.word	0xffff0fff

08005e80 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4a08      	ldr	r2, [pc, #32]	; (8005eb4 <TIM_ITRx_SetConfig+0x34>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	2207      	movs	r2, #7
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	609a      	str	r2, [r3, #8]
}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	46bd      	mov	sp, r7
 8005eae:	b004      	add	sp, #16
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	ffcfff8f 	.word	0xffcfff8f

08005eb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	4a09      	ldr	r2, [pc, #36]	; (8005ef4 <TIM_ETR_SetConfig+0x3c>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	021a      	lsls	r2, r3, #8
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	431a      	orrs	r2, r3
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	609a      	str	r2, [r3, #8]
}
 8005eec:	46c0      	nop			; (mov r8, r8)
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	b006      	add	sp, #24
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	ffff00ff 	.word	0xffff00ff

08005ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	223c      	movs	r2, #60	; 0x3c
 8005f06:	5c9b      	ldrb	r3, [r3, r2]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e05a      	b.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	223c      	movs	r2, #60	; 0x3c
 8005f14:	2101      	movs	r1, #1
 8005f16:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	223d      	movs	r2, #61	; 0x3d
 8005f1c:	2102      	movs	r1, #2
 8005f1e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a26      	ldr	r2, [pc, #152]	; (8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d108      	bne.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4a25      	ldr	r2, [pc, #148]	; (8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2270      	movs	r2, #112	; 0x70
 8005f50:	4393      	bics	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a19      	ldr	r2, [pc, #100]	; (8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d014      	beq.n	8005f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	05db      	lsls	r3, r3, #23
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d00e      	beq.n	8005f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a15      	ldr	r2, [pc, #84]	; (8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d009      	beq.n	8005f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a14      	ldr	r2, [pc, #80]	; (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d004      	beq.n	8005f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a12      	ldr	r2, [pc, #72]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d10c      	bne.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2280      	movs	r2, #128	; 0x80
 8005f9e:	4393      	bics	r3, r2
 8005fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	223d      	movs	r2, #61	; 0x3d
 8005fb8:	2101      	movs	r1, #1
 8005fba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	223c      	movs	r2, #60	; 0x3c
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	b004      	add	sp, #16
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	40012c00 	.word	0x40012c00
 8005fd4:	ff0fffff 	.word	0xff0fffff
 8005fd8:	40000400 	.word	0x40000400
 8005fdc:	40000800 	.word	0x40000800
 8005fe0:	40014000 	.word	0x40014000

08005fe4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e046      	b.n	8006084 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2284      	movs	r2, #132	; 0x84
 8005ffa:	589b      	ldr	r3, [r3, r2]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d107      	bne.n	8006010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2280      	movs	r2, #128	; 0x80
 8006004:	2100      	movs	r1, #0
 8006006:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	0018      	movs	r0, r3
 800600c:	f7fd fa4a 	bl	80034a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2284      	movs	r2, #132	; 0x84
 8006014:	2124      	movs	r1, #36	; 0x24
 8006016:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2101      	movs	r1, #1
 8006024:	438a      	bics	r2, r1
 8006026:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	0018      	movs	r0, r3
 800602c:	f000 f970 	bl	8006310 <UART_SetConfig>
 8006030:	0003      	movs	r3, r0
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e024      	b.n	8006084 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	0018      	movs	r0, r3
 8006046:	f000 fcbb 	bl	80069c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	490d      	ldr	r1, [pc, #52]	; (800608c <HAL_UART_Init+0xa8>)
 8006056:	400a      	ands	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	212a      	movs	r1, #42	; 0x2a
 8006066:	438a      	bics	r2, r1
 8006068:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2101      	movs	r1, #1
 8006076:	430a      	orrs	r2, r1
 8006078:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	0018      	movs	r0, r3
 800607e:	f000 fd53 	bl	8006b28 <UART_CheckIdleState>
 8006082:	0003      	movs	r3, r0
}
 8006084:	0018      	movs	r0, r3
 8006086:	46bd      	mov	sp, r7
 8006088:	b002      	add	sp, #8
 800608a:	bd80      	pop	{r7, pc}
 800608c:	ffffb7ff 	.word	0xffffb7ff

08006090 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	; 0x28
 8006094:	af02      	add	r7, sp, #8
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	603b      	str	r3, [r7, #0]
 800609c:	1dbb      	adds	r3, r7, #6
 800609e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2284      	movs	r2, #132	; 0x84
 80060a4:	589b      	ldr	r3, [r3, r2]
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	d000      	beq.n	80060ac <HAL_UART_Transmit+0x1c>
 80060aa:	e097      	b.n	80061dc <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_UART_Transmit+0x2a>
 80060b2:	1dbb      	adds	r3, r7, #6
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e08f      	b.n	80061de <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	015b      	lsls	r3, r3, #5
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d109      	bne.n	80060de <HAL_UART_Transmit+0x4e>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d105      	bne.n	80060de <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2201      	movs	r2, #1
 80060d6:	4013      	ands	r3, r2
 80060d8:	d001      	beq.n	80060de <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e07f      	b.n	80061de <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2280      	movs	r2, #128	; 0x80
 80060e2:	5c9b      	ldrb	r3, [r3, r2]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_UART_Transmit+0x5c>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e078      	b.n	80061de <HAL_UART_Transmit+0x14e>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2280      	movs	r2, #128	; 0x80
 80060f0:	2101      	movs	r1, #1
 80060f2:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	228c      	movs	r2, #140	; 0x8c
 80060f8:	2100      	movs	r1, #0
 80060fa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2284      	movs	r2, #132	; 0x84
 8006100:	2121      	movs	r1, #33	; 0x21
 8006102:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006104:	f7fd fbd4 	bl	80038b0 <HAL_GetTick>
 8006108:	0003      	movs	r3, r0
 800610a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	1dba      	adds	r2, r7, #6
 8006110:	2154      	movs	r1, #84	; 0x54
 8006112:	8812      	ldrh	r2, [r2, #0]
 8006114:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	1dba      	adds	r2, r7, #6
 800611a:	2156      	movs	r1, #86	; 0x56
 800611c:	8812      	ldrh	r2, [r2, #0]
 800611e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	2380      	movs	r3, #128	; 0x80
 8006126:	015b      	lsls	r3, r3, #5
 8006128:	429a      	cmp	r2, r3
 800612a:	d108      	bne.n	800613e <HAL_UART_Transmit+0xae>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	61bb      	str	r3, [r7, #24]
 800613c:	e003      	b.n	8006146 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006142:	2300      	movs	r3, #0
 8006144:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2280      	movs	r2, #128	; 0x80
 800614a:	2100      	movs	r1, #0
 800614c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800614e:	e02c      	b.n	80061aa <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	0013      	movs	r3, r2
 800615a:	2200      	movs	r2, #0
 800615c:	2180      	movs	r1, #128	; 0x80
 800615e:	f000 fd2d 	bl	8006bbc <UART_WaitOnFlagUntilTimeout>
 8006162:	1e03      	subs	r3, r0, #0
 8006164:	d001      	beq.n	800616a <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e039      	b.n	80061de <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10b      	bne.n	8006188 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	001a      	movs	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	05d2      	lsls	r2, r2, #23
 800617c:	0dd2      	lsrs	r2, r2, #23
 800617e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	3302      	adds	r3, #2
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	e007      	b.n	8006198 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	781a      	ldrb	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	3301      	adds	r3, #1
 8006196:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2256      	movs	r2, #86	; 0x56
 800619c:	5a9b      	ldrh	r3, [r3, r2]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b299      	uxth	r1, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2256      	movs	r2, #86	; 0x56
 80061a8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2256      	movs	r2, #86	; 0x56
 80061ae:	5a9b      	ldrh	r3, [r3, r2]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1cc      	bne.n	8006150 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	0013      	movs	r3, r2
 80061c0:	2200      	movs	r2, #0
 80061c2:	2140      	movs	r1, #64	; 0x40
 80061c4:	f000 fcfa 	bl	8006bbc <UART_WaitOnFlagUntilTimeout>
 80061c8:	1e03      	subs	r3, r0, #0
 80061ca:	d001      	beq.n	80061d0 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e006      	b.n	80061de <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2284      	movs	r2, #132	; 0x84
 80061d4:	2120      	movs	r1, #32
 80061d6:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	e000      	b.n	80061de <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80061dc:	2302      	movs	r3, #2
  }
}
 80061de:	0018      	movs	r0, r3
 80061e0:	46bd      	mov	sp, r7
 80061e2:	b008      	add	sp, #32
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	1dbb      	adds	r3, r7, #6
 80061f4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2288      	movs	r2, #136	; 0x88
 80061fa:	589b      	ldr	r3, [r3, r2]
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d15a      	bne.n	80062b6 <HAL_UART_Receive_DMA+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_UART_Receive_DMA+0x26>
 8006206:	1dbb      	adds	r3, r7, #6
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e052      	b.n	80062b8 <HAL_UART_Receive_DMA+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	2380      	movs	r3, #128	; 0x80
 8006218:	015b      	lsls	r3, r3, #5
 800621a:	429a      	cmp	r2, r3
 800621c:	d109      	bne.n	8006232 <HAL_UART_Receive_DMA+0x4a>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d105      	bne.n	8006232 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2201      	movs	r2, #1
 800622a:	4013      	ands	r3, r2
 800622c:	d001      	beq.n	8006232 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e042      	b.n	80062b8 <HAL_UART_Receive_DMA+0xd0>
      }
    }

    __HAL_LOCK(huart);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2280      	movs	r2, #128	; 0x80
 8006236:	5c9b      	ldrb	r3, [r3, r2]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_UART_Receive_DMA+0x58>
 800623c:	2302      	movs	r3, #2
 800623e:	e03b      	b.n	80062b8 <HAL_UART_Receive_DMA+0xd0>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2280      	movs	r2, #128	; 0x80
 8006244:	2101      	movs	r1, #1
 8006246:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1b      	ldr	r2, [pc, #108]	; (80062c0 <HAL_UART_Receive_DMA+0xd8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d025      	beq.n	80062a4 <HAL_UART_Receive_DMA+0xbc>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a19      	ldr	r2, [pc, #100]	; (80062c4 <HAL_UART_Receive_DMA+0xdc>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d020      	beq.n	80062a4 <HAL_UART_Receive_DMA+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	2380      	movs	r3, #128	; 0x80
 800626a:	041b      	lsls	r3, r3, #16
 800626c:	4013      	ands	r3, r2
 800626e:	d019      	beq.n	80062a4 <HAL_UART_Receive_DMA+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006270:	f3ef 8310 	mrs	r3, PRIMASK
 8006274:	613b      	str	r3, [r7, #16]
  return(result);
 8006276:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006278:	61fb      	str	r3, [r7, #28]
 800627a:	2301      	movs	r3, #1
 800627c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f383 8810 	msr	PRIMASK, r3
}
 8006284:	46c0      	nop			; (mov r8, r8)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2180      	movs	r1, #128	; 0x80
 8006292:	04c9      	lsls	r1, r1, #19
 8006294:	430a      	orrs	r2, r1
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f383 8810 	msr	PRIMASK, r3
}
 80062a2:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80062a4:	1dbb      	adds	r3, r7, #6
 80062a6:	881a      	ldrh	r2, [r3, #0]
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	0018      	movs	r0, r3
 80062ae:	f000 fd4d 	bl	8006d4c <UART_Start_Receive_DMA>
 80062b2:	0003      	movs	r3, r0
 80062b4:	e000      	b.n	80062b8 <HAL_UART_Receive_DMA+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80062b6:	2302      	movs	r3, #2
  }
}
 80062b8:	0018      	movs	r0, r3
 80062ba:	46bd      	mov	sp, r7
 80062bc:	b008      	add	sp, #32
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40008000 	.word	0x40008000
 80062c4:	40008400 	.word	0x40008400

080062c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80062d0:	46c0      	nop			; (mov r8, r8)
 80062d2:	46bd      	mov	sp, r7
 80062d4:	b002      	add	sp, #8
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80062e0:	46c0      	nop			; (mov r8, r8)
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b002      	add	sp, #8
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062f0:	46c0      	nop			; (mov r8, r8)
 80062f2:	46bd      	mov	sp, r7
 80062f4:	b002      	add	sp, #8
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	000a      	movs	r2, r1
 8006302:	1cbb      	adds	r3, r7, #2
 8006304:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006306:	46c0      	nop			; (mov r8, r8)
 8006308:	46bd      	mov	sp, r7
 800630a:	b002      	add	sp, #8
 800630c:	bd80      	pop	{r7, pc}
	...

08006310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006310:	b5b0      	push	{r4, r5, r7, lr}
 8006312:	b090      	sub	sp, #64	; 0x40
 8006314:	af00      	add	r7, sp, #0
 8006316:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006318:	231a      	movs	r3, #26
 800631a:	2220      	movs	r2, #32
 800631c:	189b      	adds	r3, r3, r2
 800631e:	19db      	adds	r3, r3, r7
 8006320:	2200      	movs	r2, #0
 8006322:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	431a      	orrs	r2, r3
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	431a      	orrs	r2, r3
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	4313      	orrs	r3, r2
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4ac1      	ldr	r2, [pc, #772]	; (8006648 <UART_SetConfig+0x338>)
 8006344:	4013      	ands	r3, r2
 8006346:	0019      	movs	r1, r3
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634e:	430b      	orrs	r3, r1
 8006350:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	4abc      	ldr	r2, [pc, #752]	; (800664c <UART_SetConfig+0x33c>)
 800635a:	4013      	ands	r3, r2
 800635c:	0018      	movs	r0, r3
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	68d9      	ldr	r1, [r3, #12]
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	0003      	movs	r3, r0
 8006368:	430b      	orrs	r3, r1
 800636a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4ab6      	ldr	r2, [pc, #728]	; (8006650 <UART_SetConfig+0x340>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d009      	beq.n	8006390 <UART_SetConfig+0x80>
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4ab4      	ldr	r2, [pc, #720]	; (8006654 <UART_SetConfig+0x344>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d004      	beq.n	8006390 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800638c:	4313      	orrs	r3, r2
 800638e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	4ab0      	ldr	r2, [pc, #704]	; (8006658 <UART_SetConfig+0x348>)
 8006398:	4013      	ands	r3, r2
 800639a:	0019      	movs	r1, r3
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a2:	430b      	orrs	r3, r1
 80063a4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	220f      	movs	r2, #15
 80063ae:	4393      	bics	r3, r2
 80063b0:	0018      	movs	r0, r3
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	0003      	movs	r3, r0
 80063bc:	430b      	orrs	r3, r1
 80063be:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4aa5      	ldr	r2, [pc, #660]	; (800665c <UART_SetConfig+0x34c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d131      	bne.n	800642e <UART_SetConfig+0x11e>
 80063ca:	4ba5      	ldr	r3, [pc, #660]	; (8006660 <UART_SetConfig+0x350>)
 80063cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ce:	2203      	movs	r2, #3
 80063d0:	4013      	ands	r3, r2
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d01d      	beq.n	8006412 <UART_SetConfig+0x102>
 80063d6:	d823      	bhi.n	8006420 <UART_SetConfig+0x110>
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d00c      	beq.n	80063f6 <UART_SetConfig+0xe6>
 80063dc:	d820      	bhi.n	8006420 <UART_SetConfig+0x110>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <UART_SetConfig+0xd8>
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d00e      	beq.n	8006404 <UART_SetConfig+0xf4>
 80063e6:	e01b      	b.n	8006420 <UART_SetConfig+0x110>
 80063e8:	231b      	movs	r3, #27
 80063ea:	2220      	movs	r2, #32
 80063ec:	189b      	adds	r3, r3, r2
 80063ee:	19db      	adds	r3, r3, r7
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	e154      	b.n	80066a0 <UART_SetConfig+0x390>
 80063f6:	231b      	movs	r3, #27
 80063f8:	2220      	movs	r2, #32
 80063fa:	189b      	adds	r3, r3, r2
 80063fc:	19db      	adds	r3, r3, r7
 80063fe:	2202      	movs	r2, #2
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	e14d      	b.n	80066a0 <UART_SetConfig+0x390>
 8006404:	231b      	movs	r3, #27
 8006406:	2220      	movs	r2, #32
 8006408:	189b      	adds	r3, r3, r2
 800640a:	19db      	adds	r3, r3, r7
 800640c:	2204      	movs	r2, #4
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	e146      	b.n	80066a0 <UART_SetConfig+0x390>
 8006412:	231b      	movs	r3, #27
 8006414:	2220      	movs	r2, #32
 8006416:	189b      	adds	r3, r3, r2
 8006418:	19db      	adds	r3, r3, r7
 800641a:	2208      	movs	r2, #8
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	e13f      	b.n	80066a0 <UART_SetConfig+0x390>
 8006420:	231b      	movs	r3, #27
 8006422:	2220      	movs	r2, #32
 8006424:	189b      	adds	r3, r3, r2
 8006426:	19db      	adds	r3, r3, r7
 8006428:	2210      	movs	r2, #16
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	e138      	b.n	80066a0 <UART_SetConfig+0x390>
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a8c      	ldr	r2, [pc, #560]	; (8006664 <UART_SetConfig+0x354>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d131      	bne.n	800649c <UART_SetConfig+0x18c>
 8006438:	4b89      	ldr	r3, [pc, #548]	; (8006660 <UART_SetConfig+0x350>)
 800643a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643c:	220c      	movs	r2, #12
 800643e:	4013      	ands	r3, r2
 8006440:	2b0c      	cmp	r3, #12
 8006442:	d01d      	beq.n	8006480 <UART_SetConfig+0x170>
 8006444:	d823      	bhi.n	800648e <UART_SetConfig+0x17e>
 8006446:	2b08      	cmp	r3, #8
 8006448:	d00c      	beq.n	8006464 <UART_SetConfig+0x154>
 800644a:	d820      	bhi.n	800648e <UART_SetConfig+0x17e>
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <UART_SetConfig+0x146>
 8006450:	2b04      	cmp	r3, #4
 8006452:	d00e      	beq.n	8006472 <UART_SetConfig+0x162>
 8006454:	e01b      	b.n	800648e <UART_SetConfig+0x17e>
 8006456:	231b      	movs	r3, #27
 8006458:	2220      	movs	r2, #32
 800645a:	189b      	adds	r3, r3, r2
 800645c:	19db      	adds	r3, r3, r7
 800645e:	2200      	movs	r2, #0
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	e11d      	b.n	80066a0 <UART_SetConfig+0x390>
 8006464:	231b      	movs	r3, #27
 8006466:	2220      	movs	r2, #32
 8006468:	189b      	adds	r3, r3, r2
 800646a:	19db      	adds	r3, r3, r7
 800646c:	2202      	movs	r2, #2
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	e116      	b.n	80066a0 <UART_SetConfig+0x390>
 8006472:	231b      	movs	r3, #27
 8006474:	2220      	movs	r2, #32
 8006476:	189b      	adds	r3, r3, r2
 8006478:	19db      	adds	r3, r3, r7
 800647a:	2204      	movs	r2, #4
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	e10f      	b.n	80066a0 <UART_SetConfig+0x390>
 8006480:	231b      	movs	r3, #27
 8006482:	2220      	movs	r2, #32
 8006484:	189b      	adds	r3, r3, r2
 8006486:	19db      	adds	r3, r3, r7
 8006488:	2208      	movs	r2, #8
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e108      	b.n	80066a0 <UART_SetConfig+0x390>
 800648e:	231b      	movs	r3, #27
 8006490:	2220      	movs	r2, #32
 8006492:	189b      	adds	r3, r3, r2
 8006494:	19db      	adds	r3, r3, r7
 8006496:	2210      	movs	r2, #16
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	e101      	b.n	80066a0 <UART_SetConfig+0x390>
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a71      	ldr	r2, [pc, #452]	; (8006668 <UART_SetConfig+0x358>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d131      	bne.n	800650a <UART_SetConfig+0x1fa>
 80064a6:	4b6e      	ldr	r3, [pc, #440]	; (8006660 <UART_SetConfig+0x350>)
 80064a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064aa:	2230      	movs	r2, #48	; 0x30
 80064ac:	4013      	ands	r3, r2
 80064ae:	2b30      	cmp	r3, #48	; 0x30
 80064b0:	d01d      	beq.n	80064ee <UART_SetConfig+0x1de>
 80064b2:	d823      	bhi.n	80064fc <UART_SetConfig+0x1ec>
 80064b4:	2b20      	cmp	r3, #32
 80064b6:	d00c      	beq.n	80064d2 <UART_SetConfig+0x1c2>
 80064b8:	d820      	bhi.n	80064fc <UART_SetConfig+0x1ec>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <UART_SetConfig+0x1b4>
 80064be:	2b10      	cmp	r3, #16
 80064c0:	d00e      	beq.n	80064e0 <UART_SetConfig+0x1d0>
 80064c2:	e01b      	b.n	80064fc <UART_SetConfig+0x1ec>
 80064c4:	231b      	movs	r3, #27
 80064c6:	2220      	movs	r2, #32
 80064c8:	189b      	adds	r3, r3, r2
 80064ca:	19db      	adds	r3, r3, r7
 80064cc:	2200      	movs	r2, #0
 80064ce:	701a      	strb	r2, [r3, #0]
 80064d0:	e0e6      	b.n	80066a0 <UART_SetConfig+0x390>
 80064d2:	231b      	movs	r3, #27
 80064d4:	2220      	movs	r2, #32
 80064d6:	189b      	adds	r3, r3, r2
 80064d8:	19db      	adds	r3, r3, r7
 80064da:	2202      	movs	r2, #2
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	e0df      	b.n	80066a0 <UART_SetConfig+0x390>
 80064e0:	231b      	movs	r3, #27
 80064e2:	2220      	movs	r2, #32
 80064e4:	189b      	adds	r3, r3, r2
 80064e6:	19db      	adds	r3, r3, r7
 80064e8:	2204      	movs	r2, #4
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	e0d8      	b.n	80066a0 <UART_SetConfig+0x390>
 80064ee:	231b      	movs	r3, #27
 80064f0:	2220      	movs	r2, #32
 80064f2:	189b      	adds	r3, r3, r2
 80064f4:	19db      	adds	r3, r3, r7
 80064f6:	2208      	movs	r2, #8
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	e0d1      	b.n	80066a0 <UART_SetConfig+0x390>
 80064fc:	231b      	movs	r3, #27
 80064fe:	2220      	movs	r2, #32
 8006500:	189b      	adds	r3, r3, r2
 8006502:	19db      	adds	r3, r3, r7
 8006504:	2210      	movs	r2, #16
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	e0ca      	b.n	80066a0 <UART_SetConfig+0x390>
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a57      	ldr	r2, [pc, #348]	; (800666c <UART_SetConfig+0x35c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d106      	bne.n	8006522 <UART_SetConfig+0x212>
 8006514:	231b      	movs	r3, #27
 8006516:	2220      	movs	r2, #32
 8006518:	189b      	adds	r3, r3, r2
 800651a:	19db      	adds	r3, r3, r7
 800651c:	2200      	movs	r2, #0
 800651e:	701a      	strb	r2, [r3, #0]
 8006520:	e0be      	b.n	80066a0 <UART_SetConfig+0x390>
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a52      	ldr	r2, [pc, #328]	; (8006670 <UART_SetConfig+0x360>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d106      	bne.n	800653a <UART_SetConfig+0x22a>
 800652c:	231b      	movs	r3, #27
 800652e:	2220      	movs	r2, #32
 8006530:	189b      	adds	r3, r3, r2
 8006532:	19db      	adds	r3, r3, r7
 8006534:	2200      	movs	r2, #0
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	e0b2      	b.n	80066a0 <UART_SetConfig+0x390>
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a4d      	ldr	r2, [pc, #308]	; (8006674 <UART_SetConfig+0x364>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d106      	bne.n	8006552 <UART_SetConfig+0x242>
 8006544:	231b      	movs	r3, #27
 8006546:	2220      	movs	r2, #32
 8006548:	189b      	adds	r3, r3, r2
 800654a:	19db      	adds	r3, r3, r7
 800654c:	2200      	movs	r2, #0
 800654e:	701a      	strb	r2, [r3, #0]
 8006550:	e0a6      	b.n	80066a0 <UART_SetConfig+0x390>
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a3e      	ldr	r2, [pc, #248]	; (8006650 <UART_SetConfig+0x340>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d13e      	bne.n	80065da <UART_SetConfig+0x2ca>
 800655c:	4b40      	ldr	r3, [pc, #256]	; (8006660 <UART_SetConfig+0x350>)
 800655e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006560:	23c0      	movs	r3, #192	; 0xc0
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	4013      	ands	r3, r2
 8006566:	22c0      	movs	r2, #192	; 0xc0
 8006568:	0112      	lsls	r2, r2, #4
 800656a:	4293      	cmp	r3, r2
 800656c:	d027      	beq.n	80065be <UART_SetConfig+0x2ae>
 800656e:	22c0      	movs	r2, #192	; 0xc0
 8006570:	0112      	lsls	r2, r2, #4
 8006572:	4293      	cmp	r3, r2
 8006574:	d82a      	bhi.n	80065cc <UART_SetConfig+0x2bc>
 8006576:	2280      	movs	r2, #128	; 0x80
 8006578:	0112      	lsls	r2, r2, #4
 800657a:	4293      	cmp	r3, r2
 800657c:	d011      	beq.n	80065a2 <UART_SetConfig+0x292>
 800657e:	2280      	movs	r2, #128	; 0x80
 8006580:	0112      	lsls	r2, r2, #4
 8006582:	4293      	cmp	r3, r2
 8006584:	d822      	bhi.n	80065cc <UART_SetConfig+0x2bc>
 8006586:	2b00      	cmp	r3, #0
 8006588:	d004      	beq.n	8006594 <UART_SetConfig+0x284>
 800658a:	2280      	movs	r2, #128	; 0x80
 800658c:	00d2      	lsls	r2, r2, #3
 800658e:	4293      	cmp	r3, r2
 8006590:	d00e      	beq.n	80065b0 <UART_SetConfig+0x2a0>
 8006592:	e01b      	b.n	80065cc <UART_SetConfig+0x2bc>
 8006594:	231b      	movs	r3, #27
 8006596:	2220      	movs	r2, #32
 8006598:	189b      	adds	r3, r3, r2
 800659a:	19db      	adds	r3, r3, r7
 800659c:	2200      	movs	r2, #0
 800659e:	701a      	strb	r2, [r3, #0]
 80065a0:	e07e      	b.n	80066a0 <UART_SetConfig+0x390>
 80065a2:	231b      	movs	r3, #27
 80065a4:	2220      	movs	r2, #32
 80065a6:	189b      	adds	r3, r3, r2
 80065a8:	19db      	adds	r3, r3, r7
 80065aa:	2202      	movs	r2, #2
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	e077      	b.n	80066a0 <UART_SetConfig+0x390>
 80065b0:	231b      	movs	r3, #27
 80065b2:	2220      	movs	r2, #32
 80065b4:	189b      	adds	r3, r3, r2
 80065b6:	19db      	adds	r3, r3, r7
 80065b8:	2204      	movs	r2, #4
 80065ba:	701a      	strb	r2, [r3, #0]
 80065bc:	e070      	b.n	80066a0 <UART_SetConfig+0x390>
 80065be:	231b      	movs	r3, #27
 80065c0:	2220      	movs	r2, #32
 80065c2:	189b      	adds	r3, r3, r2
 80065c4:	19db      	adds	r3, r3, r7
 80065c6:	2208      	movs	r2, #8
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	e069      	b.n	80066a0 <UART_SetConfig+0x390>
 80065cc:	231b      	movs	r3, #27
 80065ce:	2220      	movs	r2, #32
 80065d0:	189b      	adds	r3, r3, r2
 80065d2:	19db      	adds	r3, r3, r7
 80065d4:	2210      	movs	r2, #16
 80065d6:	701a      	strb	r2, [r3, #0]
 80065d8:	e062      	b.n	80066a0 <UART_SetConfig+0x390>
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1d      	ldr	r2, [pc, #116]	; (8006654 <UART_SetConfig+0x344>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d157      	bne.n	8006694 <UART_SetConfig+0x384>
 80065e4:	4b1e      	ldr	r3, [pc, #120]	; (8006660 <UART_SetConfig+0x350>)
 80065e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065e8:	23c0      	movs	r3, #192	; 0xc0
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4013      	ands	r3, r2
 80065ee:	22c0      	movs	r2, #192	; 0xc0
 80065f0:	0092      	lsls	r2, r2, #2
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d040      	beq.n	8006678 <UART_SetConfig+0x368>
 80065f6:	22c0      	movs	r2, #192	; 0xc0
 80065f8:	0092      	lsls	r2, r2, #2
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d843      	bhi.n	8006686 <UART_SetConfig+0x376>
 80065fe:	2280      	movs	r2, #128	; 0x80
 8006600:	0092      	lsls	r2, r2, #2
 8006602:	4293      	cmp	r3, r2
 8006604:	d011      	beq.n	800662a <UART_SetConfig+0x31a>
 8006606:	2280      	movs	r2, #128	; 0x80
 8006608:	0092      	lsls	r2, r2, #2
 800660a:	4293      	cmp	r3, r2
 800660c:	d83b      	bhi.n	8006686 <UART_SetConfig+0x376>
 800660e:	2b00      	cmp	r3, #0
 8006610:	d004      	beq.n	800661c <UART_SetConfig+0x30c>
 8006612:	2280      	movs	r2, #128	; 0x80
 8006614:	0052      	lsls	r2, r2, #1
 8006616:	4293      	cmp	r3, r2
 8006618:	d00e      	beq.n	8006638 <UART_SetConfig+0x328>
 800661a:	e034      	b.n	8006686 <UART_SetConfig+0x376>
 800661c:	231b      	movs	r3, #27
 800661e:	2220      	movs	r2, #32
 8006620:	189b      	adds	r3, r3, r2
 8006622:	19db      	adds	r3, r3, r7
 8006624:	2200      	movs	r2, #0
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	e03a      	b.n	80066a0 <UART_SetConfig+0x390>
 800662a:	231b      	movs	r3, #27
 800662c:	2220      	movs	r2, #32
 800662e:	189b      	adds	r3, r3, r2
 8006630:	19db      	adds	r3, r3, r7
 8006632:	2202      	movs	r2, #2
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	e033      	b.n	80066a0 <UART_SetConfig+0x390>
 8006638:	231b      	movs	r3, #27
 800663a:	2220      	movs	r2, #32
 800663c:	189b      	adds	r3, r3, r2
 800663e:	19db      	adds	r3, r3, r7
 8006640:	2204      	movs	r2, #4
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	e02c      	b.n	80066a0 <UART_SetConfig+0x390>
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	cfff69f3 	.word	0xcfff69f3
 800664c:	ffffcfff 	.word	0xffffcfff
 8006650:	40008000 	.word	0x40008000
 8006654:	40008400 	.word	0x40008400
 8006658:	11fff4ff 	.word	0x11fff4ff
 800665c:	40013800 	.word	0x40013800
 8006660:	40021000 	.word	0x40021000
 8006664:	40004400 	.word	0x40004400
 8006668:	40004800 	.word	0x40004800
 800666c:	40004c00 	.word	0x40004c00
 8006670:	40005000 	.word	0x40005000
 8006674:	40013c00 	.word	0x40013c00
 8006678:	231b      	movs	r3, #27
 800667a:	2220      	movs	r2, #32
 800667c:	189b      	adds	r3, r3, r2
 800667e:	19db      	adds	r3, r3, r7
 8006680:	2208      	movs	r2, #8
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	e00c      	b.n	80066a0 <UART_SetConfig+0x390>
 8006686:	231b      	movs	r3, #27
 8006688:	2220      	movs	r2, #32
 800668a:	189b      	adds	r3, r3, r2
 800668c:	19db      	adds	r3, r3, r7
 800668e:	2210      	movs	r2, #16
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	e005      	b.n	80066a0 <UART_SetConfig+0x390>
 8006694:	231b      	movs	r3, #27
 8006696:	2220      	movs	r2, #32
 8006698:	189b      	adds	r3, r3, r2
 800669a:	19db      	adds	r3, r3, r7
 800669c:	2210      	movs	r2, #16
 800669e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4ac2      	ldr	r2, [pc, #776]	; (80069b0 <UART_SetConfig+0x6a0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d005      	beq.n	80066b6 <UART_SetConfig+0x3a6>
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4ac1      	ldr	r2, [pc, #772]	; (80069b4 <UART_SetConfig+0x6a4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d000      	beq.n	80066b6 <UART_SetConfig+0x3a6>
 80066b4:	e093      	b.n	80067de <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066b6:	231b      	movs	r3, #27
 80066b8:	2220      	movs	r2, #32
 80066ba:	189b      	adds	r3, r3, r2
 80066bc:	19db      	adds	r3, r3, r7
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d015      	beq.n	80066f0 <UART_SetConfig+0x3e0>
 80066c4:	dc18      	bgt.n	80066f8 <UART_SetConfig+0x3e8>
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d00d      	beq.n	80066e6 <UART_SetConfig+0x3d6>
 80066ca:	dc15      	bgt.n	80066f8 <UART_SetConfig+0x3e8>
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <UART_SetConfig+0x3c6>
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d005      	beq.n	80066e0 <UART_SetConfig+0x3d0>
 80066d4:	e010      	b.n	80066f8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066d6:	f7fe fb59 	bl	8004d8c <HAL_RCC_GetPCLK1Freq>
 80066da:	0003      	movs	r3, r0
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066de:	e014      	b.n	800670a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066e0:	4bb5      	ldr	r3, [pc, #724]	; (80069b8 <UART_SetConfig+0x6a8>)
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066e4:	e011      	b.n	800670a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066e6:	f7fe fac5 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 80066ea:	0003      	movs	r3, r0
 80066ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066ee:	e00c      	b.n	800670a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066f0:	2380      	movs	r3, #128	; 0x80
 80066f2:	021b      	lsls	r3, r3, #8
 80066f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066f6:	e008      	b.n	800670a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80066fc:	231a      	movs	r3, #26
 80066fe:	2220      	movs	r2, #32
 8006700:	189b      	adds	r3, r3, r2
 8006702:	19db      	adds	r3, r3, r7
 8006704:	2201      	movs	r2, #1
 8006706:	701a      	strb	r2, [r3, #0]
        break;
 8006708:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800670a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670c:	2b00      	cmp	r3, #0
 800670e:	d100      	bne.n	8006712 <UART_SetConfig+0x402>
 8006710:	e136      	b.n	8006980 <UART_SetConfig+0x670>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006716:	4ba9      	ldr	r3, [pc, #676]	; (80069bc <UART_SetConfig+0x6ac>)
 8006718:	0052      	lsls	r2, r2, #1
 800671a:	5ad3      	ldrh	r3, [r2, r3]
 800671c:	0019      	movs	r1, r3
 800671e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006720:	f7f9 fcf0 	bl	8000104 <__udivsi3>
 8006724:	0003      	movs	r3, r0
 8006726:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	0013      	movs	r3, r2
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	189b      	adds	r3, r3, r2
 8006732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006734:	429a      	cmp	r2, r3
 8006736:	d305      	bcc.n	8006744 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800673e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006740:	429a      	cmp	r2, r3
 8006742:	d906      	bls.n	8006752 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8006744:	231a      	movs	r3, #26
 8006746:	2220      	movs	r2, #32
 8006748:	189b      	adds	r3, r3, r2
 800674a:	19db      	adds	r3, r3, r7
 800674c:	2201      	movs	r2, #1
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	e044      	b.n	80067dc <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	2300      	movs	r3, #0
 8006758:	61fb      	str	r3, [r7, #28]
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800675e:	4b97      	ldr	r3, [pc, #604]	; (80069bc <UART_SetConfig+0x6ac>)
 8006760:	0052      	lsls	r2, r2, #1
 8006762:	5ad3      	ldrh	r3, [r2, r3]
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	2300      	movs	r3, #0
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	69b8      	ldr	r0, [r7, #24]
 8006770:	69f9      	ldr	r1, [r7, #28]
 8006772:	f7f9 fe77 	bl	8000464 <__aeabi_uldivmod>
 8006776:	0002      	movs	r2, r0
 8006778:	000b      	movs	r3, r1
 800677a:	0e11      	lsrs	r1, r2, #24
 800677c:	021d      	lsls	r5, r3, #8
 800677e:	430d      	orrs	r5, r1
 8006780:	0214      	lsls	r4, r2, #8
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	085b      	lsrs	r3, r3, #1
 8006788:	60bb      	str	r3, [r7, #8]
 800678a:	2300      	movs	r3, #0
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	68b8      	ldr	r0, [r7, #8]
 8006790:	68f9      	ldr	r1, [r7, #12]
 8006792:	1900      	adds	r0, r0, r4
 8006794:	4169      	adcs	r1, r5
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	2300      	movs	r3, #0
 800679e:	607b      	str	r3, [r7, #4]
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f7f9 fe5e 	bl	8000464 <__aeabi_uldivmod>
 80067a8:	0002      	movs	r2, r0
 80067aa:	000b      	movs	r3, r1
 80067ac:	0013      	movs	r3, r2
 80067ae:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b2:	23c0      	movs	r3, #192	; 0xc0
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d309      	bcc.n	80067ce <UART_SetConfig+0x4be>
 80067ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067bc:	2380      	movs	r3, #128	; 0x80
 80067be:	035b      	lsls	r3, r3, #13
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d204      	bcs.n	80067ce <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ca:	60da      	str	r2, [r3, #12]
 80067cc:	e006      	b.n	80067dc <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80067ce:	231a      	movs	r3, #26
 80067d0:	2220      	movs	r2, #32
 80067d2:	189b      	adds	r3, r3, r2
 80067d4:	19db      	adds	r3, r3, r7
 80067d6:	2201      	movs	r2, #1
 80067d8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80067da:	e0d1      	b.n	8006980 <UART_SetConfig+0x670>
 80067dc:	e0d0      	b.n	8006980 <UART_SetConfig+0x670>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	69da      	ldr	r2, [r3, #28]
 80067e2:	2380      	movs	r3, #128	; 0x80
 80067e4:	021b      	lsls	r3, r3, #8
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d000      	beq.n	80067ec <UART_SetConfig+0x4dc>
 80067ea:	e071      	b.n	80068d0 <UART_SetConfig+0x5c0>
  {
    switch (clocksource)
 80067ec:	231b      	movs	r3, #27
 80067ee:	2220      	movs	r2, #32
 80067f0:	189b      	adds	r3, r3, r2
 80067f2:	19db      	adds	r3, r3, r7
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d015      	beq.n	8006826 <UART_SetConfig+0x516>
 80067fa:	dc18      	bgt.n	800682e <UART_SetConfig+0x51e>
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d00d      	beq.n	800681c <UART_SetConfig+0x50c>
 8006800:	dc15      	bgt.n	800682e <UART_SetConfig+0x51e>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <UART_SetConfig+0x4fc>
 8006806:	2b02      	cmp	r3, #2
 8006808:	d005      	beq.n	8006816 <UART_SetConfig+0x506>
 800680a:	e010      	b.n	800682e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800680c:	f7fe fabe 	bl	8004d8c <HAL_RCC_GetPCLK1Freq>
 8006810:	0003      	movs	r3, r0
 8006812:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006814:	e014      	b.n	8006840 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006816:	4b68      	ldr	r3, [pc, #416]	; (80069b8 <UART_SetConfig+0x6a8>)
 8006818:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800681a:	e011      	b.n	8006840 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800681c:	f7fe fa2a 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 8006820:	0003      	movs	r3, r0
 8006822:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006824:	e00c      	b.n	8006840 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006826:	2380      	movs	r3, #128	; 0x80
 8006828:	021b      	lsls	r3, r3, #8
 800682a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800682c:	e008      	b.n	8006840 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006832:	231a      	movs	r3, #26
 8006834:	2220      	movs	r2, #32
 8006836:	189b      	adds	r3, r3, r2
 8006838:	19db      	adds	r3, r3, r7
 800683a:	2201      	movs	r2, #1
 800683c:	701a      	strb	r2, [r3, #0]
        break;
 800683e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006842:	2b00      	cmp	r3, #0
 8006844:	d100      	bne.n	8006848 <UART_SetConfig+0x538>
 8006846:	e09b      	b.n	8006980 <UART_SetConfig+0x670>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800684c:	4b5b      	ldr	r3, [pc, #364]	; (80069bc <UART_SetConfig+0x6ac>)
 800684e:	0052      	lsls	r2, r2, #1
 8006850:	5ad3      	ldrh	r3, [r2, r3]
 8006852:	0019      	movs	r1, r3
 8006854:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006856:	f7f9 fc55 	bl	8000104 <__udivsi3>
 800685a:	0003      	movs	r3, r0
 800685c:	005a      	lsls	r2, r3, #1
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	085b      	lsrs	r3, r3, #1
 8006864:	18d2      	adds	r2, r2, r3
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	0019      	movs	r1, r3
 800686c:	0010      	movs	r0, r2
 800686e:	f7f9 fc49 	bl	8000104 <__udivsi3>
 8006872:	0003      	movs	r3, r0
 8006874:	b29b      	uxth	r3, r3
 8006876:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	2b0f      	cmp	r3, #15
 800687c:	d921      	bls.n	80068c2 <UART_SetConfig+0x5b2>
 800687e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006880:	2380      	movs	r3, #128	; 0x80
 8006882:	025b      	lsls	r3, r3, #9
 8006884:	429a      	cmp	r2, r3
 8006886:	d21c      	bcs.n	80068c2 <UART_SetConfig+0x5b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	b29a      	uxth	r2, r3
 800688c:	200e      	movs	r0, #14
 800688e:	2420      	movs	r4, #32
 8006890:	1903      	adds	r3, r0, r4
 8006892:	19db      	adds	r3, r3, r7
 8006894:	210f      	movs	r1, #15
 8006896:	438a      	bics	r2, r1
 8006898:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	085b      	lsrs	r3, r3, #1
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2207      	movs	r2, #7
 80068a2:	4013      	ands	r3, r2
 80068a4:	b299      	uxth	r1, r3
 80068a6:	1903      	adds	r3, r0, r4
 80068a8:	19db      	adds	r3, r3, r7
 80068aa:	1902      	adds	r2, r0, r4
 80068ac:	19d2      	adds	r2, r2, r7
 80068ae:	8812      	ldrh	r2, [r2, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	1902      	adds	r2, r0, r4
 80068ba:	19d2      	adds	r2, r2, r7
 80068bc:	8812      	ldrh	r2, [r2, #0]
 80068be:	60da      	str	r2, [r3, #12]
 80068c0:	e05e      	b.n	8006980 <UART_SetConfig+0x670>
      }
      else
      {
        ret = HAL_ERROR;
 80068c2:	231a      	movs	r3, #26
 80068c4:	2220      	movs	r2, #32
 80068c6:	189b      	adds	r3, r3, r2
 80068c8:	19db      	adds	r3, r3, r7
 80068ca:	2201      	movs	r2, #1
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	e057      	b.n	8006980 <UART_SetConfig+0x670>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068d0:	231b      	movs	r3, #27
 80068d2:	2220      	movs	r2, #32
 80068d4:	189b      	adds	r3, r3, r2
 80068d6:	19db      	adds	r3, r3, r7
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b08      	cmp	r3, #8
 80068dc:	d015      	beq.n	800690a <UART_SetConfig+0x5fa>
 80068de:	dc18      	bgt.n	8006912 <UART_SetConfig+0x602>
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d00d      	beq.n	8006900 <UART_SetConfig+0x5f0>
 80068e4:	dc15      	bgt.n	8006912 <UART_SetConfig+0x602>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <UART_SetConfig+0x5e0>
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d005      	beq.n	80068fa <UART_SetConfig+0x5ea>
 80068ee:	e010      	b.n	8006912 <UART_SetConfig+0x602>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068f0:	f7fe fa4c 	bl	8004d8c <HAL_RCC_GetPCLK1Freq>
 80068f4:	0003      	movs	r3, r0
 80068f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068f8:	e014      	b.n	8006924 <UART_SetConfig+0x614>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068fa:	4b2f      	ldr	r3, [pc, #188]	; (80069b8 <UART_SetConfig+0x6a8>)
 80068fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068fe:	e011      	b.n	8006924 <UART_SetConfig+0x614>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006900:	f7fe f9b8 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 8006904:	0003      	movs	r3, r0
 8006906:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006908:	e00c      	b.n	8006924 <UART_SetConfig+0x614>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800690a:	2380      	movs	r3, #128	; 0x80
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006910:	e008      	b.n	8006924 <UART_SetConfig+0x614>
      default:
        pclk = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006916:	231a      	movs	r3, #26
 8006918:	2220      	movs	r2, #32
 800691a:	189b      	adds	r3, r3, r2
 800691c:	19db      	adds	r3, r3, r7
 800691e:	2201      	movs	r2, #1
 8006920:	701a      	strb	r2, [r3, #0]
        break;
 8006922:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006926:	2b00      	cmp	r3, #0
 8006928:	d02a      	beq.n	8006980 <UART_SetConfig+0x670>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800692e:	4b23      	ldr	r3, [pc, #140]	; (80069bc <UART_SetConfig+0x6ac>)
 8006930:	0052      	lsls	r2, r2, #1
 8006932:	5ad3      	ldrh	r3, [r2, r3]
 8006934:	0019      	movs	r1, r3
 8006936:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006938:	f7f9 fbe4 	bl	8000104 <__udivsi3>
 800693c:	0003      	movs	r3, r0
 800693e:	001a      	movs	r2, r3
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	085b      	lsrs	r3, r3, #1
 8006946:	18d2      	adds	r2, r2, r3
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	0019      	movs	r1, r3
 800694e:	0010      	movs	r0, r2
 8006950:	f7f9 fbd8 	bl	8000104 <__udivsi3>
 8006954:	0003      	movs	r3, r0
 8006956:	b29b      	uxth	r3, r3
 8006958:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	2b0f      	cmp	r3, #15
 800695e:	d909      	bls.n	8006974 <UART_SetConfig+0x664>
 8006960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006962:	2380      	movs	r3, #128	; 0x80
 8006964:	025b      	lsls	r3, r3, #9
 8006966:	429a      	cmp	r2, r3
 8006968:	d204      	bcs.n	8006974 <UART_SetConfig+0x664>
      {
        huart->Instance->BRR = usartdiv;
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006970:	60da      	str	r2, [r3, #12]
 8006972:	e005      	b.n	8006980 <UART_SetConfig+0x670>
      }
      else
      {
        ret = HAL_ERROR;
 8006974:	231a      	movs	r3, #26
 8006976:	2220      	movs	r2, #32
 8006978:	189b      	adds	r3, r3, r2
 800697a:	19db      	adds	r3, r3, r7
 800697c:	2201      	movs	r2, #1
 800697e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	226a      	movs	r2, #106	; 0x6a
 8006984:	2101      	movs	r1, #1
 8006986:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	2268      	movs	r2, #104	; 0x68
 800698c:	2101      	movs	r1, #1
 800698e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	2200      	movs	r2, #0
 8006994:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	2200      	movs	r2, #0
 800699a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800699c:	231a      	movs	r3, #26
 800699e:	2220      	movs	r2, #32
 80069a0:	189b      	adds	r3, r3, r2
 80069a2:	19db      	adds	r3, r3, r7
 80069a4:	781b      	ldrb	r3, [r3, #0]
}
 80069a6:	0018      	movs	r0, r3
 80069a8:	46bd      	mov	sp, r7
 80069aa:	b010      	add	sp, #64	; 0x40
 80069ac:	bdb0      	pop	{r4, r5, r7, pc}
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	40008000 	.word	0x40008000
 80069b4:	40008400 	.word	0x40008400
 80069b8:	00f42400 	.word	0x00f42400
 80069bc:	08007624 	.word	0x08007624

080069c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	2201      	movs	r2, #1
 80069ce:	4013      	ands	r3, r2
 80069d0:	d00b      	beq.n	80069ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	4a4a      	ldr	r2, [pc, #296]	; (8006b04 <UART_AdvFeatureConfig+0x144>)
 80069da:	4013      	ands	r3, r2
 80069dc:	0019      	movs	r1, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ee:	2202      	movs	r2, #2
 80069f0:	4013      	ands	r3, r2
 80069f2:	d00b      	beq.n	8006a0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	4a43      	ldr	r2, [pc, #268]	; (8006b08 <UART_AdvFeatureConfig+0x148>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	0019      	movs	r1, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	2204      	movs	r2, #4
 8006a12:	4013      	ands	r3, r2
 8006a14:	d00b      	beq.n	8006a2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	4a3b      	ldr	r2, [pc, #236]	; (8006b0c <UART_AdvFeatureConfig+0x14c>)
 8006a1e:	4013      	ands	r3, r2
 8006a20:	0019      	movs	r1, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a32:	2208      	movs	r2, #8
 8006a34:	4013      	ands	r3, r2
 8006a36:	d00b      	beq.n	8006a50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	4a34      	ldr	r2, [pc, #208]	; (8006b10 <UART_AdvFeatureConfig+0x150>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	0019      	movs	r1, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a54:	2210      	movs	r2, #16
 8006a56:	4013      	ands	r3, r2
 8006a58:	d00b      	beq.n	8006a72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	4a2c      	ldr	r2, [pc, #176]	; (8006b14 <UART_AdvFeatureConfig+0x154>)
 8006a62:	4013      	ands	r3, r2
 8006a64:	0019      	movs	r1, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a76:	2220      	movs	r2, #32
 8006a78:	4013      	ands	r3, r2
 8006a7a:	d00b      	beq.n	8006a94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	4a25      	ldr	r2, [pc, #148]	; (8006b18 <UART_AdvFeatureConfig+0x158>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	0019      	movs	r1, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a98:	2240      	movs	r2, #64	; 0x40
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	d01d      	beq.n	8006ada <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	4a1d      	ldr	r2, [pc, #116]	; (8006b1c <UART_AdvFeatureConfig+0x15c>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	0019      	movs	r1, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aba:	2380      	movs	r3, #128	; 0x80
 8006abc:	035b      	lsls	r3, r3, #13
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d10b      	bne.n	8006ada <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	4a15      	ldr	r2, [pc, #84]	; (8006b20 <UART_AdvFeatureConfig+0x160>)
 8006aca:	4013      	ands	r3, r2
 8006acc:	0019      	movs	r1, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	2280      	movs	r2, #128	; 0x80
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	d00b      	beq.n	8006afc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	4a0e      	ldr	r2, [pc, #56]	; (8006b24 <UART_AdvFeatureConfig+0x164>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	0019      	movs	r1, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	605a      	str	r2, [r3, #4]
  }
}
 8006afc:	46c0      	nop			; (mov r8, r8)
 8006afe:	46bd      	mov	sp, r7
 8006b00:	b002      	add	sp, #8
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	fffdffff 	.word	0xfffdffff
 8006b08:	fffeffff 	.word	0xfffeffff
 8006b0c:	fffbffff 	.word	0xfffbffff
 8006b10:	ffff7fff 	.word	0xffff7fff
 8006b14:	ffffefff 	.word	0xffffefff
 8006b18:	ffffdfff 	.word	0xffffdfff
 8006b1c:	ffefffff 	.word	0xffefffff
 8006b20:	ff9fffff 	.word	0xff9fffff
 8006b24:	fff7ffff 	.word	0xfff7ffff

08006b28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	228c      	movs	r2, #140	; 0x8c
 8006b34:	2100      	movs	r1, #0
 8006b36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b38:	f7fc feba 	bl	80038b0 <HAL_GetTick>
 8006b3c:	0003      	movs	r3, r0
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2208      	movs	r2, #8
 8006b48:	4013      	ands	r3, r2
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d10c      	bne.n	8006b68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2280      	movs	r2, #128	; 0x80
 8006b52:	0391      	lsls	r1, r2, #14
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	4a18      	ldr	r2, [pc, #96]	; (8006bb8 <UART_CheckIdleState+0x90>)
 8006b58:	9200      	str	r2, [sp, #0]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f000 f82e 	bl	8006bbc <UART_WaitOnFlagUntilTimeout>
 8006b60:	1e03      	subs	r3, r0, #0
 8006b62:	d001      	beq.n	8006b68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e023      	b.n	8006bb0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2204      	movs	r2, #4
 8006b70:	4013      	ands	r3, r2
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d10c      	bne.n	8006b90 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2280      	movs	r2, #128	; 0x80
 8006b7a:	03d1      	lsls	r1, r2, #15
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	4a0e      	ldr	r2, [pc, #56]	; (8006bb8 <UART_CheckIdleState+0x90>)
 8006b80:	9200      	str	r2, [sp, #0]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f000 f81a 	bl	8006bbc <UART_WaitOnFlagUntilTimeout>
 8006b88:	1e03      	subs	r3, r0, #0
 8006b8a:	d001      	beq.n	8006b90 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e00f      	b.n	8006bb0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2284      	movs	r2, #132	; 0x84
 8006b94:	2120      	movs	r1, #32
 8006b96:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2288      	movs	r2, #136	; 0x88
 8006b9c:	2120      	movs	r1, #32
 8006b9e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2280      	movs	r2, #128	; 0x80
 8006baa:	2100      	movs	r1, #0
 8006bac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b004      	add	sp, #16
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	01ffffff 	.word	0x01ffffff

08006bbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b094      	sub	sp, #80	; 0x50
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	1dfb      	adds	r3, r7, #7
 8006bca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bcc:	e0a7      	b.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	d100      	bne.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006bd4:	e0a3      	b.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd6:	f7fc fe6b 	bl	80038b0 <HAL_GetTick>
 8006bda:	0002      	movs	r2, r0
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d302      	bcc.n	8006bec <UART_WaitOnFlagUntilTimeout+0x30>
 8006be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d13f      	bne.n	8006c6c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bec:	f3ef 8310 	mrs	r3, PRIMASK
 8006bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	f383 8810 	msr	PRIMASK, r3
}
 8006c00:	46c0      	nop			; (mov r8, r8)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	494e      	ldr	r1, [pc, #312]	; (8006d48 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006c0e:	400a      	ands	r2, r1
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c14:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	f383 8810 	msr	PRIMASK, r3
}
 8006c1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c22:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c26:	643b      	str	r3, [r7, #64]	; 0x40
 8006c28:	2301      	movs	r3, #1
 8006c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2e:	f383 8810 	msr	PRIMASK, r3
}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2101      	movs	r1, #1
 8006c40:	438a      	bics	r2, r1
 8006c42:	609a      	str	r2, [r3, #8]
 8006c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4a:	f383 8810 	msr	PRIMASK, r3
}
 8006c4e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2284      	movs	r2, #132	; 0x84
 8006c54:	2120      	movs	r1, #32
 8006c56:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2288      	movs	r2, #136	; 0x88
 8006c5c:	2120      	movs	r1, #32
 8006c5e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2280      	movs	r2, #128	; 0x80
 8006c64:	2100      	movs	r1, #0
 8006c66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e069      	b.n	8006d40 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2204      	movs	r2, #4
 8006c74:	4013      	ands	r3, r2
 8006c76:	d052      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	69da      	ldr	r2, [r3, #28]
 8006c7e:	2380      	movs	r3, #128	; 0x80
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	401a      	ands	r2, r3
 8006c84:	2380      	movs	r3, #128	; 0x80
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d148      	bne.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2280      	movs	r2, #128	; 0x80
 8006c92:	0112      	lsls	r2, r2, #4
 8006c94:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c96:	f3ef 8310 	mrs	r3, PRIMASK
 8006c9a:	613b      	str	r3, [r7, #16]
  return(result);
 8006c9c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f383 8810 	msr	PRIMASK, r3
}
 8006caa:	46c0      	nop			; (mov r8, r8)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4924      	ldr	r1, [pc, #144]	; (8006d48 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006cb8:	400a      	ands	r2, r1
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cbe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	f383 8810 	msr	PRIMASK, r3
}
 8006cc6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8006ccc:	61fb      	str	r3, [r7, #28]
  return(result);
 8006cce:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	f383 8810 	msr	PRIMASK, r3
}
 8006cdc:	46c0      	nop			; (mov r8, r8)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2101      	movs	r1, #1
 8006cea:	438a      	bics	r2, r1
 8006cec:	609a      	str	r2, [r3, #8]
 8006cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	f383 8810 	msr	PRIMASK, r3
}
 8006cf8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2284      	movs	r2, #132	; 0x84
 8006cfe:	2120      	movs	r1, #32
 8006d00:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2288      	movs	r2, #136	; 0x88
 8006d06:	2120      	movs	r1, #32
 8006d08:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	228c      	movs	r2, #140	; 0x8c
 8006d0e:	2120      	movs	r1, #32
 8006d10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2280      	movs	r2, #128	; 0x80
 8006d16:	2100      	movs	r1, #0
 8006d18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e010      	b.n	8006d40 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	4013      	ands	r3, r2
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	425a      	negs	r2, r3
 8006d2e:	4153      	adcs	r3, r2
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	001a      	movs	r2, r3
 8006d34:	1dfb      	adds	r3, r7, #7
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d100      	bne.n	8006d3e <UART_WaitOnFlagUntilTimeout+0x182>
 8006d3c:	e747      	b.n	8006bce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	0018      	movs	r0, r3
 8006d42:	46bd      	mov	sp, r7
 8006d44:	b014      	add	sp, #80	; 0x50
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	fffffe5f 	.word	0xfffffe5f

08006d4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b090      	sub	sp, #64	; 0x40
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	1dbb      	adds	r3, r7, #6
 8006d58:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	1dba      	adds	r2, r7, #6
 8006d64:	215c      	movs	r1, #92	; 0x5c
 8006d66:	8812      	ldrh	r2, [r2, #0]
 8006d68:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	228c      	movs	r2, #140	; 0x8c
 8006d6e:	2100      	movs	r1, #0
 8006d70:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2288      	movs	r2, #136	; 0x88
 8006d76:	2122      	movs	r1, #34	; 0x22
 8006d78:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d02c      	beq.n	8006ddc <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d86:	4a40      	ldr	r2, [pc, #256]	; (8006e88 <UART_Start_Receive_DMA+0x13c>)
 8006d88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d8e:	4a3f      	ldr	r2, [pc, #252]	; (8006e8c <UART_Start_Receive_DMA+0x140>)
 8006d90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d96:	4a3e      	ldr	r2, [pc, #248]	; (8006e90 <UART_Start_Receive_DMA+0x144>)
 8006d98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d9e:	2200      	movs	r2, #0
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3324      	adds	r3, #36	; 0x24
 8006dac:	0019      	movs	r1, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db2:	001a      	movs	r2, r3
 8006db4:	1dbb      	adds	r3, r7, #6
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	f7fc ff24 	bl	8003c04 <HAL_DMA_Start_IT>
 8006dbc:	1e03      	subs	r3, r0, #0
 8006dbe:	d00d      	beq.n	8006ddc <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	228c      	movs	r2, #140	; 0x8c
 8006dc4:	2110      	movs	r1, #16
 8006dc6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2280      	movs	r2, #128	; 0x80
 8006dcc:	2100      	movs	r1, #0
 8006dce:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2288      	movs	r2, #136	; 0x88
 8006dd4:	2120      	movs	r1, #32
 8006dd6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e050      	b.n	8006e7e <UART_Start_Receive_DMA+0x132>
    }
  }
  __HAL_UNLOCK(huart);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2280      	movs	r2, #128	; 0x80
 8006de0:	2100      	movs	r1, #0
 8006de2:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de4:	f3ef 8310 	mrs	r3, PRIMASK
 8006de8:	613b      	str	r3, [r7, #16]
  return(result);
 8006dea:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dee:	2301      	movs	r3, #1
 8006df0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f383 8810 	msr	PRIMASK, r3
}
 8006df8:	46c0      	nop			; (mov r8, r8)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2180      	movs	r1, #128	; 0x80
 8006e06:	0049      	lsls	r1, r1, #1
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	f383 8810 	msr	PRIMASK, r3
}
 8006e16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e18:	f3ef 8310 	mrs	r3, PRIMASK
 8006e1c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e1e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e20:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e22:	2301      	movs	r3, #1
 8006e24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	f383 8810 	msr	PRIMASK, r3
}
 8006e2c:	46c0      	nop			; (mov r8, r8)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2101      	movs	r1, #1
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	609a      	str	r2, [r3, #8]
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	f383 8810 	msr	PRIMASK, r3
}
 8006e48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e52:	637b      	str	r3, [r7, #52]	; 0x34
 8006e54:	2301      	movs	r3, #1
 8006e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5a:	f383 8810 	msr	PRIMASK, r3
}
 8006e5e:	46c0      	nop			; (mov r8, r8)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2140      	movs	r1, #64	; 0x40
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	609a      	str	r2, [r3, #8]
 8006e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e72:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e76:	f383 8810 	msr	PRIMASK, r3
}
 8006e7a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	0018      	movs	r0, r3
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b010      	add	sp, #64	; 0x40
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	08006fe1 	.word	0x08006fe1
 8006e8c:	08007109 	.word	0x08007109
 8006e90:	08007145 	.word	0x08007145

08006e94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08a      	sub	sp, #40	; 0x28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f383 8810 	msr	PRIMASK, r3
}
 8006eb0:	46c0      	nop			; (mov r8, r8)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	21c0      	movs	r1, #192	; 0xc0
 8006ebe:	438a      	bics	r2, r1
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f383 8810 	msr	PRIMASK, r3
}
 8006ecc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ece:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed2:	617b      	str	r3, [r7, #20]
  return(result);
 8006ed4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006ed6:	623b      	str	r3, [r7, #32]
 8006ed8:	2301      	movs	r3, #1
 8006eda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	f383 8810 	msr	PRIMASK, r3
}
 8006ee2:	46c0      	nop			; (mov r8, r8)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4908      	ldr	r1, [pc, #32]	; (8006f10 <UART_EndTxTransfer+0x7c>)
 8006ef0:	400a      	ands	r2, r1
 8006ef2:	609a      	str	r2, [r3, #8]
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	f383 8810 	msr	PRIMASK, r3
}
 8006efe:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2284      	movs	r2, #132	; 0x84
 8006f04:	2120      	movs	r1, #32
 8006f06:	5099      	str	r1, [r3, r2]
}
 8006f08:	46c0      	nop			; (mov r8, r8)
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	b00a      	add	sp, #40	; 0x28
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	ff7fffff 	.word	0xff7fffff

08006f14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08e      	sub	sp, #56	; 0x38
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f20:	617b      	str	r3, [r7, #20]
  return(result);
 8006f22:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f24:	637b      	str	r3, [r7, #52]	; 0x34
 8006f26:	2301      	movs	r3, #1
 8006f28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	f383 8810 	msr	PRIMASK, r3
}
 8006f30:	46c0      	nop			; (mov r8, r8)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4926      	ldr	r1, [pc, #152]	; (8006fd8 <UART_EndRxTransfer+0xc4>)
 8006f3e:	400a      	ands	r2, r1
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	f383 8810 	msr	PRIMASK, r3
}
 8006f4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f52:	623b      	str	r3, [r7, #32]
  return(result);
 8006f54:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f56:	633b      	str	r3, [r7, #48]	; 0x30
 8006f58:	2301      	movs	r3, #1
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	f383 8810 	msr	PRIMASK, r3
}
 8006f62:	46c0      	nop			; (mov r8, r8)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	491b      	ldr	r1, [pc, #108]	; (8006fdc <UART_EndRxTransfer+0xc8>)
 8006f70:	400a      	ands	r2, r1
 8006f72:	609a      	str	r2, [r3, #8]
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	f383 8810 	msr	PRIMASK, r3
}
 8006f7e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d118      	bne.n	8006fba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f88:	f3ef 8310 	mrs	r3, PRIMASK
 8006f8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f92:	2301      	movs	r3, #1
 8006f94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f383 8810 	msr	PRIMASK, r3
}
 8006f9c:	46c0      	nop			; (mov r8, r8)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2110      	movs	r1, #16
 8006faa:	438a      	bics	r2, r1
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f383 8810 	msr	PRIMASK, r3
}
 8006fb8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2288      	movs	r2, #136	; 0x88
 8006fbe:	2120      	movs	r1, #32
 8006fc0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	b00e      	add	sp, #56	; 0x38
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	fffffedf 	.word	0xfffffedf
 8006fdc:	effffffe 	.word	0xeffffffe

08006fe0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b094      	sub	sp, #80	; 0x50
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fec:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	d16f      	bne.n	80070da <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8006ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ffc:	225e      	movs	r2, #94	; 0x5e
 8006ffe:	2100      	movs	r1, #0
 8007000:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007002:	f3ef 8310 	mrs	r3, PRIMASK
 8007006:	61bb      	str	r3, [r7, #24]
  return(result);
 8007008:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800700a:	64bb      	str	r3, [r7, #72]	; 0x48
 800700c:	2301      	movs	r3, #1
 800700e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	f383 8810 	msr	PRIMASK, r3
}
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4938      	ldr	r1, [pc, #224]	; (8007104 <UART_DMAReceiveCplt+0x124>)
 8007024:	400a      	ands	r2, r1
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800702a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	f383 8810 	msr	PRIMASK, r3
}
 8007032:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007034:	f3ef 8310 	mrs	r3, PRIMASK
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800703c:	647b      	str	r3, [r7, #68]	; 0x44
 800703e:	2301      	movs	r3, #1
 8007040:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	f383 8810 	msr	PRIMASK, r3
}
 8007048:	46c0      	nop			; (mov r8, r8)
 800704a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2101      	movs	r1, #1
 8007056:	438a      	bics	r2, r1
 8007058:	609a      	str	r2, [r3, #8]
 800705a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800705c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007060:	f383 8810 	msr	PRIMASK, r3
}
 8007064:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007066:	f3ef 8310 	mrs	r3, PRIMASK
 800706a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800706e:	643b      	str	r3, [r7, #64]	; 0x40
 8007070:	2301      	movs	r3, #1
 8007072:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007076:	f383 8810 	msr	PRIMASK, r3
}
 800707a:	46c0      	nop			; (mov r8, r8)
 800707c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2140      	movs	r1, #64	; 0x40
 8007088:	438a      	bics	r2, r1
 800708a:	609a      	str	r2, [r3, #8]
 800708c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800708e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	f383 8810 	msr	PRIMASK, r3
}
 8007096:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800709a:	2288      	movs	r2, #136	; 0x88
 800709c:	2120      	movs	r1, #32
 800709e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d118      	bne.n	80070da <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070a8:	f3ef 8310 	mrs	r3, PRIMASK
 80070ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80070ae:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b2:	2301      	movs	r3, #1
 80070b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f383 8810 	msr	PRIMASK, r3
}
 80070bc:	46c0      	nop			; (mov r8, r8)
 80070be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2110      	movs	r1, #16
 80070ca:	438a      	bics	r2, r1
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f383 8810 	msr	PRIMASK, r3
}
 80070d8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d108      	bne.n	80070f4 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e4:	225c      	movs	r2, #92	; 0x5c
 80070e6:	5a9a      	ldrh	r2, [r3, r2]
 80070e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ea:	0011      	movs	r1, r2
 80070ec:	0018      	movs	r0, r3
 80070ee:	f7ff f903 	bl	80062f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070f2:	e003      	b.n	80070fc <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80070f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f6:	0018      	movs	r0, r3
 80070f8:	f7ff f8e6 	bl	80062c8 <HAL_UART_RxCpltCallback>
}
 80070fc:	46c0      	nop			; (mov r8, r8)
 80070fe:	46bd      	mov	sp, r7
 8007100:	b014      	add	sp, #80	; 0x50
 8007102:	bd80      	pop	{r7, pc}
 8007104:	fffffeff 	.word	0xfffffeff

08007108 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007114:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800711a:	2b01      	cmp	r3, #1
 800711c:	d10a      	bne.n	8007134 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	225c      	movs	r2, #92	; 0x5c
 8007122:	5a9b      	ldrh	r3, [r3, r2]
 8007124:	085b      	lsrs	r3, r3, #1
 8007126:	b29a      	uxth	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	0011      	movs	r1, r2
 800712c:	0018      	movs	r0, r3
 800712e:	f7ff f8e3 	bl	80062f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007132:	e003      	b.n	800713c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	0018      	movs	r0, r3
 8007138:	f7ff f8ce 	bl	80062d8 <HAL_UART_RxHalfCpltCallback>
}
 800713c:	46c0      	nop			; (mov r8, r8)
 800713e:	46bd      	mov	sp, r7
 8007140:	b004      	add	sp, #16
 8007142:	bd80      	pop	{r7, pc}

08007144 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2284      	movs	r2, #132	; 0x84
 8007156:	589b      	ldr	r3, [r3, r2]
 8007158:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2288      	movs	r2, #136	; 0x88
 800715e:	589b      	ldr	r3, [r3, r2]
 8007160:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	2280      	movs	r2, #128	; 0x80
 800716a:	4013      	ands	r3, r2
 800716c:	2b80      	cmp	r3, #128	; 0x80
 800716e:	d10a      	bne.n	8007186 <UART_DMAError+0x42>
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	2b21      	cmp	r3, #33	; 0x21
 8007174:	d107      	bne.n	8007186 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2256      	movs	r2, #86	; 0x56
 800717a:	2100      	movs	r1, #0
 800717c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	0018      	movs	r0, r3
 8007182:	f7ff fe87 	bl	8006e94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	2240      	movs	r2, #64	; 0x40
 800718e:	4013      	ands	r3, r2
 8007190:	2b40      	cmp	r3, #64	; 0x40
 8007192:	d10a      	bne.n	80071aa <UART_DMAError+0x66>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2b22      	cmp	r3, #34	; 0x22
 8007198:	d107      	bne.n	80071aa <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	225e      	movs	r2, #94	; 0x5e
 800719e:	2100      	movs	r1, #0
 80071a0:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	0018      	movs	r0, r3
 80071a6:	f7ff feb5 	bl	8006f14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	228c      	movs	r2, #140	; 0x8c
 80071ae:	589b      	ldr	r3, [r3, r2]
 80071b0:	2210      	movs	r2, #16
 80071b2:	431a      	orrs	r2, r3
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	218c      	movs	r1, #140	; 0x8c
 80071b8:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	0018      	movs	r0, r3
 80071be:	f7ff f893 	bl	80062e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	46bd      	mov	sp, r7
 80071c6:	b006      	add	sp, #24
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2280      	movs	r2, #128	; 0x80
 80071d8:	5c9b      	ldrb	r3, [r3, r2]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80071de:	2302      	movs	r3, #2
 80071e0:	e027      	b.n	8007232 <HAL_UARTEx_DisableFifoMode+0x66>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2280      	movs	r2, #128	; 0x80
 80071e6:	2101      	movs	r1, #1
 80071e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2284      	movs	r2, #132	; 0x84
 80071ee:	2124      	movs	r1, #36	; 0x24
 80071f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2101      	movs	r1, #1
 8007206:	438a      	bics	r2, r1
 8007208:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4a0b      	ldr	r2, [pc, #44]	; (800723c <HAL_UARTEx_DisableFifoMode+0x70>)
 800720e:	4013      	ands	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2284      	movs	r2, #132	; 0x84
 8007224:	2120      	movs	r1, #32
 8007226:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2280      	movs	r2, #128	; 0x80
 800722c:	2100      	movs	r1, #0
 800722e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	0018      	movs	r0, r3
 8007234:	46bd      	mov	sp, r7
 8007236:	b004      	add	sp, #16
 8007238:	bd80      	pop	{r7, pc}
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	dfffffff 	.word	0xdfffffff

08007240 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2280      	movs	r2, #128	; 0x80
 800724e:	5c9b      	ldrb	r3, [r3, r2]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007254:	2302      	movs	r3, #2
 8007256:	e02e      	b.n	80072b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2280      	movs	r2, #128	; 0x80
 800725c:	2101      	movs	r1, #1
 800725e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2284      	movs	r2, #132	; 0x84
 8007264:	2124      	movs	r1, #36	; 0x24
 8007266:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2101      	movs	r1, #1
 800727c:	438a      	bics	r2, r1
 800727e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	08d9      	lsrs	r1, r3, #3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	430a      	orrs	r2, r1
 8007292:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	0018      	movs	r0, r3
 8007298:	f000 f854 	bl	8007344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2284      	movs	r2, #132	; 0x84
 80072a8:	2120      	movs	r1, #32
 80072aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2280      	movs	r2, #128	; 0x80
 80072b0:	2100      	movs	r1, #0
 80072b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	0018      	movs	r0, r3
 80072b8:	46bd      	mov	sp, r7
 80072ba:	b004      	add	sp, #16
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2280      	movs	r2, #128	; 0x80
 80072ce:	5c9b      	ldrb	r3, [r3, r2]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d101      	bne.n	80072d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072d4:	2302      	movs	r3, #2
 80072d6:	e02f      	b.n	8007338 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2280      	movs	r2, #128	; 0x80
 80072dc:	2101      	movs	r1, #1
 80072de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2284      	movs	r2, #132	; 0x84
 80072e4:	2124      	movs	r1, #36	; 0x24
 80072e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2101      	movs	r1, #1
 80072fc:	438a      	bics	r2, r1
 80072fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	4a0e      	ldr	r2, [pc, #56]	; (8007340 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007308:	4013      	ands	r3, r2
 800730a:	0019      	movs	r1, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	0018      	movs	r0, r3
 800731a:	f000 f813 	bl	8007344 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2284      	movs	r2, #132	; 0x84
 800732a:	2120      	movs	r1, #32
 800732c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2280      	movs	r2, #128	; 0x80
 8007332:	2100      	movs	r1, #0
 8007334:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	0018      	movs	r0, r3
 800733a:	46bd      	mov	sp, r7
 800733c:	b004      	add	sp, #16
 800733e:	bd80      	pop	{r7, pc}
 8007340:	f1ffffff 	.word	0xf1ffffff

08007344 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007350:	2b00      	cmp	r3, #0
 8007352:	d108      	bne.n	8007366 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	226a      	movs	r2, #106	; 0x6a
 8007358:	2101      	movs	r1, #1
 800735a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2268      	movs	r2, #104	; 0x68
 8007360:	2101      	movs	r1, #1
 8007362:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007364:	e043      	b.n	80073ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007366:	260f      	movs	r6, #15
 8007368:	19bb      	adds	r3, r7, r6
 800736a:	2208      	movs	r2, #8
 800736c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800736e:	200e      	movs	r0, #14
 8007370:	183b      	adds	r3, r7, r0
 8007372:	2208      	movs	r2, #8
 8007374:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	0e5b      	lsrs	r3, r3, #25
 800737e:	b2da      	uxtb	r2, r3
 8007380:	240d      	movs	r4, #13
 8007382:	193b      	adds	r3, r7, r4
 8007384:	2107      	movs	r1, #7
 8007386:	400a      	ands	r2, r1
 8007388:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	0f5b      	lsrs	r3, r3, #29
 8007392:	b2da      	uxtb	r2, r3
 8007394:	250c      	movs	r5, #12
 8007396:	197b      	adds	r3, r7, r5
 8007398:	2107      	movs	r1, #7
 800739a:	400a      	ands	r2, r1
 800739c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800739e:	183b      	adds	r3, r7, r0
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	197a      	adds	r2, r7, r5
 80073a4:	7812      	ldrb	r2, [r2, #0]
 80073a6:	4914      	ldr	r1, [pc, #80]	; (80073f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80073a8:	5c8a      	ldrb	r2, [r1, r2]
 80073aa:	435a      	muls	r2, r3
 80073ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80073ae:	197b      	adds	r3, r7, r5
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	4a12      	ldr	r2, [pc, #72]	; (80073fc <UARTEx_SetNbDataToProcess+0xb8>)
 80073b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073b6:	0019      	movs	r1, r3
 80073b8:	f7f8 ff2e 	bl	8000218 <__divsi3>
 80073bc:	0003      	movs	r3, r0
 80073be:	b299      	uxth	r1, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	226a      	movs	r2, #106	; 0x6a
 80073c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073c6:	19bb      	adds	r3, r7, r6
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	193a      	adds	r2, r7, r4
 80073cc:	7812      	ldrb	r2, [r2, #0]
 80073ce:	490a      	ldr	r1, [pc, #40]	; (80073f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80073d0:	5c8a      	ldrb	r2, [r1, r2]
 80073d2:	435a      	muls	r2, r3
 80073d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80073d6:	193b      	adds	r3, r7, r4
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	4a08      	ldr	r2, [pc, #32]	; (80073fc <UARTEx_SetNbDataToProcess+0xb8>)
 80073dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073de:	0019      	movs	r1, r3
 80073e0:	f7f8 ff1a 	bl	8000218 <__divsi3>
 80073e4:	0003      	movs	r3, r0
 80073e6:	b299      	uxth	r1, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2268      	movs	r2, #104	; 0x68
 80073ec:	5299      	strh	r1, [r3, r2]
}
 80073ee:	46c0      	nop			; (mov r8, r8)
 80073f0:	46bd      	mov	sp, r7
 80073f2:	b005      	add	sp, #20
 80073f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	0800763c 	.word	0x0800763c
 80073fc:	08007644 	.word	0x08007644

08007400 <__libc_init_array>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	2600      	movs	r6, #0
 8007404:	4d0c      	ldr	r5, [pc, #48]	; (8007438 <__libc_init_array+0x38>)
 8007406:	4c0d      	ldr	r4, [pc, #52]	; (800743c <__libc_init_array+0x3c>)
 8007408:	1b64      	subs	r4, r4, r5
 800740a:	10a4      	asrs	r4, r4, #2
 800740c:	42a6      	cmp	r6, r4
 800740e:	d109      	bne.n	8007424 <__libc_init_array+0x24>
 8007410:	2600      	movs	r6, #0
 8007412:	f000 f821 	bl	8007458 <_init>
 8007416:	4d0a      	ldr	r5, [pc, #40]	; (8007440 <__libc_init_array+0x40>)
 8007418:	4c0a      	ldr	r4, [pc, #40]	; (8007444 <__libc_init_array+0x44>)
 800741a:	1b64      	subs	r4, r4, r5
 800741c:	10a4      	asrs	r4, r4, #2
 800741e:	42a6      	cmp	r6, r4
 8007420:	d105      	bne.n	800742e <__libc_init_array+0x2e>
 8007422:	bd70      	pop	{r4, r5, r6, pc}
 8007424:	00b3      	lsls	r3, r6, #2
 8007426:	58eb      	ldr	r3, [r5, r3]
 8007428:	4798      	blx	r3
 800742a:	3601      	adds	r6, #1
 800742c:	e7ee      	b.n	800740c <__libc_init_array+0xc>
 800742e:	00b3      	lsls	r3, r6, #2
 8007430:	58eb      	ldr	r3, [r5, r3]
 8007432:	4798      	blx	r3
 8007434:	3601      	adds	r6, #1
 8007436:	e7f2      	b.n	800741e <__libc_init_array+0x1e>
 8007438:	08007654 	.word	0x08007654
 800743c:	08007654 	.word	0x08007654
 8007440:	08007654 	.word	0x08007654
 8007444:	08007658 	.word	0x08007658

08007448 <memset>:
 8007448:	0003      	movs	r3, r0
 800744a:	1882      	adds	r2, r0, r2
 800744c:	4293      	cmp	r3, r2
 800744e:	d100      	bne.n	8007452 <memset+0xa>
 8007450:	4770      	bx	lr
 8007452:	7019      	strb	r1, [r3, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	e7f9      	b.n	800744c <memset+0x4>

08007458 <_init>:
 8007458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745a:	46c0      	nop			; (mov r8, r8)
 800745c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745e:	bc08      	pop	{r3}
 8007460:	469e      	mov	lr, r3
 8007462:	4770      	bx	lr

08007464 <_fini>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746a:	bc08      	pop	{r3}
 800746c:	469e      	mov	lr, r3
 800746e:	4770      	bx	lr
