
ew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006044  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800629c  0800629c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800629c  0800629c  0001629c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062a4  080062a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062a4  080062a4  000162a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080062ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000000c  080062b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  080062b8  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011731  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002262  00000000  00000000  00031765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  000339c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  000348b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b77b  00000000  00000000  000356d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119a1  00000000  00000000  00050e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b69c8  00000000  00000000  000627ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001191b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003834  00000000  00000000  00119204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080060e8 	.word	0x080060e8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080060e8 	.word	0x080060e8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fc59 	bl	8000cb0 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fbe5 	bl	8000bd8 <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fc4b 	bl	8000cb0 <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fc41 	bl	8000cb0 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fbf1 	bl	8000c24 <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fbe7 	bl	8000c24 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_uldivmod>:
 8000464:	2b00      	cmp	r3, #0
 8000466:	d111      	bne.n	800048c <__aeabi_uldivmod+0x28>
 8000468:	2a00      	cmp	r2, #0
 800046a:	d10f      	bne.n	800048c <__aeabi_uldivmod+0x28>
 800046c:	2900      	cmp	r1, #0
 800046e:	d100      	bne.n	8000472 <__aeabi_uldivmod+0xe>
 8000470:	2800      	cmp	r0, #0
 8000472:	d002      	beq.n	800047a <__aeabi_uldivmod+0x16>
 8000474:	2100      	movs	r1, #0
 8000476:	43c9      	mvns	r1, r1
 8000478:	0008      	movs	r0, r1
 800047a:	b407      	push	{r0, r1, r2}
 800047c:	4802      	ldr	r0, [pc, #8]	; (8000488 <__aeabi_uldivmod+0x24>)
 800047e:	a102      	add	r1, pc, #8	; (adr r1, 8000488 <__aeabi_uldivmod+0x24>)
 8000480:	1840      	adds	r0, r0, r1
 8000482:	9002      	str	r0, [sp, #8]
 8000484:	bd03      	pop	{r0, r1, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	ffffff65 	.word	0xffffff65
 800048c:	b403      	push	{r0, r1}
 800048e:	4668      	mov	r0, sp
 8000490:	b501      	push	{r0, lr}
 8000492:	9802      	ldr	r0, [sp, #8]
 8000494:	f000 f81e 	bl	80004d4 <__udivmoddi4>
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	469e      	mov	lr, r3
 800049c:	b002      	add	sp, #8
 800049e:	bc0c      	pop	{r2, r3}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_f2uiz>:
 80004a4:	219e      	movs	r1, #158	; 0x9e
 80004a6:	b510      	push	{r4, lr}
 80004a8:	05c9      	lsls	r1, r1, #23
 80004aa:	1c04      	adds	r4, r0, #0
 80004ac:	f7ff ffd0 	bl	8000450 <__aeabi_fcmpge>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d103      	bne.n	80004bc <__aeabi_f2uiz+0x18>
 80004b4:	1c20      	adds	r0, r4, #0
 80004b6:	f000 ff13 	bl	80012e0 <__aeabi_f2iz>
 80004ba:	bd10      	pop	{r4, pc}
 80004bc:	219e      	movs	r1, #158	; 0x9e
 80004be:	1c20      	adds	r0, r4, #0
 80004c0:	05c9      	lsls	r1, r1, #23
 80004c2:	f000 fd5f 	bl	8000f84 <__aeabi_fsub>
 80004c6:	f000 ff0b 	bl	80012e0 <__aeabi_f2iz>
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	061b      	lsls	r3, r3, #24
 80004ce:	469c      	mov	ip, r3
 80004d0:	4460      	add	r0, ip
 80004d2:	e7f2      	b.n	80004ba <__aeabi_f2uiz+0x16>

080004d4 <__udivmoddi4>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	4657      	mov	r7, sl
 80004d8:	464e      	mov	r6, r9
 80004da:	4645      	mov	r5, r8
 80004dc:	46de      	mov	lr, fp
 80004de:	b5e0      	push	{r5, r6, r7, lr}
 80004e0:	0004      	movs	r4, r0
 80004e2:	000d      	movs	r5, r1
 80004e4:	4692      	mov	sl, r2
 80004e6:	4699      	mov	r9, r3
 80004e8:	b083      	sub	sp, #12
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d830      	bhi.n	8000550 <__udivmoddi4+0x7c>
 80004ee:	d02d      	beq.n	800054c <__udivmoddi4+0x78>
 80004f0:	4649      	mov	r1, r9
 80004f2:	4650      	mov	r0, sl
 80004f4:	f000 ffc2 	bl	800147c <__clzdi2>
 80004f8:	0029      	movs	r1, r5
 80004fa:	0006      	movs	r6, r0
 80004fc:	0020      	movs	r0, r4
 80004fe:	f000 ffbd 	bl	800147c <__clzdi2>
 8000502:	1a33      	subs	r3, r6, r0
 8000504:	4698      	mov	r8, r3
 8000506:	3b20      	subs	r3, #32
 8000508:	469b      	mov	fp, r3
 800050a:	d433      	bmi.n	8000574 <__udivmoddi4+0xa0>
 800050c:	465a      	mov	r2, fp
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	4642      	mov	r2, r8
 8000514:	001f      	movs	r7, r3
 8000516:	4653      	mov	r3, sl
 8000518:	4093      	lsls	r3, r2
 800051a:	001e      	movs	r6, r3
 800051c:	42af      	cmp	r7, r5
 800051e:	d83a      	bhi.n	8000596 <__udivmoddi4+0xc2>
 8000520:	42af      	cmp	r7, r5
 8000522:	d100      	bne.n	8000526 <__udivmoddi4+0x52>
 8000524:	e078      	b.n	8000618 <__udivmoddi4+0x144>
 8000526:	465b      	mov	r3, fp
 8000528:	1ba4      	subs	r4, r4, r6
 800052a:	41bd      	sbcs	r5, r7
 800052c:	2b00      	cmp	r3, #0
 800052e:	da00      	bge.n	8000532 <__udivmoddi4+0x5e>
 8000530:	e075      	b.n	800061e <__udivmoddi4+0x14a>
 8000532:	2200      	movs	r2, #0
 8000534:	2300      	movs	r3, #0
 8000536:	9200      	str	r2, [sp, #0]
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	465a      	mov	r2, fp
 800053e:	4093      	lsls	r3, r2
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	4642      	mov	r2, r8
 8000546:	4093      	lsls	r3, r2
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	e028      	b.n	800059e <__udivmoddi4+0xca>
 800054c:	4282      	cmp	r2, r0
 800054e:	d9cf      	bls.n	80004f0 <__udivmoddi4+0x1c>
 8000550:	2200      	movs	r2, #0
 8000552:	2300      	movs	r3, #0
 8000554:	9200      	str	r2, [sp, #0]
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <__udivmoddi4+0x8e>
 800055e:	601c      	str	r4, [r3, #0]
 8000560:	605d      	str	r5, [r3, #4]
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	b003      	add	sp, #12
 8000568:	bcf0      	pop	{r4, r5, r6, r7}
 800056a:	46bb      	mov	fp, r7
 800056c:	46b2      	mov	sl, r6
 800056e:	46a9      	mov	r9, r5
 8000570:	46a0      	mov	r8, r4
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	4642      	mov	r2, r8
 8000576:	2320      	movs	r3, #32
 8000578:	1a9b      	subs	r3, r3, r2
 800057a:	4652      	mov	r2, sl
 800057c:	40da      	lsrs	r2, r3
 800057e:	4641      	mov	r1, r8
 8000580:	0013      	movs	r3, r2
 8000582:	464a      	mov	r2, r9
 8000584:	408a      	lsls	r2, r1
 8000586:	0017      	movs	r7, r2
 8000588:	4642      	mov	r2, r8
 800058a:	431f      	orrs	r7, r3
 800058c:	4653      	mov	r3, sl
 800058e:	4093      	lsls	r3, r2
 8000590:	001e      	movs	r6, r3
 8000592:	42af      	cmp	r7, r5
 8000594:	d9c4      	bls.n	8000520 <__udivmoddi4+0x4c>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	4643      	mov	r3, r8
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d0d9      	beq.n	8000558 <__udivmoddi4+0x84>
 80005a4:	07fb      	lsls	r3, r7, #31
 80005a6:	0872      	lsrs	r2, r6, #1
 80005a8:	431a      	orrs	r2, r3
 80005aa:	4646      	mov	r6, r8
 80005ac:	087b      	lsrs	r3, r7, #1
 80005ae:	e00e      	b.n	80005ce <__udivmoddi4+0xfa>
 80005b0:	42ab      	cmp	r3, r5
 80005b2:	d101      	bne.n	80005b8 <__udivmoddi4+0xe4>
 80005b4:	42a2      	cmp	r2, r4
 80005b6:	d80c      	bhi.n	80005d2 <__udivmoddi4+0xfe>
 80005b8:	1aa4      	subs	r4, r4, r2
 80005ba:	419d      	sbcs	r5, r3
 80005bc:	2001      	movs	r0, #1
 80005be:	1924      	adds	r4, r4, r4
 80005c0:	416d      	adcs	r5, r5
 80005c2:	2100      	movs	r1, #0
 80005c4:	3e01      	subs	r6, #1
 80005c6:	1824      	adds	r4, r4, r0
 80005c8:	414d      	adcs	r5, r1
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d006      	beq.n	80005dc <__udivmoddi4+0x108>
 80005ce:	42ab      	cmp	r3, r5
 80005d0:	d9ee      	bls.n	80005b0 <__udivmoddi4+0xdc>
 80005d2:	3e01      	subs	r6, #1
 80005d4:	1924      	adds	r4, r4, r4
 80005d6:	416d      	adcs	r5, r5
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d1f8      	bne.n	80005ce <__udivmoddi4+0xfa>
 80005dc:	9800      	ldr	r0, [sp, #0]
 80005de:	9901      	ldr	r1, [sp, #4]
 80005e0:	465b      	mov	r3, fp
 80005e2:	1900      	adds	r0, r0, r4
 80005e4:	4169      	adcs	r1, r5
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db24      	blt.n	8000634 <__udivmoddi4+0x160>
 80005ea:	002b      	movs	r3, r5
 80005ec:	465a      	mov	r2, fp
 80005ee:	4644      	mov	r4, r8
 80005f0:	40d3      	lsrs	r3, r2
 80005f2:	002a      	movs	r2, r5
 80005f4:	40e2      	lsrs	r2, r4
 80005f6:	001c      	movs	r4, r3
 80005f8:	465b      	mov	r3, fp
 80005fa:	0015      	movs	r5, r2
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db2a      	blt.n	8000656 <__udivmoddi4+0x182>
 8000600:	0026      	movs	r6, r4
 8000602:	409e      	lsls	r6, r3
 8000604:	0033      	movs	r3, r6
 8000606:	0026      	movs	r6, r4
 8000608:	4647      	mov	r7, r8
 800060a:	40be      	lsls	r6, r7
 800060c:	0032      	movs	r2, r6
 800060e:	1a80      	subs	r0, r0, r2
 8000610:	4199      	sbcs	r1, r3
 8000612:	9000      	str	r0, [sp, #0]
 8000614:	9101      	str	r1, [sp, #4]
 8000616:	e79f      	b.n	8000558 <__udivmoddi4+0x84>
 8000618:	42a3      	cmp	r3, r4
 800061a:	d8bc      	bhi.n	8000596 <__udivmoddi4+0xc2>
 800061c:	e783      	b.n	8000526 <__udivmoddi4+0x52>
 800061e:	4642      	mov	r2, r8
 8000620:	2320      	movs	r3, #32
 8000622:	2100      	movs	r1, #0
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	2200      	movs	r2, #0
 8000628:	9100      	str	r1, [sp, #0]
 800062a:	9201      	str	r2, [sp, #4]
 800062c:	2201      	movs	r2, #1
 800062e:	40da      	lsrs	r2, r3
 8000630:	9201      	str	r2, [sp, #4]
 8000632:	e786      	b.n	8000542 <__udivmoddi4+0x6e>
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	002a      	movs	r2, r5
 800063c:	4646      	mov	r6, r8
 800063e:	409a      	lsls	r2, r3
 8000640:	0023      	movs	r3, r4
 8000642:	40f3      	lsrs	r3, r6
 8000644:	4644      	mov	r4, r8
 8000646:	4313      	orrs	r3, r2
 8000648:	002a      	movs	r2, r5
 800064a:	40e2      	lsrs	r2, r4
 800064c:	001c      	movs	r4, r3
 800064e:	465b      	mov	r3, fp
 8000650:	0015      	movs	r5, r2
 8000652:	2b00      	cmp	r3, #0
 8000654:	dad4      	bge.n	8000600 <__udivmoddi4+0x12c>
 8000656:	4642      	mov	r2, r8
 8000658:	002f      	movs	r7, r5
 800065a:	2320      	movs	r3, #32
 800065c:	0026      	movs	r6, r4
 800065e:	4097      	lsls	r7, r2
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	40de      	lsrs	r6, r3
 8000664:	003b      	movs	r3, r7
 8000666:	4333      	orrs	r3, r6
 8000668:	e7cd      	b.n	8000606 <__udivmoddi4+0x132>
 800066a:	46c0      	nop			; (mov r8, r8)

0800066c <__aeabi_fadd>:
 800066c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066e:	46c6      	mov	lr, r8
 8000670:	0243      	lsls	r3, r0, #9
 8000672:	0a5b      	lsrs	r3, r3, #9
 8000674:	024e      	lsls	r6, r1, #9
 8000676:	0045      	lsls	r5, r0, #1
 8000678:	004f      	lsls	r7, r1, #1
 800067a:	00da      	lsls	r2, r3, #3
 800067c:	0fc4      	lsrs	r4, r0, #31
 800067e:	469c      	mov	ip, r3
 8000680:	0a70      	lsrs	r0, r6, #9
 8000682:	4690      	mov	r8, r2
 8000684:	b500      	push	{lr}
 8000686:	0e2d      	lsrs	r5, r5, #24
 8000688:	0e3f      	lsrs	r7, r7, #24
 800068a:	0fc9      	lsrs	r1, r1, #31
 800068c:	09b6      	lsrs	r6, r6, #6
 800068e:	428c      	cmp	r4, r1
 8000690:	d04b      	beq.n	800072a <__aeabi_fadd+0xbe>
 8000692:	1bea      	subs	r2, r5, r7
 8000694:	2a00      	cmp	r2, #0
 8000696:	dd36      	ble.n	8000706 <__aeabi_fadd+0x9a>
 8000698:	2f00      	cmp	r7, #0
 800069a:	d061      	beq.n	8000760 <__aeabi_fadd+0xf4>
 800069c:	2dff      	cmp	r5, #255	; 0xff
 800069e:	d100      	bne.n	80006a2 <__aeabi_fadd+0x36>
 80006a0:	e0ad      	b.n	80007fe <__aeabi_fadd+0x192>
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	04db      	lsls	r3, r3, #19
 80006a6:	431e      	orrs	r6, r3
 80006a8:	2a1b      	cmp	r2, #27
 80006aa:	dc00      	bgt.n	80006ae <__aeabi_fadd+0x42>
 80006ac:	e0d3      	b.n	8000856 <__aeabi_fadd+0x1ea>
 80006ae:	2001      	movs	r0, #1
 80006b0:	4643      	mov	r3, r8
 80006b2:	1a18      	subs	r0, r3, r0
 80006b4:	0143      	lsls	r3, r0, #5
 80006b6:	d400      	bmi.n	80006ba <__aeabi_fadd+0x4e>
 80006b8:	e08c      	b.n	80007d4 <__aeabi_fadd+0x168>
 80006ba:	0180      	lsls	r0, r0, #6
 80006bc:	0987      	lsrs	r7, r0, #6
 80006be:	0038      	movs	r0, r7
 80006c0:	f000 febe 	bl	8001440 <__clzsi2>
 80006c4:	3805      	subs	r0, #5
 80006c6:	4087      	lsls	r7, r0
 80006c8:	4285      	cmp	r5, r0
 80006ca:	dc00      	bgt.n	80006ce <__aeabi_fadd+0x62>
 80006cc:	e0b6      	b.n	800083c <__aeabi_fadd+0x1d0>
 80006ce:	1a2d      	subs	r5, r5, r0
 80006d0:	48b3      	ldr	r0, [pc, #716]	; (80009a0 <__aeabi_fadd+0x334>)
 80006d2:	4038      	ands	r0, r7
 80006d4:	0743      	lsls	r3, r0, #29
 80006d6:	d004      	beq.n	80006e2 <__aeabi_fadd+0x76>
 80006d8:	230f      	movs	r3, #15
 80006da:	4003      	ands	r3, r0
 80006dc:	2b04      	cmp	r3, #4
 80006de:	d000      	beq.n	80006e2 <__aeabi_fadd+0x76>
 80006e0:	3004      	adds	r0, #4
 80006e2:	0143      	lsls	r3, r0, #5
 80006e4:	d400      	bmi.n	80006e8 <__aeabi_fadd+0x7c>
 80006e6:	e078      	b.n	80007da <__aeabi_fadd+0x16e>
 80006e8:	1c6a      	adds	r2, r5, #1
 80006ea:	2dfe      	cmp	r5, #254	; 0xfe
 80006ec:	d065      	beq.n	80007ba <__aeabi_fadd+0x14e>
 80006ee:	0180      	lsls	r0, r0, #6
 80006f0:	0a43      	lsrs	r3, r0, #9
 80006f2:	469c      	mov	ip, r3
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	4663      	mov	r3, ip
 80006f8:	05d0      	lsls	r0, r2, #23
 80006fa:	4318      	orrs	r0, r3
 80006fc:	07e4      	lsls	r4, r4, #31
 80006fe:	4320      	orrs	r0, r4
 8000700:	bc80      	pop	{r7}
 8000702:	46b8      	mov	r8, r7
 8000704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000706:	2a00      	cmp	r2, #0
 8000708:	d035      	beq.n	8000776 <__aeabi_fadd+0x10a>
 800070a:	1b7a      	subs	r2, r7, r5
 800070c:	2d00      	cmp	r5, #0
 800070e:	d000      	beq.n	8000712 <__aeabi_fadd+0xa6>
 8000710:	e0af      	b.n	8000872 <__aeabi_fadd+0x206>
 8000712:	4643      	mov	r3, r8
 8000714:	2b00      	cmp	r3, #0
 8000716:	d100      	bne.n	800071a <__aeabi_fadd+0xae>
 8000718:	e0a7      	b.n	800086a <__aeabi_fadd+0x1fe>
 800071a:	1e53      	subs	r3, r2, #1
 800071c:	2a01      	cmp	r2, #1
 800071e:	d100      	bne.n	8000722 <__aeabi_fadd+0xb6>
 8000720:	e12f      	b.n	8000982 <__aeabi_fadd+0x316>
 8000722:	2aff      	cmp	r2, #255	; 0xff
 8000724:	d069      	beq.n	80007fa <__aeabi_fadd+0x18e>
 8000726:	001a      	movs	r2, r3
 8000728:	e0aa      	b.n	8000880 <__aeabi_fadd+0x214>
 800072a:	1be9      	subs	r1, r5, r7
 800072c:	2900      	cmp	r1, #0
 800072e:	dd70      	ble.n	8000812 <__aeabi_fadd+0x1a6>
 8000730:	2f00      	cmp	r7, #0
 8000732:	d037      	beq.n	80007a4 <__aeabi_fadd+0x138>
 8000734:	2dff      	cmp	r5, #255	; 0xff
 8000736:	d062      	beq.n	80007fe <__aeabi_fadd+0x192>
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	04db      	lsls	r3, r3, #19
 800073c:	431e      	orrs	r6, r3
 800073e:	291b      	cmp	r1, #27
 8000740:	dc00      	bgt.n	8000744 <__aeabi_fadd+0xd8>
 8000742:	e0b0      	b.n	80008a6 <__aeabi_fadd+0x23a>
 8000744:	2001      	movs	r0, #1
 8000746:	4440      	add	r0, r8
 8000748:	0143      	lsls	r3, r0, #5
 800074a:	d543      	bpl.n	80007d4 <__aeabi_fadd+0x168>
 800074c:	3501      	adds	r5, #1
 800074e:	2dff      	cmp	r5, #255	; 0xff
 8000750:	d033      	beq.n	80007ba <__aeabi_fadd+0x14e>
 8000752:	2301      	movs	r3, #1
 8000754:	4a93      	ldr	r2, [pc, #588]	; (80009a4 <__aeabi_fadd+0x338>)
 8000756:	4003      	ands	r3, r0
 8000758:	0840      	lsrs	r0, r0, #1
 800075a:	4010      	ands	r0, r2
 800075c:	4318      	orrs	r0, r3
 800075e:	e7b9      	b.n	80006d4 <__aeabi_fadd+0x68>
 8000760:	2e00      	cmp	r6, #0
 8000762:	d100      	bne.n	8000766 <__aeabi_fadd+0xfa>
 8000764:	e083      	b.n	800086e <__aeabi_fadd+0x202>
 8000766:	1e51      	subs	r1, r2, #1
 8000768:	2a01      	cmp	r2, #1
 800076a:	d100      	bne.n	800076e <__aeabi_fadd+0x102>
 800076c:	e0d8      	b.n	8000920 <__aeabi_fadd+0x2b4>
 800076e:	2aff      	cmp	r2, #255	; 0xff
 8000770:	d045      	beq.n	80007fe <__aeabi_fadd+0x192>
 8000772:	000a      	movs	r2, r1
 8000774:	e798      	b.n	80006a8 <__aeabi_fadd+0x3c>
 8000776:	27fe      	movs	r7, #254	; 0xfe
 8000778:	1c6a      	adds	r2, r5, #1
 800077a:	4217      	tst	r7, r2
 800077c:	d000      	beq.n	8000780 <__aeabi_fadd+0x114>
 800077e:	e086      	b.n	800088e <__aeabi_fadd+0x222>
 8000780:	2d00      	cmp	r5, #0
 8000782:	d000      	beq.n	8000786 <__aeabi_fadd+0x11a>
 8000784:	e0b7      	b.n	80008f6 <__aeabi_fadd+0x28a>
 8000786:	4643      	mov	r3, r8
 8000788:	2b00      	cmp	r3, #0
 800078a:	d100      	bne.n	800078e <__aeabi_fadd+0x122>
 800078c:	e0f3      	b.n	8000976 <__aeabi_fadd+0x30a>
 800078e:	2200      	movs	r2, #0
 8000790:	2e00      	cmp	r6, #0
 8000792:	d0b0      	beq.n	80006f6 <__aeabi_fadd+0x8a>
 8000794:	1b98      	subs	r0, r3, r6
 8000796:	0143      	lsls	r3, r0, #5
 8000798:	d400      	bmi.n	800079c <__aeabi_fadd+0x130>
 800079a:	e0fa      	b.n	8000992 <__aeabi_fadd+0x326>
 800079c:	4643      	mov	r3, r8
 800079e:	000c      	movs	r4, r1
 80007a0:	1af0      	subs	r0, r6, r3
 80007a2:	e797      	b.n	80006d4 <__aeabi_fadd+0x68>
 80007a4:	2e00      	cmp	r6, #0
 80007a6:	d100      	bne.n	80007aa <__aeabi_fadd+0x13e>
 80007a8:	e0c8      	b.n	800093c <__aeabi_fadd+0x2d0>
 80007aa:	1e4a      	subs	r2, r1, #1
 80007ac:	2901      	cmp	r1, #1
 80007ae:	d100      	bne.n	80007b2 <__aeabi_fadd+0x146>
 80007b0:	e0ae      	b.n	8000910 <__aeabi_fadd+0x2a4>
 80007b2:	29ff      	cmp	r1, #255	; 0xff
 80007b4:	d023      	beq.n	80007fe <__aeabi_fadd+0x192>
 80007b6:	0011      	movs	r1, r2
 80007b8:	e7c1      	b.n	800073e <__aeabi_fadd+0xd2>
 80007ba:	2300      	movs	r3, #0
 80007bc:	22ff      	movs	r2, #255	; 0xff
 80007be:	469c      	mov	ip, r3
 80007c0:	e799      	b.n	80006f6 <__aeabi_fadd+0x8a>
 80007c2:	21fe      	movs	r1, #254	; 0xfe
 80007c4:	1c6a      	adds	r2, r5, #1
 80007c6:	4211      	tst	r1, r2
 80007c8:	d077      	beq.n	80008ba <__aeabi_fadd+0x24e>
 80007ca:	2aff      	cmp	r2, #255	; 0xff
 80007cc:	d0f5      	beq.n	80007ba <__aeabi_fadd+0x14e>
 80007ce:	0015      	movs	r5, r2
 80007d0:	4446      	add	r6, r8
 80007d2:	0870      	lsrs	r0, r6, #1
 80007d4:	0743      	lsls	r3, r0, #29
 80007d6:	d000      	beq.n	80007da <__aeabi_fadd+0x16e>
 80007d8:	e77e      	b.n	80006d8 <__aeabi_fadd+0x6c>
 80007da:	08c3      	lsrs	r3, r0, #3
 80007dc:	2dff      	cmp	r5, #255	; 0xff
 80007de:	d00e      	beq.n	80007fe <__aeabi_fadd+0x192>
 80007e0:	025b      	lsls	r3, r3, #9
 80007e2:	0a5b      	lsrs	r3, r3, #9
 80007e4:	469c      	mov	ip, r3
 80007e6:	b2ea      	uxtb	r2, r5
 80007e8:	e785      	b.n	80006f6 <__aeabi_fadd+0x8a>
 80007ea:	2e00      	cmp	r6, #0
 80007ec:	d007      	beq.n	80007fe <__aeabi_fadd+0x192>
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	03d2      	lsls	r2, r2, #15
 80007f2:	4213      	tst	r3, r2
 80007f4:	d003      	beq.n	80007fe <__aeabi_fadd+0x192>
 80007f6:	4210      	tst	r0, r2
 80007f8:	d101      	bne.n	80007fe <__aeabi_fadd+0x192>
 80007fa:	000c      	movs	r4, r1
 80007fc:	0003      	movs	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d0db      	beq.n	80007ba <__aeabi_fadd+0x14e>
 8000802:	2080      	movs	r0, #128	; 0x80
 8000804:	03c0      	lsls	r0, r0, #15
 8000806:	4318      	orrs	r0, r3
 8000808:	0240      	lsls	r0, r0, #9
 800080a:	0a43      	lsrs	r3, r0, #9
 800080c:	469c      	mov	ip, r3
 800080e:	22ff      	movs	r2, #255	; 0xff
 8000810:	e771      	b.n	80006f6 <__aeabi_fadd+0x8a>
 8000812:	2900      	cmp	r1, #0
 8000814:	d0d5      	beq.n	80007c2 <__aeabi_fadd+0x156>
 8000816:	1b7a      	subs	r2, r7, r5
 8000818:	2d00      	cmp	r5, #0
 800081a:	d160      	bne.n	80008de <__aeabi_fadd+0x272>
 800081c:	4643      	mov	r3, r8
 800081e:	2b00      	cmp	r3, #0
 8000820:	d024      	beq.n	800086c <__aeabi_fadd+0x200>
 8000822:	1e53      	subs	r3, r2, #1
 8000824:	2a01      	cmp	r2, #1
 8000826:	d073      	beq.n	8000910 <__aeabi_fadd+0x2a4>
 8000828:	2aff      	cmp	r2, #255	; 0xff
 800082a:	d0e7      	beq.n	80007fc <__aeabi_fadd+0x190>
 800082c:	001a      	movs	r2, r3
 800082e:	2a1b      	cmp	r2, #27
 8000830:	dc00      	bgt.n	8000834 <__aeabi_fadd+0x1c8>
 8000832:	e085      	b.n	8000940 <__aeabi_fadd+0x2d4>
 8000834:	2001      	movs	r0, #1
 8000836:	003d      	movs	r5, r7
 8000838:	1980      	adds	r0, r0, r6
 800083a:	e785      	b.n	8000748 <__aeabi_fadd+0xdc>
 800083c:	2320      	movs	r3, #32
 800083e:	003a      	movs	r2, r7
 8000840:	1b45      	subs	r5, r0, r5
 8000842:	0038      	movs	r0, r7
 8000844:	3501      	adds	r5, #1
 8000846:	40ea      	lsrs	r2, r5
 8000848:	1b5d      	subs	r5, r3, r5
 800084a:	40a8      	lsls	r0, r5
 800084c:	1e43      	subs	r3, r0, #1
 800084e:	4198      	sbcs	r0, r3
 8000850:	2500      	movs	r5, #0
 8000852:	4310      	orrs	r0, r2
 8000854:	e73e      	b.n	80006d4 <__aeabi_fadd+0x68>
 8000856:	2320      	movs	r3, #32
 8000858:	0030      	movs	r0, r6
 800085a:	1a9b      	subs	r3, r3, r2
 800085c:	0031      	movs	r1, r6
 800085e:	4098      	lsls	r0, r3
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1e43      	subs	r3, r0, #1
 8000864:	4198      	sbcs	r0, r3
 8000866:	4308      	orrs	r0, r1
 8000868:	e722      	b.n	80006b0 <__aeabi_fadd+0x44>
 800086a:	000c      	movs	r4, r1
 800086c:	0003      	movs	r3, r0
 800086e:	0015      	movs	r5, r2
 8000870:	e7b4      	b.n	80007dc <__aeabi_fadd+0x170>
 8000872:	2fff      	cmp	r7, #255	; 0xff
 8000874:	d0c1      	beq.n	80007fa <__aeabi_fadd+0x18e>
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	4640      	mov	r0, r8
 800087a:	04db      	lsls	r3, r3, #19
 800087c:	4318      	orrs	r0, r3
 800087e:	4680      	mov	r8, r0
 8000880:	2a1b      	cmp	r2, #27
 8000882:	dd51      	ble.n	8000928 <__aeabi_fadd+0x2bc>
 8000884:	2001      	movs	r0, #1
 8000886:	000c      	movs	r4, r1
 8000888:	003d      	movs	r5, r7
 800088a:	1a30      	subs	r0, r6, r0
 800088c:	e712      	b.n	80006b4 <__aeabi_fadd+0x48>
 800088e:	4643      	mov	r3, r8
 8000890:	1b9f      	subs	r7, r3, r6
 8000892:	017b      	lsls	r3, r7, #5
 8000894:	d42b      	bmi.n	80008ee <__aeabi_fadd+0x282>
 8000896:	2f00      	cmp	r7, #0
 8000898:	d000      	beq.n	800089c <__aeabi_fadd+0x230>
 800089a:	e710      	b.n	80006be <__aeabi_fadd+0x52>
 800089c:	2300      	movs	r3, #0
 800089e:	2400      	movs	r4, #0
 80008a0:	2200      	movs	r2, #0
 80008a2:	469c      	mov	ip, r3
 80008a4:	e727      	b.n	80006f6 <__aeabi_fadd+0x8a>
 80008a6:	2320      	movs	r3, #32
 80008a8:	0032      	movs	r2, r6
 80008aa:	0030      	movs	r0, r6
 80008ac:	40ca      	lsrs	r2, r1
 80008ae:	1a59      	subs	r1, r3, r1
 80008b0:	4088      	lsls	r0, r1
 80008b2:	1e43      	subs	r3, r0, #1
 80008b4:	4198      	sbcs	r0, r3
 80008b6:	4310      	orrs	r0, r2
 80008b8:	e745      	b.n	8000746 <__aeabi_fadd+0xda>
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d14a      	bne.n	8000954 <__aeabi_fadd+0x2e8>
 80008be:	4643      	mov	r3, r8
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d063      	beq.n	800098c <__aeabi_fadd+0x320>
 80008c4:	2200      	movs	r2, #0
 80008c6:	2e00      	cmp	r6, #0
 80008c8:	d100      	bne.n	80008cc <__aeabi_fadd+0x260>
 80008ca:	e714      	b.n	80006f6 <__aeabi_fadd+0x8a>
 80008cc:	0030      	movs	r0, r6
 80008ce:	4440      	add	r0, r8
 80008d0:	0143      	lsls	r3, r0, #5
 80008d2:	d400      	bmi.n	80008d6 <__aeabi_fadd+0x26a>
 80008d4:	e77e      	b.n	80007d4 <__aeabi_fadd+0x168>
 80008d6:	4b32      	ldr	r3, [pc, #200]	; (80009a0 <__aeabi_fadd+0x334>)
 80008d8:	3501      	adds	r5, #1
 80008da:	4018      	ands	r0, r3
 80008dc:	e77a      	b.n	80007d4 <__aeabi_fadd+0x168>
 80008de:	2fff      	cmp	r7, #255	; 0xff
 80008e0:	d08c      	beq.n	80007fc <__aeabi_fadd+0x190>
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	4641      	mov	r1, r8
 80008e6:	04db      	lsls	r3, r3, #19
 80008e8:	4319      	orrs	r1, r3
 80008ea:	4688      	mov	r8, r1
 80008ec:	e79f      	b.n	800082e <__aeabi_fadd+0x1c2>
 80008ee:	4643      	mov	r3, r8
 80008f0:	000c      	movs	r4, r1
 80008f2:	1af7      	subs	r7, r6, r3
 80008f4:	e6e3      	b.n	80006be <__aeabi_fadd+0x52>
 80008f6:	4642      	mov	r2, r8
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	d000      	beq.n	80008fe <__aeabi_fadd+0x292>
 80008fc:	e775      	b.n	80007ea <__aeabi_fadd+0x17e>
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d000      	beq.n	8000904 <__aeabi_fadd+0x298>
 8000902:	e77a      	b.n	80007fa <__aeabi_fadd+0x18e>
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	03db      	lsls	r3, r3, #15
 8000908:	2400      	movs	r4, #0
 800090a:	469c      	mov	ip, r3
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	e6f2      	b.n	80006f6 <__aeabi_fadd+0x8a>
 8000910:	0030      	movs	r0, r6
 8000912:	4440      	add	r0, r8
 8000914:	2501      	movs	r5, #1
 8000916:	0143      	lsls	r3, r0, #5
 8000918:	d400      	bmi.n	800091c <__aeabi_fadd+0x2b0>
 800091a:	e75b      	b.n	80007d4 <__aeabi_fadd+0x168>
 800091c:	2502      	movs	r5, #2
 800091e:	e718      	b.n	8000752 <__aeabi_fadd+0xe6>
 8000920:	4643      	mov	r3, r8
 8000922:	2501      	movs	r5, #1
 8000924:	1b98      	subs	r0, r3, r6
 8000926:	e6c5      	b.n	80006b4 <__aeabi_fadd+0x48>
 8000928:	2320      	movs	r3, #32
 800092a:	4644      	mov	r4, r8
 800092c:	4640      	mov	r0, r8
 800092e:	40d4      	lsrs	r4, r2
 8000930:	1a9a      	subs	r2, r3, r2
 8000932:	4090      	lsls	r0, r2
 8000934:	1e43      	subs	r3, r0, #1
 8000936:	4198      	sbcs	r0, r3
 8000938:	4320      	orrs	r0, r4
 800093a:	e7a4      	b.n	8000886 <__aeabi_fadd+0x21a>
 800093c:	000d      	movs	r5, r1
 800093e:	e74d      	b.n	80007dc <__aeabi_fadd+0x170>
 8000940:	2320      	movs	r3, #32
 8000942:	4641      	mov	r1, r8
 8000944:	4640      	mov	r0, r8
 8000946:	40d1      	lsrs	r1, r2
 8000948:	1a9a      	subs	r2, r3, r2
 800094a:	4090      	lsls	r0, r2
 800094c:	1e43      	subs	r3, r0, #1
 800094e:	4198      	sbcs	r0, r3
 8000950:	4308      	orrs	r0, r1
 8000952:	e770      	b.n	8000836 <__aeabi_fadd+0x1ca>
 8000954:	4642      	mov	r2, r8
 8000956:	2a00      	cmp	r2, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fadd+0x2f0>
 800095a:	e74f      	b.n	80007fc <__aeabi_fadd+0x190>
 800095c:	2e00      	cmp	r6, #0
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0x2f6>
 8000960:	e74d      	b.n	80007fe <__aeabi_fadd+0x192>
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	03d2      	lsls	r2, r2, #15
 8000966:	4213      	tst	r3, r2
 8000968:	d100      	bne.n	800096c <__aeabi_fadd+0x300>
 800096a:	e748      	b.n	80007fe <__aeabi_fadd+0x192>
 800096c:	4210      	tst	r0, r2
 800096e:	d000      	beq.n	8000972 <__aeabi_fadd+0x306>
 8000970:	e745      	b.n	80007fe <__aeabi_fadd+0x192>
 8000972:	0003      	movs	r3, r0
 8000974:	e743      	b.n	80007fe <__aeabi_fadd+0x192>
 8000976:	2e00      	cmp	r6, #0
 8000978:	d090      	beq.n	800089c <__aeabi_fadd+0x230>
 800097a:	000c      	movs	r4, r1
 800097c:	4684      	mov	ip, r0
 800097e:	2200      	movs	r2, #0
 8000980:	e6b9      	b.n	80006f6 <__aeabi_fadd+0x8a>
 8000982:	4643      	mov	r3, r8
 8000984:	000c      	movs	r4, r1
 8000986:	1af0      	subs	r0, r6, r3
 8000988:	3501      	adds	r5, #1
 800098a:	e693      	b.n	80006b4 <__aeabi_fadd+0x48>
 800098c:	4684      	mov	ip, r0
 800098e:	2200      	movs	r2, #0
 8000990:	e6b1      	b.n	80006f6 <__aeabi_fadd+0x8a>
 8000992:	2800      	cmp	r0, #0
 8000994:	d000      	beq.n	8000998 <__aeabi_fadd+0x32c>
 8000996:	e71d      	b.n	80007d4 <__aeabi_fadd+0x168>
 8000998:	2300      	movs	r3, #0
 800099a:	2400      	movs	r4, #0
 800099c:	469c      	mov	ip, r3
 800099e:	e6aa      	b.n	80006f6 <__aeabi_fadd+0x8a>
 80009a0:	fbffffff 	.word	0xfbffffff
 80009a4:	7dffffff 	.word	0x7dffffff

080009a8 <__aeabi_fdiv>:
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009aa:	464f      	mov	r7, r9
 80009ac:	4646      	mov	r6, r8
 80009ae:	46d6      	mov	lr, sl
 80009b0:	0245      	lsls	r5, r0, #9
 80009b2:	b5c0      	push	{r6, r7, lr}
 80009b4:	0047      	lsls	r7, r0, #1
 80009b6:	1c0c      	adds	r4, r1, #0
 80009b8:	0a6d      	lsrs	r5, r5, #9
 80009ba:	0e3f      	lsrs	r7, r7, #24
 80009bc:	0fc6      	lsrs	r6, r0, #31
 80009be:	2f00      	cmp	r7, #0
 80009c0:	d100      	bne.n	80009c4 <__aeabi_fdiv+0x1c>
 80009c2:	e070      	b.n	8000aa6 <__aeabi_fdiv+0xfe>
 80009c4:	2fff      	cmp	r7, #255	; 0xff
 80009c6:	d100      	bne.n	80009ca <__aeabi_fdiv+0x22>
 80009c8:	e075      	b.n	8000ab6 <__aeabi_fdiv+0x10e>
 80009ca:	00eb      	lsls	r3, r5, #3
 80009cc:	2580      	movs	r5, #128	; 0x80
 80009ce:	04ed      	lsls	r5, r5, #19
 80009d0:	431d      	orrs	r5, r3
 80009d2:	2300      	movs	r3, #0
 80009d4:	4699      	mov	r9, r3
 80009d6:	469a      	mov	sl, r3
 80009d8:	3f7f      	subs	r7, #127	; 0x7f
 80009da:	0260      	lsls	r0, r4, #9
 80009dc:	0a43      	lsrs	r3, r0, #9
 80009de:	4698      	mov	r8, r3
 80009e0:	0063      	lsls	r3, r4, #1
 80009e2:	0e1b      	lsrs	r3, r3, #24
 80009e4:	0fe4      	lsrs	r4, r4, #31
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d04e      	beq.n	8000a88 <__aeabi_fdiv+0xe0>
 80009ea:	2bff      	cmp	r3, #255	; 0xff
 80009ec:	d046      	beq.n	8000a7c <__aeabi_fdiv+0xd4>
 80009ee:	4642      	mov	r2, r8
 80009f0:	00d0      	lsls	r0, r2, #3
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	04d2      	lsls	r2, r2, #19
 80009f6:	4302      	orrs	r2, r0
 80009f8:	4690      	mov	r8, r2
 80009fa:	2200      	movs	r2, #0
 80009fc:	3b7f      	subs	r3, #127	; 0x7f
 80009fe:	0031      	movs	r1, r6
 8000a00:	1aff      	subs	r7, r7, r3
 8000a02:	464b      	mov	r3, r9
 8000a04:	4061      	eors	r1, r4
 8000a06:	b2c9      	uxtb	r1, r1
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	2b0f      	cmp	r3, #15
 8000a0c:	d900      	bls.n	8000a10 <__aeabi_fdiv+0x68>
 8000a0e:	e0b5      	b.n	8000b7c <__aeabi_fdiv+0x1d4>
 8000a10:	486e      	ldr	r0, [pc, #440]	; (8000bcc <__aeabi_fdiv+0x224>)
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	58c3      	ldr	r3, [r0, r3]
 8000a16:	469f      	mov	pc, r3
 8000a18:	2300      	movs	r3, #0
 8000a1a:	4698      	mov	r8, r3
 8000a1c:	0026      	movs	r6, r4
 8000a1e:	4645      	mov	r5, r8
 8000a20:	4692      	mov	sl, r2
 8000a22:	4653      	mov	r3, sl
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d100      	bne.n	8000a2a <__aeabi_fdiv+0x82>
 8000a28:	e089      	b.n	8000b3e <__aeabi_fdiv+0x196>
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fdiv+0x88>
 8000a2e:	e09e      	b.n	8000b6e <__aeabi_fdiv+0x1c6>
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d018      	beq.n	8000a66 <__aeabi_fdiv+0xbe>
 8000a34:	003b      	movs	r3, r7
 8000a36:	337f      	adds	r3, #127	; 0x7f
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	dd69      	ble.n	8000b10 <__aeabi_fdiv+0x168>
 8000a3c:	076a      	lsls	r2, r5, #29
 8000a3e:	d004      	beq.n	8000a4a <__aeabi_fdiv+0xa2>
 8000a40:	220f      	movs	r2, #15
 8000a42:	402a      	ands	r2, r5
 8000a44:	2a04      	cmp	r2, #4
 8000a46:	d000      	beq.n	8000a4a <__aeabi_fdiv+0xa2>
 8000a48:	3504      	adds	r5, #4
 8000a4a:	012a      	lsls	r2, r5, #4
 8000a4c:	d503      	bpl.n	8000a56 <__aeabi_fdiv+0xae>
 8000a4e:	4b60      	ldr	r3, [pc, #384]	; (8000bd0 <__aeabi_fdiv+0x228>)
 8000a50:	401d      	ands	r5, r3
 8000a52:	003b      	movs	r3, r7
 8000a54:	3380      	adds	r3, #128	; 0x80
 8000a56:	2bfe      	cmp	r3, #254	; 0xfe
 8000a58:	dd00      	ble.n	8000a5c <__aeabi_fdiv+0xb4>
 8000a5a:	e070      	b.n	8000b3e <__aeabi_fdiv+0x196>
 8000a5c:	01ad      	lsls	r5, r5, #6
 8000a5e:	0a6d      	lsrs	r5, r5, #9
 8000a60:	b2d8      	uxtb	r0, r3
 8000a62:	e002      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000a64:	000e      	movs	r6, r1
 8000a66:	2000      	movs	r0, #0
 8000a68:	2500      	movs	r5, #0
 8000a6a:	05c0      	lsls	r0, r0, #23
 8000a6c:	4328      	orrs	r0, r5
 8000a6e:	07f6      	lsls	r6, r6, #31
 8000a70:	4330      	orrs	r0, r6
 8000a72:	bce0      	pop	{r5, r6, r7}
 8000a74:	46ba      	mov	sl, r7
 8000a76:	46b1      	mov	r9, r6
 8000a78:	46a8      	mov	r8, r5
 8000a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a7c:	4643      	mov	r3, r8
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d13f      	bne.n	8000b02 <__aeabi_fdiv+0x15a>
 8000a82:	2202      	movs	r2, #2
 8000a84:	3fff      	subs	r7, #255	; 0xff
 8000a86:	e003      	b.n	8000a90 <__aeabi_fdiv+0xe8>
 8000a88:	4643      	mov	r3, r8
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d12d      	bne.n	8000aea <__aeabi_fdiv+0x142>
 8000a8e:	2201      	movs	r2, #1
 8000a90:	0031      	movs	r1, r6
 8000a92:	464b      	mov	r3, r9
 8000a94:	4061      	eors	r1, r4
 8000a96:	b2c9      	uxtb	r1, r1
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	2b0f      	cmp	r3, #15
 8000a9c:	d834      	bhi.n	8000b08 <__aeabi_fdiv+0x160>
 8000a9e:	484d      	ldr	r0, [pc, #308]	; (8000bd4 <__aeabi_fdiv+0x22c>)
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	58c3      	ldr	r3, [r0, r3]
 8000aa4:	469f      	mov	pc, r3
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d113      	bne.n	8000ad2 <__aeabi_fdiv+0x12a>
 8000aaa:	2304      	movs	r3, #4
 8000aac:	4699      	mov	r9, r3
 8000aae:	3b03      	subs	r3, #3
 8000ab0:	2700      	movs	r7, #0
 8000ab2:	469a      	mov	sl, r3
 8000ab4:	e791      	b.n	80009da <__aeabi_fdiv+0x32>
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d105      	bne.n	8000ac6 <__aeabi_fdiv+0x11e>
 8000aba:	2308      	movs	r3, #8
 8000abc:	4699      	mov	r9, r3
 8000abe:	3b06      	subs	r3, #6
 8000ac0:	27ff      	movs	r7, #255	; 0xff
 8000ac2:	469a      	mov	sl, r3
 8000ac4:	e789      	b.n	80009da <__aeabi_fdiv+0x32>
 8000ac6:	230c      	movs	r3, #12
 8000ac8:	4699      	mov	r9, r3
 8000aca:	3b09      	subs	r3, #9
 8000acc:	27ff      	movs	r7, #255	; 0xff
 8000ace:	469a      	mov	sl, r3
 8000ad0:	e783      	b.n	80009da <__aeabi_fdiv+0x32>
 8000ad2:	0028      	movs	r0, r5
 8000ad4:	f000 fcb4 	bl	8001440 <__clzsi2>
 8000ad8:	2776      	movs	r7, #118	; 0x76
 8000ada:	1f43      	subs	r3, r0, #5
 8000adc:	409d      	lsls	r5, r3
 8000ade:	2300      	movs	r3, #0
 8000ae0:	427f      	negs	r7, r7
 8000ae2:	4699      	mov	r9, r3
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	1a3f      	subs	r7, r7, r0
 8000ae8:	e777      	b.n	80009da <__aeabi_fdiv+0x32>
 8000aea:	4640      	mov	r0, r8
 8000aec:	f000 fca8 	bl	8001440 <__clzsi2>
 8000af0:	4642      	mov	r2, r8
 8000af2:	1f43      	subs	r3, r0, #5
 8000af4:	409a      	lsls	r2, r3
 8000af6:	2376      	movs	r3, #118	; 0x76
 8000af8:	425b      	negs	r3, r3
 8000afa:	4690      	mov	r8, r2
 8000afc:	1a1b      	subs	r3, r3, r0
 8000afe:	2200      	movs	r2, #0
 8000b00:	e77d      	b.n	80009fe <__aeabi_fdiv+0x56>
 8000b02:	23ff      	movs	r3, #255	; 0xff
 8000b04:	2203      	movs	r2, #3
 8000b06:	e77a      	b.n	80009fe <__aeabi_fdiv+0x56>
 8000b08:	000e      	movs	r6, r1
 8000b0a:	20ff      	movs	r0, #255	; 0xff
 8000b0c:	2500      	movs	r5, #0
 8000b0e:	e7ac      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000b10:	2001      	movs	r0, #1
 8000b12:	1ac0      	subs	r0, r0, r3
 8000b14:	281b      	cmp	r0, #27
 8000b16:	dca6      	bgt.n	8000a66 <__aeabi_fdiv+0xbe>
 8000b18:	379e      	adds	r7, #158	; 0x9e
 8000b1a:	002a      	movs	r2, r5
 8000b1c:	40bd      	lsls	r5, r7
 8000b1e:	40c2      	lsrs	r2, r0
 8000b20:	1e6b      	subs	r3, r5, #1
 8000b22:	419d      	sbcs	r5, r3
 8000b24:	4315      	orrs	r5, r2
 8000b26:	076b      	lsls	r3, r5, #29
 8000b28:	d004      	beq.n	8000b34 <__aeabi_fdiv+0x18c>
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	402b      	ands	r3, r5
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d000      	beq.n	8000b34 <__aeabi_fdiv+0x18c>
 8000b32:	3504      	adds	r5, #4
 8000b34:	016b      	lsls	r3, r5, #5
 8000b36:	d544      	bpl.n	8000bc2 <__aeabi_fdiv+0x21a>
 8000b38:	2001      	movs	r0, #1
 8000b3a:	2500      	movs	r5, #0
 8000b3c:	e795      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000b3e:	20ff      	movs	r0, #255	; 0xff
 8000b40:	2500      	movs	r5, #0
 8000b42:	e792      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000b44:	2580      	movs	r5, #128	; 0x80
 8000b46:	2600      	movs	r6, #0
 8000b48:	20ff      	movs	r0, #255	; 0xff
 8000b4a:	03ed      	lsls	r5, r5, #15
 8000b4c:	e78d      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	4698      	mov	r8, r3
 8000b52:	2080      	movs	r0, #128	; 0x80
 8000b54:	03c0      	lsls	r0, r0, #15
 8000b56:	4205      	tst	r5, r0
 8000b58:	d009      	beq.n	8000b6e <__aeabi_fdiv+0x1c6>
 8000b5a:	4643      	mov	r3, r8
 8000b5c:	4203      	tst	r3, r0
 8000b5e:	d106      	bne.n	8000b6e <__aeabi_fdiv+0x1c6>
 8000b60:	4645      	mov	r5, r8
 8000b62:	4305      	orrs	r5, r0
 8000b64:	026d      	lsls	r5, r5, #9
 8000b66:	0026      	movs	r6, r4
 8000b68:	20ff      	movs	r0, #255	; 0xff
 8000b6a:	0a6d      	lsrs	r5, r5, #9
 8000b6c:	e77d      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000b6e:	2080      	movs	r0, #128	; 0x80
 8000b70:	03c0      	lsls	r0, r0, #15
 8000b72:	4305      	orrs	r5, r0
 8000b74:	026d      	lsls	r5, r5, #9
 8000b76:	20ff      	movs	r0, #255	; 0xff
 8000b78:	0a6d      	lsrs	r5, r5, #9
 8000b7a:	e776      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000b7c:	4642      	mov	r2, r8
 8000b7e:	016b      	lsls	r3, r5, #5
 8000b80:	0150      	lsls	r0, r2, #5
 8000b82:	4283      	cmp	r3, r0
 8000b84:	d219      	bcs.n	8000bba <__aeabi_fdiv+0x212>
 8000b86:	221b      	movs	r2, #27
 8000b88:	2500      	movs	r5, #0
 8000b8a:	3f01      	subs	r7, #1
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	001c      	movs	r4, r3
 8000b90:	006d      	lsls	r5, r5, #1
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	2c00      	cmp	r4, #0
 8000b96:	db01      	blt.n	8000b9c <__aeabi_fdiv+0x1f4>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	d801      	bhi.n	8000ba0 <__aeabi_fdiv+0x1f8>
 8000b9c:	1a1b      	subs	r3, r3, r0
 8000b9e:	4335      	orrs	r5, r6
 8000ba0:	3a01      	subs	r2, #1
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	d1f3      	bne.n	8000b8e <__aeabi_fdiv+0x1e6>
 8000ba6:	1e5a      	subs	r2, r3, #1
 8000ba8:	4193      	sbcs	r3, r2
 8000baa:	431d      	orrs	r5, r3
 8000bac:	003b      	movs	r3, r7
 8000bae:	337f      	adds	r3, #127	; 0x7f
 8000bb0:	000e      	movs	r6, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	dd00      	ble.n	8000bb8 <__aeabi_fdiv+0x210>
 8000bb6:	e741      	b.n	8000a3c <__aeabi_fdiv+0x94>
 8000bb8:	e7aa      	b.n	8000b10 <__aeabi_fdiv+0x168>
 8000bba:	221a      	movs	r2, #26
 8000bbc:	2501      	movs	r5, #1
 8000bbe:	1a1b      	subs	r3, r3, r0
 8000bc0:	e7e4      	b.n	8000b8c <__aeabi_fdiv+0x1e4>
 8000bc2:	01ad      	lsls	r5, r5, #6
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	0a6d      	lsrs	r5, r5, #9
 8000bc8:	e74f      	b.n	8000a6a <__aeabi_fdiv+0xc2>
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	08006100 	.word	0x08006100
 8000bd0:	f7ffffff 	.word	0xf7ffffff
 8000bd4:	08006140 	.word	0x08006140

08000bd8 <__eqsf2>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	0042      	lsls	r2, r0, #1
 8000bdc:	0245      	lsls	r5, r0, #9
 8000bde:	024e      	lsls	r6, r1, #9
 8000be0:	004c      	lsls	r4, r1, #1
 8000be2:	0fc3      	lsrs	r3, r0, #31
 8000be4:	0a6d      	lsrs	r5, r5, #9
 8000be6:	2001      	movs	r0, #1
 8000be8:	0e12      	lsrs	r2, r2, #24
 8000bea:	0a76      	lsrs	r6, r6, #9
 8000bec:	0e24      	lsrs	r4, r4, #24
 8000bee:	0fc9      	lsrs	r1, r1, #31
 8000bf0:	2aff      	cmp	r2, #255	; 0xff
 8000bf2:	d006      	beq.n	8000c02 <__eqsf2+0x2a>
 8000bf4:	2cff      	cmp	r4, #255	; 0xff
 8000bf6:	d003      	beq.n	8000c00 <__eqsf2+0x28>
 8000bf8:	42a2      	cmp	r2, r4
 8000bfa:	d101      	bne.n	8000c00 <__eqsf2+0x28>
 8000bfc:	42b5      	cmp	r5, r6
 8000bfe:	d006      	beq.n	8000c0e <__eqsf2+0x36>
 8000c00:	bd70      	pop	{r4, r5, r6, pc}
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	d1fc      	bne.n	8000c00 <__eqsf2+0x28>
 8000c06:	2cff      	cmp	r4, #255	; 0xff
 8000c08:	d1fa      	bne.n	8000c00 <__eqsf2+0x28>
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d1f8      	bne.n	8000c00 <__eqsf2+0x28>
 8000c0e:	428b      	cmp	r3, r1
 8000c10:	d006      	beq.n	8000c20 <__eqsf2+0x48>
 8000c12:	2001      	movs	r0, #1
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	d1f3      	bne.n	8000c00 <__eqsf2+0x28>
 8000c18:	0028      	movs	r0, r5
 8000c1a:	1e43      	subs	r3, r0, #1
 8000c1c:	4198      	sbcs	r0, r3
 8000c1e:	e7ef      	b.n	8000c00 <__eqsf2+0x28>
 8000c20:	2000      	movs	r0, #0
 8000c22:	e7ed      	b.n	8000c00 <__eqsf2+0x28>

08000c24 <__gesf2>:
 8000c24:	b570      	push	{r4, r5, r6, lr}
 8000c26:	0042      	lsls	r2, r0, #1
 8000c28:	0245      	lsls	r5, r0, #9
 8000c2a:	024e      	lsls	r6, r1, #9
 8000c2c:	004c      	lsls	r4, r1, #1
 8000c2e:	0fc3      	lsrs	r3, r0, #31
 8000c30:	0a6d      	lsrs	r5, r5, #9
 8000c32:	0e12      	lsrs	r2, r2, #24
 8000c34:	0a76      	lsrs	r6, r6, #9
 8000c36:	0e24      	lsrs	r4, r4, #24
 8000c38:	0fc8      	lsrs	r0, r1, #31
 8000c3a:	2aff      	cmp	r2, #255	; 0xff
 8000c3c:	d01b      	beq.n	8000c76 <__gesf2+0x52>
 8000c3e:	2cff      	cmp	r4, #255	; 0xff
 8000c40:	d00e      	beq.n	8000c60 <__gesf2+0x3c>
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d11b      	bne.n	8000c7e <__gesf2+0x5a>
 8000c46:	2c00      	cmp	r4, #0
 8000c48:	d101      	bne.n	8000c4e <__gesf2+0x2a>
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d01c      	beq.n	8000c88 <__gesf2+0x64>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d00c      	beq.n	8000c6c <__gesf2+0x48>
 8000c52:	4283      	cmp	r3, r0
 8000c54:	d01c      	beq.n	8000c90 <__gesf2+0x6c>
 8000c56:	2102      	movs	r1, #2
 8000c58:	1e58      	subs	r0, r3, #1
 8000c5a:	4008      	ands	r0, r1
 8000c5c:	3801      	subs	r0, #1
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
 8000c60:	2e00      	cmp	r6, #0
 8000c62:	d122      	bne.n	8000caa <__gesf2+0x86>
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	d1f4      	bne.n	8000c52 <__gesf2+0x2e>
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d1f2      	bne.n	8000c52 <__gesf2+0x2e>
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	d1f6      	bne.n	8000c5e <__gesf2+0x3a>
 8000c70:	2001      	movs	r0, #1
 8000c72:	4240      	negs	r0, r0
 8000c74:	e7f3      	b.n	8000c5e <__gesf2+0x3a>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d117      	bne.n	8000caa <__gesf2+0x86>
 8000c7a:	2cff      	cmp	r4, #255	; 0xff
 8000c7c:	d0f0      	beq.n	8000c60 <__gesf2+0x3c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1e7      	bne.n	8000c52 <__gesf2+0x2e>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d1e5      	bne.n	8000c52 <__gesf2+0x2e>
 8000c86:	e7e6      	b.n	8000c56 <__gesf2+0x32>
 8000c88:	2000      	movs	r0, #0
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e7      	beq.n	8000c5e <__gesf2+0x3a>
 8000c8e:	e7e2      	b.n	8000c56 <__gesf2+0x32>
 8000c90:	42a2      	cmp	r2, r4
 8000c92:	dc05      	bgt.n	8000ca0 <__gesf2+0x7c>
 8000c94:	dbea      	blt.n	8000c6c <__gesf2+0x48>
 8000c96:	42b5      	cmp	r5, r6
 8000c98:	d802      	bhi.n	8000ca0 <__gesf2+0x7c>
 8000c9a:	d3e7      	bcc.n	8000c6c <__gesf2+0x48>
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	e7de      	b.n	8000c5e <__gesf2+0x3a>
 8000ca0:	4243      	negs	r3, r0
 8000ca2:	4158      	adcs	r0, r3
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	3801      	subs	r0, #1
 8000ca8:	e7d9      	b.n	8000c5e <__gesf2+0x3a>
 8000caa:	2002      	movs	r0, #2
 8000cac:	4240      	negs	r0, r0
 8000cae:	e7d6      	b.n	8000c5e <__gesf2+0x3a>

08000cb0 <__lesf2>:
 8000cb0:	b570      	push	{r4, r5, r6, lr}
 8000cb2:	0042      	lsls	r2, r0, #1
 8000cb4:	0245      	lsls	r5, r0, #9
 8000cb6:	024e      	lsls	r6, r1, #9
 8000cb8:	004c      	lsls	r4, r1, #1
 8000cba:	0fc3      	lsrs	r3, r0, #31
 8000cbc:	0a6d      	lsrs	r5, r5, #9
 8000cbe:	0e12      	lsrs	r2, r2, #24
 8000cc0:	0a76      	lsrs	r6, r6, #9
 8000cc2:	0e24      	lsrs	r4, r4, #24
 8000cc4:	0fc8      	lsrs	r0, r1, #31
 8000cc6:	2aff      	cmp	r2, #255	; 0xff
 8000cc8:	d00b      	beq.n	8000ce2 <__lesf2+0x32>
 8000cca:	2cff      	cmp	r4, #255	; 0xff
 8000ccc:	d00d      	beq.n	8000cea <__lesf2+0x3a>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	d11f      	bne.n	8000d12 <__lesf2+0x62>
 8000cd2:	2c00      	cmp	r4, #0
 8000cd4:	d116      	bne.n	8000d04 <__lesf2+0x54>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d114      	bne.n	8000d04 <__lesf2+0x54>
 8000cda:	2000      	movs	r0, #0
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d010      	beq.n	8000d02 <__lesf2+0x52>
 8000ce0:	e009      	b.n	8000cf6 <__lesf2+0x46>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	d10c      	bne.n	8000d00 <__lesf2+0x50>
 8000ce6:	2cff      	cmp	r4, #255	; 0xff
 8000ce8:	d113      	bne.n	8000d12 <__lesf2+0x62>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d108      	bne.n	8000d00 <__lesf2+0x50>
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	d008      	beq.n	8000d04 <__lesf2+0x54>
 8000cf2:	4283      	cmp	r3, r0
 8000cf4:	d012      	beq.n	8000d1c <__lesf2+0x6c>
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	1e58      	subs	r0, r3, #1
 8000cfa:	4008      	ands	r0, r1
 8000cfc:	3801      	subs	r0, #1
 8000cfe:	e000      	b.n	8000d02 <__lesf2+0x52>
 8000d00:	2002      	movs	r0, #2
 8000d02:	bd70      	pop	{r4, r5, r6, pc}
 8000d04:	2d00      	cmp	r5, #0
 8000d06:	d1f4      	bne.n	8000cf2 <__lesf2+0x42>
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d1fa      	bne.n	8000d02 <__lesf2+0x52>
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4240      	negs	r0, r0
 8000d10:	e7f7      	b.n	8000d02 <__lesf2+0x52>
 8000d12:	2c00      	cmp	r4, #0
 8000d14:	d1ed      	bne.n	8000cf2 <__lesf2+0x42>
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d1eb      	bne.n	8000cf2 <__lesf2+0x42>
 8000d1a:	e7ec      	b.n	8000cf6 <__lesf2+0x46>
 8000d1c:	42a2      	cmp	r2, r4
 8000d1e:	dc05      	bgt.n	8000d2c <__lesf2+0x7c>
 8000d20:	dbf2      	blt.n	8000d08 <__lesf2+0x58>
 8000d22:	42b5      	cmp	r5, r6
 8000d24:	d802      	bhi.n	8000d2c <__lesf2+0x7c>
 8000d26:	d3ef      	bcc.n	8000d08 <__lesf2+0x58>
 8000d28:	2000      	movs	r0, #0
 8000d2a:	e7ea      	b.n	8000d02 <__lesf2+0x52>
 8000d2c:	4243      	negs	r3, r0
 8000d2e:	4158      	adcs	r0, r3
 8000d30:	0040      	lsls	r0, r0, #1
 8000d32:	3801      	subs	r0, #1
 8000d34:	e7e5      	b.n	8000d02 <__lesf2+0x52>
 8000d36:	46c0      	nop			; (mov r8, r8)

08000d38 <__aeabi_fmul>:
 8000d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3a:	464f      	mov	r7, r9
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	0244      	lsls	r4, r0, #9
 8000d42:	0045      	lsls	r5, r0, #1
 8000d44:	b5c0      	push	{r6, r7, lr}
 8000d46:	0a64      	lsrs	r4, r4, #9
 8000d48:	1c0f      	adds	r7, r1, #0
 8000d4a:	0e2d      	lsrs	r5, r5, #24
 8000d4c:	0fc6      	lsrs	r6, r0, #31
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	d100      	bne.n	8000d54 <__aeabi_fmul+0x1c>
 8000d52:	e08d      	b.n	8000e70 <__aeabi_fmul+0x138>
 8000d54:	2dff      	cmp	r5, #255	; 0xff
 8000d56:	d100      	bne.n	8000d5a <__aeabi_fmul+0x22>
 8000d58:	e092      	b.n	8000e80 <__aeabi_fmul+0x148>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2080      	movs	r0, #128	; 0x80
 8000d5e:	4699      	mov	r9, r3
 8000d60:	469a      	mov	sl, r3
 8000d62:	00e4      	lsls	r4, r4, #3
 8000d64:	04c0      	lsls	r0, r0, #19
 8000d66:	4304      	orrs	r4, r0
 8000d68:	3d7f      	subs	r5, #127	; 0x7f
 8000d6a:	0278      	lsls	r0, r7, #9
 8000d6c:	0a43      	lsrs	r3, r0, #9
 8000d6e:	4698      	mov	r8, r3
 8000d70:	007b      	lsls	r3, r7, #1
 8000d72:	0e1b      	lsrs	r3, r3, #24
 8000d74:	0fff      	lsrs	r7, r7, #31
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d100      	bne.n	8000d7c <__aeabi_fmul+0x44>
 8000d7a:	e070      	b.n	8000e5e <__aeabi_fmul+0x126>
 8000d7c:	2bff      	cmp	r3, #255	; 0xff
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_fmul+0x4a>
 8000d80:	e086      	b.n	8000e90 <__aeabi_fmul+0x158>
 8000d82:	4642      	mov	r2, r8
 8000d84:	00d0      	lsls	r0, r2, #3
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	3b7f      	subs	r3, #127	; 0x7f
 8000d8a:	18ed      	adds	r5, r5, r3
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	04d2      	lsls	r2, r2, #19
 8000d90:	4302      	orrs	r2, r0
 8000d92:	4690      	mov	r8, r2
 8000d94:	469c      	mov	ip, r3
 8000d96:	0031      	movs	r1, r6
 8000d98:	464b      	mov	r3, r9
 8000d9a:	4079      	eors	r1, r7
 8000d9c:	1c68      	adds	r0, r5, #1
 8000d9e:	2b0f      	cmp	r3, #15
 8000da0:	d81c      	bhi.n	8000ddc <__aeabi_fmul+0xa4>
 8000da2:	4a76      	ldr	r2, [pc, #472]	; (8000f7c <__aeabi_fmul+0x244>)
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	58d3      	ldr	r3, [r2, r3]
 8000da8:	469f      	mov	pc, r3
 8000daa:	0039      	movs	r1, r7
 8000dac:	4644      	mov	r4, r8
 8000dae:	46e2      	mov	sl, ip
 8000db0:	4653      	mov	r3, sl
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d00f      	beq.n	8000dd6 <__aeabi_fmul+0x9e>
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d100      	bne.n	8000dbc <__aeabi_fmul+0x84>
 8000dba:	e0d7      	b.n	8000f6c <__aeabi_fmul+0x234>
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d137      	bne.n	8000e30 <__aeabi_fmul+0xf8>
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	2400      	movs	r4, #0
 8000dc4:	05c0      	lsls	r0, r0, #23
 8000dc6:	4320      	orrs	r0, r4
 8000dc8:	07c9      	lsls	r1, r1, #31
 8000dca:	4308      	orrs	r0, r1
 8000dcc:	bce0      	pop	{r5, r6, r7}
 8000dce:	46ba      	mov	sl, r7
 8000dd0:	46b1      	mov	r9, r6
 8000dd2:	46a8      	mov	r8, r5
 8000dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd6:	20ff      	movs	r0, #255	; 0xff
 8000dd8:	2400      	movs	r4, #0
 8000dda:	e7f3      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000ddc:	0c26      	lsrs	r6, r4, #16
 8000dde:	0424      	lsls	r4, r4, #16
 8000de0:	0c22      	lsrs	r2, r4, #16
 8000de2:	4644      	mov	r4, r8
 8000de4:	0424      	lsls	r4, r4, #16
 8000de6:	0c24      	lsrs	r4, r4, #16
 8000de8:	4643      	mov	r3, r8
 8000dea:	0027      	movs	r7, r4
 8000dec:	0c1b      	lsrs	r3, r3, #16
 8000dee:	4357      	muls	r7, r2
 8000df0:	4374      	muls	r4, r6
 8000df2:	435a      	muls	r2, r3
 8000df4:	435e      	muls	r6, r3
 8000df6:	1912      	adds	r2, r2, r4
 8000df8:	0c3b      	lsrs	r3, r7, #16
 8000dfa:	189b      	adds	r3, r3, r2
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	d903      	bls.n	8000e08 <__aeabi_fmul+0xd0>
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	0252      	lsls	r2, r2, #9
 8000e04:	4694      	mov	ip, r2
 8000e06:	4466      	add	r6, ip
 8000e08:	043f      	lsls	r7, r7, #16
 8000e0a:	041a      	lsls	r2, r3, #16
 8000e0c:	0c3f      	lsrs	r7, r7, #16
 8000e0e:	19d2      	adds	r2, r2, r7
 8000e10:	0194      	lsls	r4, r2, #6
 8000e12:	1e67      	subs	r7, r4, #1
 8000e14:	41bc      	sbcs	r4, r7
 8000e16:	0c1b      	lsrs	r3, r3, #16
 8000e18:	0e92      	lsrs	r2, r2, #26
 8000e1a:	199b      	adds	r3, r3, r6
 8000e1c:	4314      	orrs	r4, r2
 8000e1e:	019b      	lsls	r3, r3, #6
 8000e20:	431c      	orrs	r4, r3
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	d400      	bmi.n	8000e28 <__aeabi_fmul+0xf0>
 8000e26:	e09b      	b.n	8000f60 <__aeabi_fmul+0x228>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	0862      	lsrs	r2, r4, #1
 8000e2c:	401c      	ands	r4, r3
 8000e2e:	4314      	orrs	r4, r2
 8000e30:	0002      	movs	r2, r0
 8000e32:	327f      	adds	r2, #127	; 0x7f
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	dd64      	ble.n	8000f02 <__aeabi_fmul+0x1ca>
 8000e38:	0763      	lsls	r3, r4, #29
 8000e3a:	d004      	beq.n	8000e46 <__aeabi_fmul+0x10e>
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	4023      	ands	r3, r4
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d000      	beq.n	8000e46 <__aeabi_fmul+0x10e>
 8000e44:	3404      	adds	r4, #4
 8000e46:	0123      	lsls	r3, r4, #4
 8000e48:	d503      	bpl.n	8000e52 <__aeabi_fmul+0x11a>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <__aeabi_fmul+0x248>)
 8000e4e:	3280      	adds	r2, #128	; 0x80
 8000e50:	401c      	ands	r4, r3
 8000e52:	2afe      	cmp	r2, #254	; 0xfe
 8000e54:	dcbf      	bgt.n	8000dd6 <__aeabi_fmul+0x9e>
 8000e56:	01a4      	lsls	r4, r4, #6
 8000e58:	0a64      	lsrs	r4, r4, #9
 8000e5a:	b2d0      	uxtb	r0, r2
 8000e5c:	e7b2      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d13d      	bne.n	8000ee0 <__aeabi_fmul+0x1a8>
 8000e64:	464a      	mov	r2, r9
 8000e66:	3301      	adds	r3, #1
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	4691      	mov	r9, r2
 8000e6c:	469c      	mov	ip, r3
 8000e6e:	e792      	b.n	8000d96 <__aeabi_fmul+0x5e>
 8000e70:	2c00      	cmp	r4, #0
 8000e72:	d129      	bne.n	8000ec8 <__aeabi_fmul+0x190>
 8000e74:	2304      	movs	r3, #4
 8000e76:	4699      	mov	r9, r3
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	469a      	mov	sl, r3
 8000e7e:	e774      	b.n	8000d6a <__aeabi_fmul+0x32>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d11b      	bne.n	8000ebc <__aeabi_fmul+0x184>
 8000e84:	2308      	movs	r3, #8
 8000e86:	4699      	mov	r9, r3
 8000e88:	3b06      	subs	r3, #6
 8000e8a:	25ff      	movs	r5, #255	; 0xff
 8000e8c:	469a      	mov	sl, r3
 8000e8e:	e76c      	b.n	8000d6a <__aeabi_fmul+0x32>
 8000e90:	4643      	mov	r3, r8
 8000e92:	35ff      	adds	r5, #255	; 0xff
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10b      	bne.n	8000eb0 <__aeabi_fmul+0x178>
 8000e98:	2302      	movs	r3, #2
 8000e9a:	464a      	mov	r2, r9
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	4691      	mov	r9, r2
 8000ea0:	469c      	mov	ip, r3
 8000ea2:	e778      	b.n	8000d96 <__aeabi_fmul+0x5e>
 8000ea4:	4653      	mov	r3, sl
 8000ea6:	0031      	movs	r1, r6
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d000      	beq.n	8000eae <__aeabi_fmul+0x176>
 8000eac:	e783      	b.n	8000db6 <__aeabi_fmul+0x7e>
 8000eae:	e792      	b.n	8000dd6 <__aeabi_fmul+0x9e>
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	464a      	mov	r2, r9
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	4691      	mov	r9, r2
 8000eb8:	469c      	mov	ip, r3
 8000eba:	e76c      	b.n	8000d96 <__aeabi_fmul+0x5e>
 8000ebc:	230c      	movs	r3, #12
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	3b09      	subs	r3, #9
 8000ec2:	25ff      	movs	r5, #255	; 0xff
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	e750      	b.n	8000d6a <__aeabi_fmul+0x32>
 8000ec8:	0020      	movs	r0, r4
 8000eca:	f000 fab9 	bl	8001440 <__clzsi2>
 8000ece:	2576      	movs	r5, #118	; 0x76
 8000ed0:	1f43      	subs	r3, r0, #5
 8000ed2:	409c      	lsls	r4, r3
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	426d      	negs	r5, r5
 8000ed8:	4699      	mov	r9, r3
 8000eda:	469a      	mov	sl, r3
 8000edc:	1a2d      	subs	r5, r5, r0
 8000ede:	e744      	b.n	8000d6a <__aeabi_fmul+0x32>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	f000 faad 	bl	8001440 <__clzsi2>
 8000ee6:	4642      	mov	r2, r8
 8000ee8:	1f43      	subs	r3, r0, #5
 8000eea:	409a      	lsls	r2, r3
 8000eec:	2300      	movs	r3, #0
 8000eee:	1a2d      	subs	r5, r5, r0
 8000ef0:	4690      	mov	r8, r2
 8000ef2:	469c      	mov	ip, r3
 8000ef4:	3d76      	subs	r5, #118	; 0x76
 8000ef6:	e74e      	b.n	8000d96 <__aeabi_fmul+0x5e>
 8000ef8:	2480      	movs	r4, #128	; 0x80
 8000efa:	2100      	movs	r1, #0
 8000efc:	20ff      	movs	r0, #255	; 0xff
 8000efe:	03e4      	lsls	r4, r4, #15
 8000f00:	e760      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000f02:	2301      	movs	r3, #1
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	2b1b      	cmp	r3, #27
 8000f08:	dd00      	ble.n	8000f0c <__aeabi_fmul+0x1d4>
 8000f0a:	e759      	b.n	8000dc0 <__aeabi_fmul+0x88>
 8000f0c:	0022      	movs	r2, r4
 8000f0e:	309e      	adds	r0, #158	; 0x9e
 8000f10:	40da      	lsrs	r2, r3
 8000f12:	4084      	lsls	r4, r0
 8000f14:	0013      	movs	r3, r2
 8000f16:	1e62      	subs	r2, r4, #1
 8000f18:	4194      	sbcs	r4, r2
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	0763      	lsls	r3, r4, #29
 8000f1e:	d004      	beq.n	8000f2a <__aeabi_fmul+0x1f2>
 8000f20:	230f      	movs	r3, #15
 8000f22:	4023      	ands	r3, r4
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fmul+0x1f2>
 8000f28:	3404      	adds	r4, #4
 8000f2a:	0163      	lsls	r3, r4, #5
 8000f2c:	d51a      	bpl.n	8000f64 <__aeabi_fmul+0x22c>
 8000f2e:	2001      	movs	r0, #1
 8000f30:	2400      	movs	r4, #0
 8000f32:	e747      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000f34:	2080      	movs	r0, #128	; 0x80
 8000f36:	03c0      	lsls	r0, r0, #15
 8000f38:	4204      	tst	r4, r0
 8000f3a:	d009      	beq.n	8000f50 <__aeabi_fmul+0x218>
 8000f3c:	4643      	mov	r3, r8
 8000f3e:	4203      	tst	r3, r0
 8000f40:	d106      	bne.n	8000f50 <__aeabi_fmul+0x218>
 8000f42:	4644      	mov	r4, r8
 8000f44:	4304      	orrs	r4, r0
 8000f46:	0264      	lsls	r4, r4, #9
 8000f48:	0039      	movs	r1, r7
 8000f4a:	20ff      	movs	r0, #255	; 0xff
 8000f4c:	0a64      	lsrs	r4, r4, #9
 8000f4e:	e739      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000f50:	2080      	movs	r0, #128	; 0x80
 8000f52:	03c0      	lsls	r0, r0, #15
 8000f54:	4304      	orrs	r4, r0
 8000f56:	0264      	lsls	r4, r4, #9
 8000f58:	0031      	movs	r1, r6
 8000f5a:	20ff      	movs	r0, #255	; 0xff
 8000f5c:	0a64      	lsrs	r4, r4, #9
 8000f5e:	e731      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000f60:	0028      	movs	r0, r5
 8000f62:	e765      	b.n	8000e30 <__aeabi_fmul+0xf8>
 8000f64:	01a4      	lsls	r4, r4, #6
 8000f66:	2000      	movs	r0, #0
 8000f68:	0a64      	lsrs	r4, r4, #9
 8000f6a:	e72b      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000f6c:	2080      	movs	r0, #128	; 0x80
 8000f6e:	03c0      	lsls	r0, r0, #15
 8000f70:	4304      	orrs	r4, r0
 8000f72:	0264      	lsls	r4, r4, #9
 8000f74:	20ff      	movs	r0, #255	; 0xff
 8000f76:	0a64      	lsrs	r4, r4, #9
 8000f78:	e724      	b.n	8000dc4 <__aeabi_fmul+0x8c>
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	08006180 	.word	0x08006180
 8000f80:	f7ffffff 	.word	0xf7ffffff

08000f84 <__aeabi_fsub>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	46ce      	mov	lr, r9
 8000f88:	4647      	mov	r7, r8
 8000f8a:	0243      	lsls	r3, r0, #9
 8000f8c:	0a5b      	lsrs	r3, r3, #9
 8000f8e:	024e      	lsls	r6, r1, #9
 8000f90:	00da      	lsls	r2, r3, #3
 8000f92:	4694      	mov	ip, r2
 8000f94:	0a72      	lsrs	r2, r6, #9
 8000f96:	4691      	mov	r9, r2
 8000f98:	0045      	lsls	r5, r0, #1
 8000f9a:	004a      	lsls	r2, r1, #1
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	0e2d      	lsrs	r5, r5, #24
 8000fa0:	001f      	movs	r7, r3
 8000fa2:	0fc4      	lsrs	r4, r0, #31
 8000fa4:	0e12      	lsrs	r2, r2, #24
 8000fa6:	0fc9      	lsrs	r1, r1, #31
 8000fa8:	09b6      	lsrs	r6, r6, #6
 8000faa:	2aff      	cmp	r2, #255	; 0xff
 8000fac:	d05b      	beq.n	8001066 <__aeabi_fsub+0xe2>
 8000fae:	2001      	movs	r0, #1
 8000fb0:	4041      	eors	r1, r0
 8000fb2:	428c      	cmp	r4, r1
 8000fb4:	d039      	beq.n	800102a <__aeabi_fsub+0xa6>
 8000fb6:	1aa8      	subs	r0, r5, r2
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	dd5a      	ble.n	8001072 <__aeabi_fsub+0xee>
 8000fbc:	2a00      	cmp	r2, #0
 8000fbe:	d06a      	beq.n	8001096 <__aeabi_fsub+0x112>
 8000fc0:	2dff      	cmp	r5, #255	; 0xff
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_fsub+0x42>
 8000fc4:	e0d9      	b.n	800117a <__aeabi_fsub+0x1f6>
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	4316      	orrs	r6, r2
 8000fcc:	281b      	cmp	r0, #27
 8000fce:	dc00      	bgt.n	8000fd2 <__aeabi_fsub+0x4e>
 8000fd0:	e0e9      	b.n	80011a6 <__aeabi_fsub+0x222>
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	4663      	mov	r3, ip
 8000fd6:	1a18      	subs	r0, r3, r0
 8000fd8:	0143      	lsls	r3, r0, #5
 8000fda:	d400      	bmi.n	8000fde <__aeabi_fsub+0x5a>
 8000fdc:	e0b4      	b.n	8001148 <__aeabi_fsub+0x1c4>
 8000fde:	0180      	lsls	r0, r0, #6
 8000fe0:	0987      	lsrs	r7, r0, #6
 8000fe2:	0038      	movs	r0, r7
 8000fe4:	f000 fa2c 	bl	8001440 <__clzsi2>
 8000fe8:	3805      	subs	r0, #5
 8000fea:	4087      	lsls	r7, r0
 8000fec:	4285      	cmp	r5, r0
 8000fee:	dc00      	bgt.n	8000ff2 <__aeabi_fsub+0x6e>
 8000ff0:	e0cc      	b.n	800118c <__aeabi_fsub+0x208>
 8000ff2:	1a2d      	subs	r5, r5, r0
 8000ff4:	48b5      	ldr	r0, [pc, #724]	; (80012cc <__aeabi_fsub+0x348>)
 8000ff6:	4038      	ands	r0, r7
 8000ff8:	0743      	lsls	r3, r0, #29
 8000ffa:	d004      	beq.n	8001006 <__aeabi_fsub+0x82>
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	4003      	ands	r3, r0
 8001000:	2b04      	cmp	r3, #4
 8001002:	d000      	beq.n	8001006 <__aeabi_fsub+0x82>
 8001004:	3004      	adds	r0, #4
 8001006:	0143      	lsls	r3, r0, #5
 8001008:	d400      	bmi.n	800100c <__aeabi_fsub+0x88>
 800100a:	e0a0      	b.n	800114e <__aeabi_fsub+0x1ca>
 800100c:	1c6a      	adds	r2, r5, #1
 800100e:	2dfe      	cmp	r5, #254	; 0xfe
 8001010:	d100      	bne.n	8001014 <__aeabi_fsub+0x90>
 8001012:	e08d      	b.n	8001130 <__aeabi_fsub+0x1ac>
 8001014:	0180      	lsls	r0, r0, #6
 8001016:	0a47      	lsrs	r7, r0, #9
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	05d0      	lsls	r0, r2, #23
 800101c:	4338      	orrs	r0, r7
 800101e:	07e4      	lsls	r4, r4, #31
 8001020:	4320      	orrs	r0, r4
 8001022:	bcc0      	pop	{r6, r7}
 8001024:	46b9      	mov	r9, r7
 8001026:	46b0      	mov	r8, r6
 8001028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800102a:	1aa8      	subs	r0, r5, r2
 800102c:	4680      	mov	r8, r0
 800102e:	2800      	cmp	r0, #0
 8001030:	dd45      	ble.n	80010be <__aeabi_fsub+0x13a>
 8001032:	2a00      	cmp	r2, #0
 8001034:	d070      	beq.n	8001118 <__aeabi_fsub+0x194>
 8001036:	2dff      	cmp	r5, #255	; 0xff
 8001038:	d100      	bne.n	800103c <__aeabi_fsub+0xb8>
 800103a:	e09e      	b.n	800117a <__aeabi_fsub+0x1f6>
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	04db      	lsls	r3, r3, #19
 8001040:	431e      	orrs	r6, r3
 8001042:	4643      	mov	r3, r8
 8001044:	2b1b      	cmp	r3, #27
 8001046:	dc00      	bgt.n	800104a <__aeabi_fsub+0xc6>
 8001048:	e0d2      	b.n	80011f0 <__aeabi_fsub+0x26c>
 800104a:	2001      	movs	r0, #1
 800104c:	4460      	add	r0, ip
 800104e:	0143      	lsls	r3, r0, #5
 8001050:	d57a      	bpl.n	8001148 <__aeabi_fsub+0x1c4>
 8001052:	3501      	adds	r5, #1
 8001054:	2dff      	cmp	r5, #255	; 0xff
 8001056:	d06b      	beq.n	8001130 <__aeabi_fsub+0x1ac>
 8001058:	2301      	movs	r3, #1
 800105a:	4a9d      	ldr	r2, [pc, #628]	; (80012d0 <__aeabi_fsub+0x34c>)
 800105c:	4003      	ands	r3, r0
 800105e:	0840      	lsrs	r0, r0, #1
 8001060:	4010      	ands	r0, r2
 8001062:	4318      	orrs	r0, r3
 8001064:	e7c8      	b.n	8000ff8 <__aeabi_fsub+0x74>
 8001066:	2e00      	cmp	r6, #0
 8001068:	d020      	beq.n	80010ac <__aeabi_fsub+0x128>
 800106a:	428c      	cmp	r4, r1
 800106c:	d023      	beq.n	80010b6 <__aeabi_fsub+0x132>
 800106e:	0028      	movs	r0, r5
 8001070:	38ff      	subs	r0, #255	; 0xff
 8001072:	2800      	cmp	r0, #0
 8001074:	d039      	beq.n	80010ea <__aeabi_fsub+0x166>
 8001076:	1b57      	subs	r7, r2, r5
 8001078:	2d00      	cmp	r5, #0
 800107a:	d000      	beq.n	800107e <__aeabi_fsub+0xfa>
 800107c:	e09d      	b.n	80011ba <__aeabi_fsub+0x236>
 800107e:	4663      	mov	r3, ip
 8001080:	2b00      	cmp	r3, #0
 8001082:	d100      	bne.n	8001086 <__aeabi_fsub+0x102>
 8001084:	e0db      	b.n	800123e <__aeabi_fsub+0x2ba>
 8001086:	1e7b      	subs	r3, r7, #1
 8001088:	2f01      	cmp	r7, #1
 800108a:	d100      	bne.n	800108e <__aeabi_fsub+0x10a>
 800108c:	e10d      	b.n	80012aa <__aeabi_fsub+0x326>
 800108e:	2fff      	cmp	r7, #255	; 0xff
 8001090:	d071      	beq.n	8001176 <__aeabi_fsub+0x1f2>
 8001092:	001f      	movs	r7, r3
 8001094:	e098      	b.n	80011c8 <__aeabi_fsub+0x244>
 8001096:	2e00      	cmp	r6, #0
 8001098:	d100      	bne.n	800109c <__aeabi_fsub+0x118>
 800109a:	e0a7      	b.n	80011ec <__aeabi_fsub+0x268>
 800109c:	1e42      	subs	r2, r0, #1
 800109e:	2801      	cmp	r0, #1
 80010a0:	d100      	bne.n	80010a4 <__aeabi_fsub+0x120>
 80010a2:	e0e6      	b.n	8001272 <__aeabi_fsub+0x2ee>
 80010a4:	28ff      	cmp	r0, #255	; 0xff
 80010a6:	d068      	beq.n	800117a <__aeabi_fsub+0x1f6>
 80010a8:	0010      	movs	r0, r2
 80010aa:	e78f      	b.n	8000fcc <__aeabi_fsub+0x48>
 80010ac:	2001      	movs	r0, #1
 80010ae:	4041      	eors	r1, r0
 80010b0:	42a1      	cmp	r1, r4
 80010b2:	d000      	beq.n	80010b6 <__aeabi_fsub+0x132>
 80010b4:	e77f      	b.n	8000fb6 <__aeabi_fsub+0x32>
 80010b6:	20ff      	movs	r0, #255	; 0xff
 80010b8:	4240      	negs	r0, r0
 80010ba:	4680      	mov	r8, r0
 80010bc:	44a8      	add	r8, r5
 80010be:	4640      	mov	r0, r8
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d038      	beq.n	8001136 <__aeabi_fsub+0x1b2>
 80010c4:	1b51      	subs	r1, r2, r5
 80010c6:	2d00      	cmp	r5, #0
 80010c8:	d100      	bne.n	80010cc <__aeabi_fsub+0x148>
 80010ca:	e0ae      	b.n	800122a <__aeabi_fsub+0x2a6>
 80010cc:	2aff      	cmp	r2, #255	; 0xff
 80010ce:	d100      	bne.n	80010d2 <__aeabi_fsub+0x14e>
 80010d0:	e0df      	b.n	8001292 <__aeabi_fsub+0x30e>
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	4660      	mov	r0, ip
 80010d6:	04db      	lsls	r3, r3, #19
 80010d8:	4318      	orrs	r0, r3
 80010da:	4684      	mov	ip, r0
 80010dc:	291b      	cmp	r1, #27
 80010de:	dc00      	bgt.n	80010e2 <__aeabi_fsub+0x15e>
 80010e0:	e0d9      	b.n	8001296 <__aeabi_fsub+0x312>
 80010e2:	2001      	movs	r0, #1
 80010e4:	0015      	movs	r5, r2
 80010e6:	1980      	adds	r0, r0, r6
 80010e8:	e7b1      	b.n	800104e <__aeabi_fsub+0xca>
 80010ea:	20fe      	movs	r0, #254	; 0xfe
 80010ec:	1c6a      	adds	r2, r5, #1
 80010ee:	4210      	tst	r0, r2
 80010f0:	d171      	bne.n	80011d6 <__aeabi_fsub+0x252>
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d000      	beq.n	80010f8 <__aeabi_fsub+0x174>
 80010f6:	e0a6      	b.n	8001246 <__aeabi_fsub+0x2c2>
 80010f8:	4663      	mov	r3, ip
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d100      	bne.n	8001100 <__aeabi_fsub+0x17c>
 80010fe:	e0d9      	b.n	80012b4 <__aeabi_fsub+0x330>
 8001100:	2200      	movs	r2, #0
 8001102:	2e00      	cmp	r6, #0
 8001104:	d100      	bne.n	8001108 <__aeabi_fsub+0x184>
 8001106:	e788      	b.n	800101a <__aeabi_fsub+0x96>
 8001108:	1b98      	subs	r0, r3, r6
 800110a:	0143      	lsls	r3, r0, #5
 800110c:	d400      	bmi.n	8001110 <__aeabi_fsub+0x18c>
 800110e:	e0e1      	b.n	80012d4 <__aeabi_fsub+0x350>
 8001110:	4663      	mov	r3, ip
 8001112:	000c      	movs	r4, r1
 8001114:	1af0      	subs	r0, r6, r3
 8001116:	e76f      	b.n	8000ff8 <__aeabi_fsub+0x74>
 8001118:	2e00      	cmp	r6, #0
 800111a:	d100      	bne.n	800111e <__aeabi_fsub+0x19a>
 800111c:	e0b7      	b.n	800128e <__aeabi_fsub+0x30a>
 800111e:	0002      	movs	r2, r0
 8001120:	3a01      	subs	r2, #1
 8001122:	2801      	cmp	r0, #1
 8001124:	d100      	bne.n	8001128 <__aeabi_fsub+0x1a4>
 8001126:	e09c      	b.n	8001262 <__aeabi_fsub+0x2de>
 8001128:	28ff      	cmp	r0, #255	; 0xff
 800112a:	d026      	beq.n	800117a <__aeabi_fsub+0x1f6>
 800112c:	4690      	mov	r8, r2
 800112e:	e788      	b.n	8001042 <__aeabi_fsub+0xbe>
 8001130:	22ff      	movs	r2, #255	; 0xff
 8001132:	2700      	movs	r7, #0
 8001134:	e771      	b.n	800101a <__aeabi_fsub+0x96>
 8001136:	20fe      	movs	r0, #254	; 0xfe
 8001138:	1c6a      	adds	r2, r5, #1
 800113a:	4210      	tst	r0, r2
 800113c:	d064      	beq.n	8001208 <__aeabi_fsub+0x284>
 800113e:	2aff      	cmp	r2, #255	; 0xff
 8001140:	d0f6      	beq.n	8001130 <__aeabi_fsub+0x1ac>
 8001142:	0015      	movs	r5, r2
 8001144:	4466      	add	r6, ip
 8001146:	0870      	lsrs	r0, r6, #1
 8001148:	0743      	lsls	r3, r0, #29
 800114a:	d000      	beq.n	800114e <__aeabi_fsub+0x1ca>
 800114c:	e756      	b.n	8000ffc <__aeabi_fsub+0x78>
 800114e:	08c3      	lsrs	r3, r0, #3
 8001150:	2dff      	cmp	r5, #255	; 0xff
 8001152:	d012      	beq.n	800117a <__aeabi_fsub+0x1f6>
 8001154:	025b      	lsls	r3, r3, #9
 8001156:	0a5f      	lsrs	r7, r3, #9
 8001158:	b2ea      	uxtb	r2, r5
 800115a:	e75e      	b.n	800101a <__aeabi_fsub+0x96>
 800115c:	4662      	mov	r2, ip
 800115e:	2a00      	cmp	r2, #0
 8001160:	d100      	bne.n	8001164 <__aeabi_fsub+0x1e0>
 8001162:	e096      	b.n	8001292 <__aeabi_fsub+0x30e>
 8001164:	2e00      	cmp	r6, #0
 8001166:	d008      	beq.n	800117a <__aeabi_fsub+0x1f6>
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	03d2      	lsls	r2, r2, #15
 800116c:	4213      	tst	r3, r2
 800116e:	d004      	beq.n	800117a <__aeabi_fsub+0x1f6>
 8001170:	4648      	mov	r0, r9
 8001172:	4210      	tst	r0, r2
 8001174:	d101      	bne.n	800117a <__aeabi_fsub+0x1f6>
 8001176:	000c      	movs	r4, r1
 8001178:	464b      	mov	r3, r9
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0d8      	beq.n	8001130 <__aeabi_fsub+0x1ac>
 800117e:	2780      	movs	r7, #128	; 0x80
 8001180:	03ff      	lsls	r7, r7, #15
 8001182:	431f      	orrs	r7, r3
 8001184:	027f      	lsls	r7, r7, #9
 8001186:	22ff      	movs	r2, #255	; 0xff
 8001188:	0a7f      	lsrs	r7, r7, #9
 800118a:	e746      	b.n	800101a <__aeabi_fsub+0x96>
 800118c:	2320      	movs	r3, #32
 800118e:	003a      	movs	r2, r7
 8001190:	1b45      	subs	r5, r0, r5
 8001192:	0038      	movs	r0, r7
 8001194:	3501      	adds	r5, #1
 8001196:	40ea      	lsrs	r2, r5
 8001198:	1b5d      	subs	r5, r3, r5
 800119a:	40a8      	lsls	r0, r5
 800119c:	1e43      	subs	r3, r0, #1
 800119e:	4198      	sbcs	r0, r3
 80011a0:	2500      	movs	r5, #0
 80011a2:	4310      	orrs	r0, r2
 80011a4:	e728      	b.n	8000ff8 <__aeabi_fsub+0x74>
 80011a6:	2320      	movs	r3, #32
 80011a8:	1a1b      	subs	r3, r3, r0
 80011aa:	0032      	movs	r2, r6
 80011ac:	409e      	lsls	r6, r3
 80011ae:	40c2      	lsrs	r2, r0
 80011b0:	0030      	movs	r0, r6
 80011b2:	1e43      	subs	r3, r0, #1
 80011b4:	4198      	sbcs	r0, r3
 80011b6:	4310      	orrs	r0, r2
 80011b8:	e70c      	b.n	8000fd4 <__aeabi_fsub+0x50>
 80011ba:	2aff      	cmp	r2, #255	; 0xff
 80011bc:	d0db      	beq.n	8001176 <__aeabi_fsub+0x1f2>
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	4660      	mov	r0, ip
 80011c2:	04db      	lsls	r3, r3, #19
 80011c4:	4318      	orrs	r0, r3
 80011c6:	4684      	mov	ip, r0
 80011c8:	2f1b      	cmp	r7, #27
 80011ca:	dd56      	ble.n	800127a <__aeabi_fsub+0x2f6>
 80011cc:	2001      	movs	r0, #1
 80011ce:	000c      	movs	r4, r1
 80011d0:	0015      	movs	r5, r2
 80011d2:	1a30      	subs	r0, r6, r0
 80011d4:	e700      	b.n	8000fd8 <__aeabi_fsub+0x54>
 80011d6:	4663      	mov	r3, ip
 80011d8:	1b9f      	subs	r7, r3, r6
 80011da:	017b      	lsls	r3, r7, #5
 80011dc:	d43d      	bmi.n	800125a <__aeabi_fsub+0x2d6>
 80011de:	2f00      	cmp	r7, #0
 80011e0:	d000      	beq.n	80011e4 <__aeabi_fsub+0x260>
 80011e2:	e6fe      	b.n	8000fe2 <__aeabi_fsub+0x5e>
 80011e4:	2400      	movs	r4, #0
 80011e6:	2200      	movs	r2, #0
 80011e8:	2700      	movs	r7, #0
 80011ea:	e716      	b.n	800101a <__aeabi_fsub+0x96>
 80011ec:	0005      	movs	r5, r0
 80011ee:	e7af      	b.n	8001150 <__aeabi_fsub+0x1cc>
 80011f0:	0032      	movs	r2, r6
 80011f2:	4643      	mov	r3, r8
 80011f4:	4641      	mov	r1, r8
 80011f6:	40da      	lsrs	r2, r3
 80011f8:	2320      	movs	r3, #32
 80011fa:	1a5b      	subs	r3, r3, r1
 80011fc:	409e      	lsls	r6, r3
 80011fe:	0030      	movs	r0, r6
 8001200:	1e43      	subs	r3, r0, #1
 8001202:	4198      	sbcs	r0, r3
 8001204:	4310      	orrs	r0, r2
 8001206:	e721      	b.n	800104c <__aeabi_fsub+0xc8>
 8001208:	2d00      	cmp	r5, #0
 800120a:	d1a7      	bne.n	800115c <__aeabi_fsub+0x1d8>
 800120c:	4663      	mov	r3, ip
 800120e:	2b00      	cmp	r3, #0
 8001210:	d059      	beq.n	80012c6 <__aeabi_fsub+0x342>
 8001212:	2200      	movs	r2, #0
 8001214:	2e00      	cmp	r6, #0
 8001216:	d100      	bne.n	800121a <__aeabi_fsub+0x296>
 8001218:	e6ff      	b.n	800101a <__aeabi_fsub+0x96>
 800121a:	0030      	movs	r0, r6
 800121c:	4460      	add	r0, ip
 800121e:	0143      	lsls	r3, r0, #5
 8001220:	d592      	bpl.n	8001148 <__aeabi_fsub+0x1c4>
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <__aeabi_fsub+0x348>)
 8001224:	3501      	adds	r5, #1
 8001226:	4018      	ands	r0, r3
 8001228:	e78e      	b.n	8001148 <__aeabi_fsub+0x1c4>
 800122a:	4663      	mov	r3, ip
 800122c:	2b00      	cmp	r3, #0
 800122e:	d047      	beq.n	80012c0 <__aeabi_fsub+0x33c>
 8001230:	1e4b      	subs	r3, r1, #1
 8001232:	2901      	cmp	r1, #1
 8001234:	d015      	beq.n	8001262 <__aeabi_fsub+0x2de>
 8001236:	29ff      	cmp	r1, #255	; 0xff
 8001238:	d02b      	beq.n	8001292 <__aeabi_fsub+0x30e>
 800123a:	0019      	movs	r1, r3
 800123c:	e74e      	b.n	80010dc <__aeabi_fsub+0x158>
 800123e:	000c      	movs	r4, r1
 8001240:	464b      	mov	r3, r9
 8001242:	003d      	movs	r5, r7
 8001244:	e784      	b.n	8001150 <__aeabi_fsub+0x1cc>
 8001246:	4662      	mov	r2, ip
 8001248:	2a00      	cmp	r2, #0
 800124a:	d18b      	bne.n	8001164 <__aeabi_fsub+0x1e0>
 800124c:	2e00      	cmp	r6, #0
 800124e:	d192      	bne.n	8001176 <__aeabi_fsub+0x1f2>
 8001250:	2780      	movs	r7, #128	; 0x80
 8001252:	2400      	movs	r4, #0
 8001254:	22ff      	movs	r2, #255	; 0xff
 8001256:	03ff      	lsls	r7, r7, #15
 8001258:	e6df      	b.n	800101a <__aeabi_fsub+0x96>
 800125a:	4663      	mov	r3, ip
 800125c:	000c      	movs	r4, r1
 800125e:	1af7      	subs	r7, r6, r3
 8001260:	e6bf      	b.n	8000fe2 <__aeabi_fsub+0x5e>
 8001262:	0030      	movs	r0, r6
 8001264:	4460      	add	r0, ip
 8001266:	2501      	movs	r5, #1
 8001268:	0143      	lsls	r3, r0, #5
 800126a:	d400      	bmi.n	800126e <__aeabi_fsub+0x2ea>
 800126c:	e76c      	b.n	8001148 <__aeabi_fsub+0x1c4>
 800126e:	2502      	movs	r5, #2
 8001270:	e6f2      	b.n	8001058 <__aeabi_fsub+0xd4>
 8001272:	4663      	mov	r3, ip
 8001274:	2501      	movs	r5, #1
 8001276:	1b98      	subs	r0, r3, r6
 8001278:	e6ae      	b.n	8000fd8 <__aeabi_fsub+0x54>
 800127a:	2320      	movs	r3, #32
 800127c:	4664      	mov	r4, ip
 800127e:	4660      	mov	r0, ip
 8001280:	40fc      	lsrs	r4, r7
 8001282:	1bdf      	subs	r7, r3, r7
 8001284:	40b8      	lsls	r0, r7
 8001286:	1e43      	subs	r3, r0, #1
 8001288:	4198      	sbcs	r0, r3
 800128a:	4320      	orrs	r0, r4
 800128c:	e79f      	b.n	80011ce <__aeabi_fsub+0x24a>
 800128e:	0005      	movs	r5, r0
 8001290:	e75e      	b.n	8001150 <__aeabi_fsub+0x1cc>
 8001292:	464b      	mov	r3, r9
 8001294:	e771      	b.n	800117a <__aeabi_fsub+0x1f6>
 8001296:	2320      	movs	r3, #32
 8001298:	4665      	mov	r5, ip
 800129a:	4660      	mov	r0, ip
 800129c:	40cd      	lsrs	r5, r1
 800129e:	1a59      	subs	r1, r3, r1
 80012a0:	4088      	lsls	r0, r1
 80012a2:	1e43      	subs	r3, r0, #1
 80012a4:	4198      	sbcs	r0, r3
 80012a6:	4328      	orrs	r0, r5
 80012a8:	e71c      	b.n	80010e4 <__aeabi_fsub+0x160>
 80012aa:	4663      	mov	r3, ip
 80012ac:	000c      	movs	r4, r1
 80012ae:	2501      	movs	r5, #1
 80012b0:	1af0      	subs	r0, r6, r3
 80012b2:	e691      	b.n	8000fd8 <__aeabi_fsub+0x54>
 80012b4:	2e00      	cmp	r6, #0
 80012b6:	d095      	beq.n	80011e4 <__aeabi_fsub+0x260>
 80012b8:	000c      	movs	r4, r1
 80012ba:	464f      	mov	r7, r9
 80012bc:	2200      	movs	r2, #0
 80012be:	e6ac      	b.n	800101a <__aeabi_fsub+0x96>
 80012c0:	464b      	mov	r3, r9
 80012c2:	000d      	movs	r5, r1
 80012c4:	e744      	b.n	8001150 <__aeabi_fsub+0x1cc>
 80012c6:	464f      	mov	r7, r9
 80012c8:	2200      	movs	r2, #0
 80012ca:	e6a6      	b.n	800101a <__aeabi_fsub+0x96>
 80012cc:	fbffffff 	.word	0xfbffffff
 80012d0:	7dffffff 	.word	0x7dffffff
 80012d4:	2800      	cmp	r0, #0
 80012d6:	d000      	beq.n	80012da <__aeabi_fsub+0x356>
 80012d8:	e736      	b.n	8001148 <__aeabi_fsub+0x1c4>
 80012da:	2400      	movs	r4, #0
 80012dc:	2700      	movs	r7, #0
 80012de:	e69c      	b.n	800101a <__aeabi_fsub+0x96>

080012e0 <__aeabi_f2iz>:
 80012e0:	0241      	lsls	r1, r0, #9
 80012e2:	0042      	lsls	r2, r0, #1
 80012e4:	0fc3      	lsrs	r3, r0, #31
 80012e6:	0a49      	lsrs	r1, r1, #9
 80012e8:	2000      	movs	r0, #0
 80012ea:	0e12      	lsrs	r2, r2, #24
 80012ec:	2a7e      	cmp	r2, #126	; 0x7e
 80012ee:	dd03      	ble.n	80012f8 <__aeabi_f2iz+0x18>
 80012f0:	2a9d      	cmp	r2, #157	; 0x9d
 80012f2:	dd02      	ble.n	80012fa <__aeabi_f2iz+0x1a>
 80012f4:	4a09      	ldr	r2, [pc, #36]	; (800131c <__aeabi_f2iz+0x3c>)
 80012f6:	1898      	adds	r0, r3, r2
 80012f8:	4770      	bx	lr
 80012fa:	2080      	movs	r0, #128	; 0x80
 80012fc:	0400      	lsls	r0, r0, #16
 80012fe:	4301      	orrs	r1, r0
 8001300:	2a95      	cmp	r2, #149	; 0x95
 8001302:	dc07      	bgt.n	8001314 <__aeabi_f2iz+0x34>
 8001304:	2096      	movs	r0, #150	; 0x96
 8001306:	1a82      	subs	r2, r0, r2
 8001308:	40d1      	lsrs	r1, r2
 800130a:	4248      	negs	r0, r1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f3      	bne.n	80012f8 <__aeabi_f2iz+0x18>
 8001310:	0008      	movs	r0, r1
 8001312:	e7f1      	b.n	80012f8 <__aeabi_f2iz+0x18>
 8001314:	3a96      	subs	r2, #150	; 0x96
 8001316:	4091      	lsls	r1, r2
 8001318:	e7f7      	b.n	800130a <__aeabi_f2iz+0x2a>
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	7fffffff 	.word	0x7fffffff

08001320 <__aeabi_i2f>:
 8001320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001322:	2800      	cmp	r0, #0
 8001324:	d013      	beq.n	800134e <__aeabi_i2f+0x2e>
 8001326:	17c3      	asrs	r3, r0, #31
 8001328:	18c6      	adds	r6, r0, r3
 800132a:	405e      	eors	r6, r3
 800132c:	0fc4      	lsrs	r4, r0, #31
 800132e:	0030      	movs	r0, r6
 8001330:	f000 f886 	bl	8001440 <__clzsi2>
 8001334:	239e      	movs	r3, #158	; 0x9e
 8001336:	0005      	movs	r5, r0
 8001338:	1a1b      	subs	r3, r3, r0
 800133a:	2b96      	cmp	r3, #150	; 0x96
 800133c:	dc0f      	bgt.n	800135e <__aeabi_i2f+0x3e>
 800133e:	2808      	cmp	r0, #8
 8001340:	dd01      	ble.n	8001346 <__aeabi_i2f+0x26>
 8001342:	3d08      	subs	r5, #8
 8001344:	40ae      	lsls	r6, r5
 8001346:	0276      	lsls	r6, r6, #9
 8001348:	0a76      	lsrs	r6, r6, #9
 800134a:	b2d8      	uxtb	r0, r3
 800134c:	e002      	b.n	8001354 <__aeabi_i2f+0x34>
 800134e:	2400      	movs	r4, #0
 8001350:	2000      	movs	r0, #0
 8001352:	2600      	movs	r6, #0
 8001354:	05c0      	lsls	r0, r0, #23
 8001356:	4330      	orrs	r0, r6
 8001358:	07e4      	lsls	r4, r4, #31
 800135a:	4320      	orrs	r0, r4
 800135c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800135e:	2b99      	cmp	r3, #153	; 0x99
 8001360:	dd0c      	ble.n	800137c <__aeabi_i2f+0x5c>
 8001362:	2205      	movs	r2, #5
 8001364:	0031      	movs	r1, r6
 8001366:	1a12      	subs	r2, r2, r0
 8001368:	40d1      	lsrs	r1, r2
 800136a:	000a      	movs	r2, r1
 800136c:	0001      	movs	r1, r0
 800136e:	0030      	movs	r0, r6
 8001370:	311b      	adds	r1, #27
 8001372:	4088      	lsls	r0, r1
 8001374:	1e41      	subs	r1, r0, #1
 8001376:	4188      	sbcs	r0, r1
 8001378:	4302      	orrs	r2, r0
 800137a:	0016      	movs	r6, r2
 800137c:	2d05      	cmp	r5, #5
 800137e:	dc12      	bgt.n	80013a6 <__aeabi_i2f+0x86>
 8001380:	0031      	movs	r1, r6
 8001382:	4f0d      	ldr	r7, [pc, #52]	; (80013b8 <__aeabi_i2f+0x98>)
 8001384:	4039      	ands	r1, r7
 8001386:	0772      	lsls	r2, r6, #29
 8001388:	d009      	beq.n	800139e <__aeabi_i2f+0x7e>
 800138a:	200f      	movs	r0, #15
 800138c:	4030      	ands	r0, r6
 800138e:	2804      	cmp	r0, #4
 8001390:	d005      	beq.n	800139e <__aeabi_i2f+0x7e>
 8001392:	3104      	adds	r1, #4
 8001394:	014a      	lsls	r2, r1, #5
 8001396:	d502      	bpl.n	800139e <__aeabi_i2f+0x7e>
 8001398:	239f      	movs	r3, #159	; 0x9f
 800139a:	4039      	ands	r1, r7
 800139c:	1b5b      	subs	r3, r3, r5
 800139e:	0189      	lsls	r1, r1, #6
 80013a0:	0a4e      	lsrs	r6, r1, #9
 80013a2:	b2d8      	uxtb	r0, r3
 80013a4:	e7d6      	b.n	8001354 <__aeabi_i2f+0x34>
 80013a6:	1f6a      	subs	r2, r5, #5
 80013a8:	4096      	lsls	r6, r2
 80013aa:	0031      	movs	r1, r6
 80013ac:	4f02      	ldr	r7, [pc, #8]	; (80013b8 <__aeabi_i2f+0x98>)
 80013ae:	4039      	ands	r1, r7
 80013b0:	0772      	lsls	r2, r6, #29
 80013b2:	d0f4      	beq.n	800139e <__aeabi_i2f+0x7e>
 80013b4:	e7e9      	b.n	800138a <__aeabi_i2f+0x6a>
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	fbffffff 	.word	0xfbffffff

080013bc <__aeabi_ui2f>:
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	1e05      	subs	r5, r0, #0
 80013c0:	d00e      	beq.n	80013e0 <__aeabi_ui2f+0x24>
 80013c2:	f000 f83d 	bl	8001440 <__clzsi2>
 80013c6:	239e      	movs	r3, #158	; 0x9e
 80013c8:	0004      	movs	r4, r0
 80013ca:	1a1b      	subs	r3, r3, r0
 80013cc:	2b96      	cmp	r3, #150	; 0x96
 80013ce:	dc0c      	bgt.n	80013ea <__aeabi_ui2f+0x2e>
 80013d0:	2808      	cmp	r0, #8
 80013d2:	dd01      	ble.n	80013d8 <__aeabi_ui2f+0x1c>
 80013d4:	3c08      	subs	r4, #8
 80013d6:	40a5      	lsls	r5, r4
 80013d8:	026d      	lsls	r5, r5, #9
 80013da:	0a6d      	lsrs	r5, r5, #9
 80013dc:	b2d8      	uxtb	r0, r3
 80013de:	e001      	b.n	80013e4 <__aeabi_ui2f+0x28>
 80013e0:	2000      	movs	r0, #0
 80013e2:	2500      	movs	r5, #0
 80013e4:	05c0      	lsls	r0, r0, #23
 80013e6:	4328      	orrs	r0, r5
 80013e8:	bd70      	pop	{r4, r5, r6, pc}
 80013ea:	2b99      	cmp	r3, #153	; 0x99
 80013ec:	dd09      	ble.n	8001402 <__aeabi_ui2f+0x46>
 80013ee:	0002      	movs	r2, r0
 80013f0:	0029      	movs	r1, r5
 80013f2:	321b      	adds	r2, #27
 80013f4:	4091      	lsls	r1, r2
 80013f6:	1e4a      	subs	r2, r1, #1
 80013f8:	4191      	sbcs	r1, r2
 80013fa:	2205      	movs	r2, #5
 80013fc:	1a12      	subs	r2, r2, r0
 80013fe:	40d5      	lsrs	r5, r2
 8001400:	430d      	orrs	r5, r1
 8001402:	2c05      	cmp	r4, #5
 8001404:	dc12      	bgt.n	800142c <__aeabi_ui2f+0x70>
 8001406:	0029      	movs	r1, r5
 8001408:	4e0c      	ldr	r6, [pc, #48]	; (800143c <__aeabi_ui2f+0x80>)
 800140a:	4031      	ands	r1, r6
 800140c:	076a      	lsls	r2, r5, #29
 800140e:	d009      	beq.n	8001424 <__aeabi_ui2f+0x68>
 8001410:	200f      	movs	r0, #15
 8001412:	4028      	ands	r0, r5
 8001414:	2804      	cmp	r0, #4
 8001416:	d005      	beq.n	8001424 <__aeabi_ui2f+0x68>
 8001418:	3104      	adds	r1, #4
 800141a:	014a      	lsls	r2, r1, #5
 800141c:	d502      	bpl.n	8001424 <__aeabi_ui2f+0x68>
 800141e:	239f      	movs	r3, #159	; 0x9f
 8001420:	4031      	ands	r1, r6
 8001422:	1b1b      	subs	r3, r3, r4
 8001424:	0189      	lsls	r1, r1, #6
 8001426:	0a4d      	lsrs	r5, r1, #9
 8001428:	b2d8      	uxtb	r0, r3
 800142a:	e7db      	b.n	80013e4 <__aeabi_ui2f+0x28>
 800142c:	1f62      	subs	r2, r4, #5
 800142e:	4095      	lsls	r5, r2
 8001430:	0029      	movs	r1, r5
 8001432:	4e02      	ldr	r6, [pc, #8]	; (800143c <__aeabi_ui2f+0x80>)
 8001434:	4031      	ands	r1, r6
 8001436:	076a      	lsls	r2, r5, #29
 8001438:	d0f4      	beq.n	8001424 <__aeabi_ui2f+0x68>
 800143a:	e7e9      	b.n	8001410 <__aeabi_ui2f+0x54>
 800143c:	fbffffff 	.word	0xfbffffff

08001440 <__clzsi2>:
 8001440:	211c      	movs	r1, #28
 8001442:	2301      	movs	r3, #1
 8001444:	041b      	lsls	r3, r3, #16
 8001446:	4298      	cmp	r0, r3
 8001448:	d301      	bcc.n	800144e <__clzsi2+0xe>
 800144a:	0c00      	lsrs	r0, r0, #16
 800144c:	3910      	subs	r1, #16
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	4298      	cmp	r0, r3
 8001452:	d301      	bcc.n	8001458 <__clzsi2+0x18>
 8001454:	0a00      	lsrs	r0, r0, #8
 8001456:	3908      	subs	r1, #8
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	4298      	cmp	r0, r3
 800145c:	d301      	bcc.n	8001462 <__clzsi2+0x22>
 800145e:	0900      	lsrs	r0, r0, #4
 8001460:	3904      	subs	r1, #4
 8001462:	a202      	add	r2, pc, #8	; (adr r2, 800146c <__clzsi2+0x2c>)
 8001464:	5c10      	ldrb	r0, [r2, r0]
 8001466:	1840      	adds	r0, r0, r1
 8001468:	4770      	bx	lr
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	02020304 	.word	0x02020304
 8001470:	01010101 	.word	0x01010101
	...

0800147c <__clzdi2>:
 800147c:	b510      	push	{r4, lr}
 800147e:	2900      	cmp	r1, #0
 8001480:	d103      	bne.n	800148a <__clzdi2+0xe>
 8001482:	f7ff ffdd 	bl	8001440 <__clzsi2>
 8001486:	3020      	adds	r0, #32
 8001488:	e002      	b.n	8001490 <__clzdi2+0x14>
 800148a:	0008      	movs	r0, r1
 800148c:	f7ff ffd8 	bl	8001440 <__clzsi2>
 8001490:	bd10      	pop	{r4, pc}
 8001492:	46c0      	nop			; (mov r8, r8)

08001494 <max>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USER CODE BEGIN PV */

float max (float x ,float y , float z)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
		 if(x>=y)
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f7fe ffd4 	bl	8000450 <__aeabi_fcmpge>
 80014a8:	1e03      	subs	r3, r0, #0
 80014aa:	d001      	beq.n	80014b0 <max+0x1c>

			 {x=y;}
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60fb      	str	r3, [r7, #12]
		 else {x=x;}

		 if(x<=z)
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f7fe ffb8 	bl	8000428 <__aeabi_fcmple>
 80014b8:	1e03      	subs	r3, r0, #0
 80014ba:	d001      	beq.n	80014c0 <max+0x2c>

		 { x=z;}
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	60fb      	str	r3, [r7, #12]
		 else {x=x;}
		 return x;
 80014c0:	68fb      	ldr	r3, [r7, #12]

	}
 80014c2:	1c18      	adds	r0, r3, #0
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b004      	add	sp, #16
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014cc:	b5b0      	push	{r4, r5, r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d0:	f000 ff14 	bl	80022fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d4:	f000 fb72 	bl	8001bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d8:	f000 fd34 	bl	8001f44 <MX_GPIO_Init>
  MX_DMA_Init();
 80014dc:	f000 fd14 	bl	8001f08 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80014e0:	f000 fcc4 	bl	8001e6c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80014e4:	f000 fc24 	bl	8001d30 <MX_TIM2_Init>
  MX_TIM1_Init();
 80014e8:	f000 fbc6 	bl	8001c78 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  htim2.Instance->CCR1 = 999;
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <main+0xd8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a2d      	ldr	r2, [pc, #180]	; (80015a8 <main+0xdc>)
 80014f2:	635a      	str	r2, [r3, #52]	; 0x34
  htim2.Instance->CCR2 = 999;
 80014f4:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <main+0xd8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a2b      	ldr	r2, [pc, #172]	; (80015a8 <main+0xdc>)
 80014fa:	639a      	str	r2, [r3, #56]	; 0x38
  htim2.Instance->CCR3 = 999;
 80014fc:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <main+0xd8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a29      	ldr	r2, [pc, #164]	; (80015a8 <main+0xdc>)
 8001502:	63da      	str	r2, [r3, #60]	; 0x3c
  htim2.Instance->CCR4 = 999;
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <main+0xd8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a27      	ldr	r2, [pc, #156]	; (80015a8 <main+0xdc>)
 800150a:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <main+0xd8>)
 800150e:	2100      	movs	r1, #0
 8001510:	0018      	movs	r0, r3
 8001512:	f002 fd25 	bl	8003f60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001516:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <main+0xd8>)
 8001518:	2104      	movs	r1, #4
 800151a:	0018      	movs	r0, r3
 800151c:	f002 fd20 	bl	8003f60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <main+0xd8>)
 8001522:	2108      	movs	r1, #8
 8001524:	0018      	movs	r0, r3
 8001526:	f002 fd1b 	bl	8003f60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <main+0xd8>)
 800152c:	210c      	movs	r1, #12
 800152e:	0018      	movs	r0, r3
 8001530:	f002 fd16 	bl	8003f60 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  n=HAL_GetTick();
 8001534:	f000 ff5e 	bl	80023f4 <HAL_GetTick>
 8001538:	0003      	movs	r3, r0
 800153a:	001a      	movs	r2, r3
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <main+0xe0>)
 800153e:	601a      	str	r2, [r3, #0]

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	019b      	lsls	r3, r3, #6
 8001544:	4a1a      	ldr	r2, [pc, #104]	; (80015b0 <main+0xe4>)
 8001546:	0019      	movs	r1, r3
 8001548:	0010      	movs	r0, r2
 800154a:	f001 fc9e 	bl	8002e8a <HAL_GPIO_TogglePin>


	  b++;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <main+0xe8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <main+0xe8>)
 8001556:	601a      	str	r2, [r3, #0]
	  HAL_UART_Receive_DMA(&huart1, &m[0], 4);
 8001558:	4917      	ldr	r1, [pc, #92]	; (80015b8 <main+0xec>)
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <main+0xf0>)
 800155c:	2204      	movs	r2, #4
 800155e:	0018      	movs	r0, r3
 8001560:	f003 fc8a 	bl	8004e78 <HAL_UART_Receive_DMA>

	  while (i<1)
 8001564:	e0c5      	b.n	80016f2 <main+0x226>

	  {

	  	 				  HAL_Delay(5000);
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <main+0xf4>)
 8001568:	0018      	movs	r0, r3
 800156a:	f000 ff4d 	bl	8002408 <HAL_Delay>
	  	 				  if(htim2.Instance->CCR1==999)
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <main+0xd8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001574:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <main+0xdc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d124      	bne.n	80015c4 <main+0xf8>
	  	 			 	  {
	  	 			 	  htim2.Instance->CCR1 = 500;
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <main+0xd8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	22fa      	movs	r2, #250	; 0xfa
 8001580:	0052      	lsls	r2, r2, #1
 8001582:	635a      	str	r2, [r3, #52]	; 0x34
	  	 			 	  htim2.Instance->CCR2 = 500;
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <main+0xd8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	22fa      	movs	r2, #250	; 0xfa
 800158a:	0052      	lsls	r2, r2, #1
 800158c:	639a      	str	r2, [r3, #56]	; 0x38
	  	 			 	  htim2.Instance->CCR3 = 500;
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <main+0xd8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	22fa      	movs	r2, #250	; 0xfa
 8001594:	0052      	lsls	r2, r2, #1
 8001596:	63da      	str	r2, [r3, #60]	; 0x3c
	  	 			 	  htim2.Instance->CCR4 = 500;
 8001598:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <main+0xd8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	22fa      	movs	r2, #250	; 0xfa
 800159e:	0052      	lsls	r2, r2, #1
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
 80015a2:	e0a6      	b.n	80016f2 <main+0x226>
 80015a4:	200000f4 	.word	0x200000f4
 80015a8:	000003e7 	.word	0x000003e7
 80015ac:	20000064 	.word	0x20000064
 80015b0:	50000800 	.word	0x50000800
 80015b4:	20000028 	.word	0x20000028
 80015b8:	2000002c 	.word	0x2000002c
 80015bc:	20000140 	.word	0x20000140
 80015c0:	00001388 	.word	0x00001388
//
//	  	 			 	  htim2.Instance->CCR1 = 800;
//	  	 			 	  htim2.Instance->CCR2 = 800;
//	  	 			 	  htim2.Instance->CCR3 = 800;
//	  	 			 	  htim2.Instance->CCR4 = 800;
	  	 			 		  HAL_Delay(1000);
 80015c4:	23fa      	movs	r3, #250	; 0xfa
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	0018      	movs	r0, r3
 80015ca:	f000 ff1d 	bl	8002408 <HAL_Delay>
//	  	 			 	  htim2.Instance->CCR1 = 600;
//	  	 			 	  htim2.Instance->CCR2 = 700;
//	  	 			 	  htim2.Instance->CCR3 = 700;
//	  	 			 	  htim2.Instance->CCR4 = 700;
//	  	 			 		 HAL_Delay(1000);
	  	 			 	  htim2.Instance->CCR1 = 600;
 80015ce:	4bfc      	ldr	r3, [pc, #1008]	; (80019c0 <main+0x4f4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2296      	movs	r2, #150	; 0x96
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34
	  	 			 	  htim2.Instance->CCR2 = 600;
 80015d8:	4bf9      	ldr	r3, [pc, #996]	; (80019c0 <main+0x4f4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2296      	movs	r2, #150	; 0x96
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	639a      	str	r2, [r3, #56]	; 0x38
	  	 			 	  htim2.Instance->CCR3 = 600;
 80015e2:	4bf7      	ldr	r3, [pc, #988]	; (80019c0 <main+0x4f4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2296      	movs	r2, #150	; 0x96
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	63da      	str	r2, [r3, #60]	; 0x3c
	  	 			 	  htim2.Instance->CCR4 = 600;
 80015ec:	4bf4      	ldr	r3, [pc, #976]	; (80019c0 <main+0x4f4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2296      	movs	r2, #150	; 0x96
 80015f2:	0092      	lsls	r2, r2, #2
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
	  	 			 	 	 HAL_Delay(1000);
 80015f6:	23fa      	movs	r3, #250	; 0xfa
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	0018      	movs	r0, r3
 80015fc:	f000 ff04 	bl	8002408 <HAL_Delay>
	  	 			 	  htim2.Instance->CCR1 = 550;
 8001600:	4bef      	ldr	r3, [pc, #956]	; (80019c0 <main+0x4f4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4aef      	ldr	r2, [pc, #956]	; (80019c4 <main+0x4f8>)
 8001606:	635a      	str	r2, [r3, #52]	; 0x34
	  	 			 	  htim2.Instance->CCR2 = 550;
 8001608:	4bed      	ldr	r3, [pc, #948]	; (80019c0 <main+0x4f4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4aed      	ldr	r2, [pc, #948]	; (80019c4 <main+0x4f8>)
 800160e:	639a      	str	r2, [r3, #56]	; 0x38
	  	 			 	  htim2.Instance->CCR3 = 550;
 8001610:	4beb      	ldr	r3, [pc, #940]	; (80019c0 <main+0x4f4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4aeb      	ldr	r2, [pc, #940]	; (80019c4 <main+0x4f8>)
 8001616:	63da      	str	r2, [r3, #60]	; 0x3c
	  	 			 	  htim2.Instance->CCR4 = 550;
 8001618:	4be9      	ldr	r3, [pc, #932]	; (80019c0 <main+0x4f4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4ae9      	ldr	r2, [pc, #932]	; (80019c4 <main+0x4f8>)
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
	  	 			 		  HAL_Delay(1000);
 8001620:	23fa      	movs	r3, #250	; 0xfa
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	0018      	movs	r0, r3
 8001626:	f000 feef 	bl	8002408 <HAL_Delay>
	  	 			 	  htim2.Instance->CCR1 = 550;
 800162a:	4be5      	ldr	r3, [pc, #916]	; (80019c0 <main+0x4f4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4ae5      	ldr	r2, [pc, #916]	; (80019c4 <main+0x4f8>)
 8001630:	635a      	str	r2, [r3, #52]	; 0x34
	  	 			 	  htim2.Instance->CCR2 = 550;
 8001632:	4be3      	ldr	r3, [pc, #908]	; (80019c0 <main+0x4f4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4ae3      	ldr	r2, [pc, #908]	; (80019c4 <main+0x4f8>)
 8001638:	639a      	str	r2, [r3, #56]	; 0x38
	  	 			 	  htim2.Instance->CCR3 = 550;
 800163a:	4be1      	ldr	r3, [pc, #900]	; (80019c0 <main+0x4f4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4ae1      	ldr	r2, [pc, #900]	; (80019c4 <main+0x4f8>)
 8001640:	63da      	str	r2, [r3, #60]	; 0x3c
	  	 			 	  htim2.Instance->CCR4 = 550;
 8001642:	4bdf      	ldr	r3, [pc, #892]	; (80019c0 <main+0x4f4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4adf      	ldr	r2, [pc, #892]	; (80019c4 <main+0x4f8>)
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
	  	 			 		  HAL_Delay(2000);
 800164a:	23fa      	movs	r3, #250	; 0xfa
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	0018      	movs	r0, r3
 8001650:	f000 feda 	bl	8002408 <HAL_Delay>
		  	 			 	  htim2.Instance->CCR1 = 600;HAL_Delay(100);
 8001654:	4bda      	ldr	r3, [pc, #872]	; (80019c0 <main+0x4f4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2296      	movs	r2, #150	; 0x96
 800165a:	0092      	lsls	r2, r2, #2
 800165c:	635a      	str	r2, [r3, #52]	; 0x34
 800165e:	2064      	movs	r0, #100	; 0x64
 8001660:	f000 fed2 	bl	8002408 <HAL_Delay>

		  	 			 	  htim2.Instance->CCR2 = 600;HAL_Delay(100);
 8001664:	4bd6      	ldr	r3, [pc, #856]	; (80019c0 <main+0x4f4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2296      	movs	r2, #150	; 0x96
 800166a:	0092      	lsls	r2, r2, #2
 800166c:	639a      	str	r2, [r3, #56]	; 0x38
 800166e:	2064      	movs	r0, #100	; 0x64
 8001670:	f000 feca 	bl	8002408 <HAL_Delay>
		  	 			 	  htim2.Instance->CCR3 = 600;HAL_Delay(100);
 8001674:	4bd2      	ldr	r3, [pc, #840]	; (80019c0 <main+0x4f4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2296      	movs	r2, #150	; 0x96
 800167a:	0092      	lsls	r2, r2, #2
 800167c:	63da      	str	r2, [r3, #60]	; 0x3c
 800167e:	2064      	movs	r0, #100	; 0x64
 8001680:	f000 fec2 	bl	8002408 <HAL_Delay>
		  	 			 	  htim2.Instance->CCR4 = 600;HAL_Delay(100);
 8001684:	4bce      	ldr	r3, [pc, #824]	; (80019c0 <main+0x4f4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2296      	movs	r2, #150	; 0x96
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
 800168e:	2064      	movs	r0, #100	; 0x64
 8001690:	f000 feba 	bl	8002408 <HAL_Delay>
		  	 			 		  HAL_Delay(1000);
 8001694:	23fa      	movs	r3, #250	; 0xfa
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	0018      	movs	r0, r3
 800169a:	f000 feb5 	bl	8002408 <HAL_Delay>
		  	 			 	  htim2.Instance->CCR1 = 700;HAL_Delay(100);
 800169e:	4bc8      	ldr	r3, [pc, #800]	; (80019c0 <main+0x4f4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	22af      	movs	r2, #175	; 0xaf
 80016a4:	0092      	lsls	r2, r2, #2
 80016a6:	635a      	str	r2, [r3, #52]	; 0x34
 80016a8:	2064      	movs	r0, #100	; 0x64
 80016aa:	f000 fead 	bl	8002408 <HAL_Delay>
		  	 			 	  htim2.Instance->CCR2 = 700;HAL_Delay(100);
 80016ae:	4bc4      	ldr	r3, [pc, #784]	; (80019c0 <main+0x4f4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	22af      	movs	r2, #175	; 0xaf
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	639a      	str	r2, [r3, #56]	; 0x38
 80016b8:	2064      	movs	r0, #100	; 0x64
 80016ba:	f000 fea5 	bl	8002408 <HAL_Delay>
		  	 			 	  htim2.Instance->CCR3 = 700;HAL_Delay(100);
 80016be:	4bc0      	ldr	r3, [pc, #768]	; (80019c0 <main+0x4f4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	22af      	movs	r2, #175	; 0xaf
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80016c8:	2064      	movs	r0, #100	; 0x64
 80016ca:	f000 fe9d 	bl	8002408 <HAL_Delay>
		  	 			 	  htim2.Instance->CCR4 = 700;HAL_Delay(100);
 80016ce:	4bbc      	ldr	r3, [pc, #752]	; (80019c0 <main+0x4f4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	22af      	movs	r2, #175	; 0xaf
 80016d4:	0092      	lsls	r2, r2, #2
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
 80016d8:	2064      	movs	r0, #100	; 0x64
 80016da:	f000 fe95 	bl	8002408 <HAL_Delay>
		  	 			 		 HAL_Delay(2000);
 80016de:	23fa      	movs	r3, #250	; 0xfa
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	0018      	movs	r0, r3
 80016e4:	f000 fe90 	bl	8002408 <HAL_Delay>
//		  	 			 	  htim2.Instance->CCR1 = 999;  HAL_Delay(1000);
//		  	 			 	  htim2.Instance->CCR2 = 999;  HAL_Delay(1000);
//		  	 			 	  htim2.Instance->CCR3 = 999;  HAL_Delay(1000);
//		  	 			 	  htim2.Instance->CCR4 = 999;  HAL_Delay(1000);

	  	 			 		 i++;
 80016e8:	4bb7      	ldr	r3, [pc, #732]	; (80019c8 <main+0x4fc>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	4bb6      	ldr	r3, [pc, #728]	; (80019c8 <main+0x4fc>)
 80016f0:	601a      	str	r2, [r3, #0]
	  while (i<1)
 80016f2:	4bb5      	ldr	r3, [pc, #724]	; (80019c8 <main+0x4fc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	dc00      	bgt.n	80016fc <main+0x230>
 80016fa:	e734      	b.n	8001566 <main+0x9a>
	  }




	  bb=m[0];
 80016fc:	4bb3      	ldr	r3, [pc, #716]	; (80019cc <main+0x500>)
 80016fe:	2200      	movs	r2, #0
 8001700:	5e9b      	ldrsh	r3, [r3, r2]
 8001702:	0018      	movs	r0, r3
 8001704:	f7ff fe0c 	bl	8001320 <__aeabi_i2f>
 8001708:	1c02      	adds	r2, r0, #0
 800170a:	4bb1      	ldr	r3, [pc, #708]	; (80019d0 <main+0x504>)
 800170c:	601a      	str	r2, [r3, #0]
 	  HAL_Delay(1);
 800170e:	2001      	movs	r0, #1
 8001710:	f000 fe7a 	bl	8002408 <HAL_Delay>

	  	 		 error=((0-m[1])/2)*2;
 8001714:	4bad      	ldr	r3, [pc, #692]	; (80019cc <main+0x500>)
 8001716:	2202      	movs	r2, #2
 8001718:	5e9b      	ldrsh	r3, [r3, r2]
 800171a:	2b00      	cmp	r3, #0
 800171c:	da00      	bge.n	8001720 <main+0x254>
 800171e:	3301      	adds	r3, #1
 8001720:	105b      	asrs	r3, r3, #1
 8001722:	425b      	negs	r3, r3
 8001724:	005a      	lsls	r2, r3, #1
 8001726:	4bab      	ldr	r3, [pc, #684]	; (80019d4 <main+0x508>)
 8001728:	601a      	str	r2, [r3, #0]
	  	 		 kp=2.0;
 800172a:	4bab      	ldr	r3, [pc, #684]	; (80019d8 <main+0x50c>)
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	05d2      	lsls	r2, r2, #23
 8001730:	601a      	str	r2, [r3, #0]
	  	 		 ki=1.1;
 8001732:	4baa      	ldr	r3, [pc, #680]	; (80019dc <main+0x510>)
 8001734:	4aaa      	ldr	r2, [pc, #680]	; (80019e0 <main+0x514>)
 8001736:	601a      	str	r2, [r3, #0]
	  	 		 kd=0.1;
 8001738:	4baa      	ldr	r3, [pc, #680]	; (80019e4 <main+0x518>)
 800173a:	4aab      	ldr	r2, [pc, #684]	; (80019e8 <main+0x51c>)
 800173c:	601a      	str	r2, [r3, #0]
	  	 		 po=error*kp;
 800173e:	4ba5      	ldr	r3, [pc, #660]	; (80019d4 <main+0x508>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	0018      	movs	r0, r3
 8001744:	f7ff fdec 	bl	8001320 <__aeabi_i2f>
 8001748:	1c02      	adds	r2, r0, #0
 800174a:	4ba3      	ldr	r3, [pc, #652]	; (80019d8 <main+0x50c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	1c19      	adds	r1, r3, #0
 8001750:	1c10      	adds	r0, r2, #0
 8001752:	f7ff faf1 	bl	8000d38 <__aeabi_fmul>
 8001756:	1c03      	adds	r3, r0, #0
 8001758:	1c1a      	adds	r2, r3, #0
 800175a:	4ba4      	ldr	r3, [pc, #656]	; (80019ec <main+0x520>)
 800175c:	601a      	str	r2, [r3, #0]
	  	 		 iu+=error*dt;
 800175e:	4b9d      	ldr	r3, [pc, #628]	; (80019d4 <main+0x508>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff fddc 	bl	8001320 <__aeabi_i2f>
 8001768:	1c02      	adds	r2, r0, #0
 800176a:	4ba1      	ldr	r3, [pc, #644]	; (80019f0 <main+0x524>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	1c19      	adds	r1, r3, #0
 8001770:	1c10      	adds	r0, r2, #0
 8001772:	f7ff fae1 	bl	8000d38 <__aeabi_fmul>
 8001776:	1c03      	adds	r3, r0, #0
 8001778:	1c1a      	adds	r2, r3, #0
 800177a:	4b9e      	ldr	r3, [pc, #632]	; (80019f4 <main+0x528>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	1c19      	adds	r1, r3, #0
 8001780:	1c10      	adds	r0, r2, #0
 8001782:	f7fe ff73 	bl	800066c <__aeabi_fadd>
 8001786:	1c03      	adds	r3, r0, #0
 8001788:	1c1a      	adds	r2, r3, #0
 800178a:	4b9a      	ldr	r3, [pc, #616]	; (80019f4 <main+0x528>)
 800178c:	601a      	str	r2, [r3, #0]
	  	 		 iu=max(iu, 25/ki, -35/ki);
 800178e:	4b99      	ldr	r3, [pc, #612]	; (80019f4 <main+0x528>)
 8001790:	681c      	ldr	r4, [r3, #0]
 8001792:	4b92      	ldr	r3, [pc, #584]	; (80019dc <main+0x510>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	1c19      	adds	r1, r3, #0
 8001798:	4897      	ldr	r0, [pc, #604]	; (80019f8 <main+0x52c>)
 800179a:	f7ff f905 	bl	80009a8 <__aeabi_fdiv>
 800179e:	1c03      	adds	r3, r0, #0
 80017a0:	1c1d      	adds	r5, r3, #0
 80017a2:	4b8e      	ldr	r3, [pc, #568]	; (80019dc <main+0x510>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	1c19      	adds	r1, r3, #0
 80017a8:	4894      	ldr	r0, [pc, #592]	; (80019fc <main+0x530>)
 80017aa:	f7ff f8fd 	bl	80009a8 <__aeabi_fdiv>
 80017ae:	1c03      	adds	r3, r0, #0
 80017b0:	1c1a      	adds	r2, r3, #0
 80017b2:	1c29      	adds	r1, r5, #0
 80017b4:	1c20      	adds	r0, r4, #0
 80017b6:	f7ff fe6d 	bl	8001494 <max>
 80017ba:	1c02      	adds	r2, r0, #0
 80017bc:	4b8d      	ldr	r3, [pc, #564]	; (80019f4 <main+0x528>)
 80017be:	601a      	str	r2, [r3, #0]
	  	 		 io=ki*iu;
 80017c0:	4b86      	ldr	r3, [pc, #536]	; (80019dc <main+0x510>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b8b      	ldr	r3, [pc, #556]	; (80019f4 <main+0x528>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	1c19      	adds	r1, r3, #0
 80017ca:	1c10      	adds	r0, r2, #0
 80017cc:	f7ff fab4 	bl	8000d38 <__aeabi_fmul>
 80017d0:	1c03      	adds	r3, r0, #0
 80017d2:	1c1a      	adds	r2, r3, #0
 80017d4:	4b8a      	ldr	r3, [pc, #552]	; (8001a00 <main+0x534>)
 80017d6:	601a      	str	r2, [r3, #0]
	  	 		 du=(error-perror)/dt;
 80017d8:	4b7e      	ldr	r3, [pc, #504]	; (80019d4 <main+0x508>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0018      	movs	r0, r3
 80017de:	f7ff fd9f 	bl	8001320 <__aeabi_i2f>
 80017e2:	1c02      	adds	r2, r0, #0
 80017e4:	4b87      	ldr	r3, [pc, #540]	; (8001a04 <main+0x538>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	1c19      	adds	r1, r3, #0
 80017ea:	1c10      	adds	r0, r2, #0
 80017ec:	f7ff fbca 	bl	8000f84 <__aeabi_fsub>
 80017f0:	1c03      	adds	r3, r0, #0
 80017f2:	1c1a      	adds	r2, r3, #0
 80017f4:	4b7e      	ldr	r3, [pc, #504]	; (80019f0 <main+0x524>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	1c19      	adds	r1, r3, #0
 80017fa:	1c10      	adds	r0, r2, #0
 80017fc:	f7ff f8d4 	bl	80009a8 <__aeabi_fdiv>
 8001800:	1c03      	adds	r3, r0, #0
 8001802:	1c1a      	adds	r2, r3, #0
 8001804:	4b80      	ldr	r3, [pc, #512]	; (8001a08 <main+0x53c>)
 8001806:	601a      	str	r2, [r3, #0]
	  	 		 doo=du*kd;
 8001808:	4b7f      	ldr	r3, [pc, #508]	; (8001a08 <main+0x53c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b75      	ldr	r3, [pc, #468]	; (80019e4 <main+0x518>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	1c19      	adds	r1, r3, #0
 8001812:	1c10      	adds	r0, r2, #0
 8001814:	f7ff fa90 	bl	8000d38 <__aeabi_fmul>
 8001818:	1c03      	adds	r3, r0, #0
 800181a:	1c1a      	adds	r2, r3, #0
 800181c:	4b7b      	ldr	r3, [pc, #492]	; (8001a0c <main+0x540>)
 800181e:	601a      	str	r2, [r3, #0]
	  	 		 doo=max(doo, 100,-100);
 8001820:	4b7a      	ldr	r3, [pc, #488]	; (8001a0c <main+0x540>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a7a      	ldr	r2, [pc, #488]	; (8001a10 <main+0x544>)
 8001826:	497b      	ldr	r1, [pc, #492]	; (8001a14 <main+0x548>)
 8001828:	1c18      	adds	r0, r3, #0
 800182a:	f7ff fe33 	bl	8001494 <max>
 800182e:	1c02      	adds	r2, r0, #0
 8001830:	4b76      	ldr	r3, [pc, #472]	; (8001a0c <main+0x540>)
 8001832:	601a      	str	r2, [r3, #0]
//		  	 		BB= 700-pid;
//		  	 		CC= 700+pid;
//		  	 		DD = 700+pid;


	  	 			  	 		 htim2.Instance->CCR2 = 650+pid;
 8001834:	4b78      	ldr	r3, [pc, #480]	; (8001a18 <main+0x54c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a78      	ldr	r2, [pc, #480]	; (8001a1c <main+0x550>)
 800183a:	189a      	adds	r2, r3, r2
 800183c:	4b60      	ldr	r3, [pc, #384]	; (80019c0 <main+0x4f4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	639a      	str	r2, [r3, #56]	; 0x38
	  	 			  	 		 htim2.Instance->CCR3= 650-pid;
 8001842:	4b75      	ldr	r3, [pc, #468]	; (8001a18 <main+0x54c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a75      	ldr	r2, [pc, #468]	; (8001a1c <main+0x550>)
 8001848:	1ad2      	subs	r2, r2, r3
 800184a:	4b5d      	ldr	r3, [pc, #372]	; (80019c0 <main+0x4f4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	63da      	str	r2, [r3, #60]	; 0x3c

	  	 		 perror=error;
 8001850:	4b60      	ldr	r3, [pc, #384]	; (80019d4 <main+0x508>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0018      	movs	r0, r3
 8001856:	f7ff fd63 	bl	8001320 <__aeabi_i2f>
 800185a:	1c02      	adds	r2, r0, #0
 800185c:	4b69      	ldr	r3, [pc, #420]	; (8001a04 <main+0x538>)
 800185e:	601a      	str	r2, [r3, #0]




//	  	 		 HAL_Delay(2000);
	  	 		 errorA=((0-m[0])/2)*2;
 8001860:	4b5a      	ldr	r3, [pc, #360]	; (80019cc <main+0x500>)
 8001862:	2200      	movs	r2, #0
 8001864:	5e9b      	ldrsh	r3, [r3, r2]
 8001866:	2b00      	cmp	r3, #0
 8001868:	da00      	bge.n	800186c <main+0x3a0>
 800186a:	3301      	adds	r3, #1
 800186c:	105b      	asrs	r3, r3, #1
 800186e:	425b      	negs	r3, r3
 8001870:	005a      	lsls	r2, r3, #1
 8001872:	4b6b      	ldr	r3, [pc, #428]	; (8001a20 <main+0x554>)
 8001874:	601a      	str	r2, [r3, #0]
	  	 		 kpA=2.0;
 8001876:	4b6b      	ldr	r3, [pc, #428]	; (8001a24 <main+0x558>)
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	05d2      	lsls	r2, r2, #23
 800187c:	601a      	str	r2, [r3, #0]
	  	 		 kiA=0.9;
 800187e:	4b6a      	ldr	r3, [pc, #424]	; (8001a28 <main+0x55c>)
 8001880:	4a6a      	ldr	r2, [pc, #424]	; (8001a2c <main+0x560>)
 8001882:	601a      	str	r2, [r3, #0]
	  	 		 kdA=0.1;
 8001884:	4b6a      	ldr	r3, [pc, #424]	; (8001a30 <main+0x564>)
 8001886:	4a58      	ldr	r2, [pc, #352]	; (80019e8 <main+0x51c>)
 8001888:	601a      	str	r2, [r3, #0]
	  	 		 poA=errorA*kpA;
 800188a:	4b65      	ldr	r3, [pc, #404]	; (8001a20 <main+0x554>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	0018      	movs	r0, r3
 8001890:	f7ff fd46 	bl	8001320 <__aeabi_i2f>
 8001894:	1c02      	adds	r2, r0, #0
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <main+0x558>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	1c19      	adds	r1, r3, #0
 800189c:	1c10      	adds	r0, r2, #0
 800189e:	f7ff fa4b 	bl	8000d38 <__aeabi_fmul>
 80018a2:	1c03      	adds	r3, r0, #0
 80018a4:	1c1a      	adds	r2, r3, #0
 80018a6:	4b63      	ldr	r3, [pc, #396]	; (8001a34 <main+0x568>)
 80018a8:	601a      	str	r2, [r3, #0]
	  	 		 iuA+=errorA*dt;
 80018aa:	4b5d      	ldr	r3, [pc, #372]	; (8001a20 <main+0x554>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	0018      	movs	r0, r3
 80018b0:	f7ff fd36 	bl	8001320 <__aeabi_i2f>
 80018b4:	1c02      	adds	r2, r0, #0
 80018b6:	4b4e      	ldr	r3, [pc, #312]	; (80019f0 <main+0x524>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	1c19      	adds	r1, r3, #0
 80018bc:	1c10      	adds	r0, r2, #0
 80018be:	f7ff fa3b 	bl	8000d38 <__aeabi_fmul>
 80018c2:	1c03      	adds	r3, r0, #0
 80018c4:	1c1a      	adds	r2, r3, #0
 80018c6:	4b5c      	ldr	r3, [pc, #368]	; (8001a38 <main+0x56c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	1c19      	adds	r1, r3, #0
 80018cc:	1c10      	adds	r0, r2, #0
 80018ce:	f7fe fecd 	bl	800066c <__aeabi_fadd>
 80018d2:	1c03      	adds	r3, r0, #0
 80018d4:	1c1a      	adds	r2, r3, #0
 80018d6:	4b58      	ldr	r3, [pc, #352]	; (8001a38 <main+0x56c>)
 80018d8:	601a      	str	r2, [r3, #0]
	  	 		 iuA=max(iuA, 20/kiA, -20/kiA);
 80018da:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <main+0x56c>)
 80018dc:	681c      	ldr	r4, [r3, #0]
 80018de:	4b52      	ldr	r3, [pc, #328]	; (8001a28 <main+0x55c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	1c19      	adds	r1, r3, #0
 80018e4:	4855      	ldr	r0, [pc, #340]	; (8001a3c <main+0x570>)
 80018e6:	f7ff f85f 	bl	80009a8 <__aeabi_fdiv>
 80018ea:	1c03      	adds	r3, r0, #0
 80018ec:	1c1d      	adds	r5, r3, #0
 80018ee:	4b4e      	ldr	r3, [pc, #312]	; (8001a28 <main+0x55c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	1c19      	adds	r1, r3, #0
 80018f4:	4852      	ldr	r0, [pc, #328]	; (8001a40 <main+0x574>)
 80018f6:	f7ff f857 	bl	80009a8 <__aeabi_fdiv>
 80018fa:	1c03      	adds	r3, r0, #0
 80018fc:	1c1a      	adds	r2, r3, #0
 80018fe:	1c29      	adds	r1, r5, #0
 8001900:	1c20      	adds	r0, r4, #0
 8001902:	f7ff fdc7 	bl	8001494 <max>
 8001906:	1c02      	adds	r2, r0, #0
 8001908:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <main+0x56c>)
 800190a:	601a      	str	r2, [r3, #0]
	  	 		 ioA=kiA*iuA;
 800190c:	4b46      	ldr	r3, [pc, #280]	; (8001a28 <main+0x55c>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <main+0x56c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	1c19      	adds	r1, r3, #0
 8001916:	1c10      	adds	r0, r2, #0
 8001918:	f7ff fa0e 	bl	8000d38 <__aeabi_fmul>
 800191c:	1c03      	adds	r3, r0, #0
 800191e:	1c1a      	adds	r2, r3, #0
 8001920:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <main+0x578>)
 8001922:	601a      	str	r2, [r3, #0]
	  	 		 duA=(errorA-perrorA)/dt;
 8001924:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <main+0x554>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff fcf9 	bl	8001320 <__aeabi_i2f>
 800192e:	1c02      	adds	r2, r0, #0
 8001930:	4b45      	ldr	r3, [pc, #276]	; (8001a48 <main+0x57c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	1c19      	adds	r1, r3, #0
 8001936:	1c10      	adds	r0, r2, #0
 8001938:	f7ff fb24 	bl	8000f84 <__aeabi_fsub>
 800193c:	1c03      	adds	r3, r0, #0
 800193e:	1c1a      	adds	r2, r3, #0
 8001940:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <main+0x524>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	1c19      	adds	r1, r3, #0
 8001946:	1c10      	adds	r0, r2, #0
 8001948:	f7ff f82e 	bl	80009a8 <__aeabi_fdiv>
 800194c:	1c03      	adds	r3, r0, #0
 800194e:	1c1a      	adds	r2, r3, #0
 8001950:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <main+0x580>)
 8001952:	601a      	str	r2, [r3, #0]
	  	 		 dooA=duA*kdA;
 8001954:	4b3d      	ldr	r3, [pc, #244]	; (8001a4c <main+0x580>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <main+0x564>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	1c19      	adds	r1, r3, #0
 800195e:	1c10      	adds	r0, r2, #0
 8001960:	f7ff f9ea 	bl	8000d38 <__aeabi_fmul>
 8001964:	1c03      	adds	r3, r0, #0
 8001966:	1c1a      	adds	r2, r3, #0
 8001968:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <main+0x584>)
 800196a:	601a      	str	r2, [r3, #0]
	  	 		dooA=max(dooA, 50,-50);
 800196c:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <main+0x584>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a38      	ldr	r2, [pc, #224]	; (8001a54 <main+0x588>)
 8001972:	4939      	ldr	r1, [pc, #228]	; (8001a58 <main+0x58c>)
 8001974:	1c18      	adds	r0, r3, #0
 8001976:	f7ff fd8d 	bl	8001494 <max>
 800197a:	1c02      	adds	r2, r0, #0
 800197c:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <main+0x584>)
 800197e:	601a      	str	r2, [r3, #0]
	  	 		 pidA=poA+ioA+dooA;
 8001980:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <main+0x568>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <main+0x578>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	1c19      	adds	r1, r3, #0
 800198a:	1c10      	adds	r0, r2, #0
 800198c:	f7fe fe6e 	bl	800066c <__aeabi_fadd>
 8001990:	1c03      	adds	r3, r0, #0
 8001992:	1c1a      	adds	r2, r3, #0
 8001994:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <main+0x584>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	1c19      	adds	r1, r3, #0
 800199a:	1c10      	adds	r0, r2, #0
 800199c:	f7fe fe66 	bl	800066c <__aeabi_fadd>
 80019a0:	1c03      	adds	r3, r0, #0
 80019a2:	1c18      	adds	r0, r3, #0
 80019a4:	f7ff fc9c 	bl	80012e0 <__aeabi_f2iz>
 80019a8:	0002      	movs	r2, r0
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <main+0x590>)
 80019ac:	601a      	str	r2, [r3, #0]


	  	 		 htim2.Instance->CCR1= 650-pidA;
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <main+0x590>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a1a      	ldr	r2, [pc, #104]	; (8001a1c <main+0x550>)
 80019b4:	1ad2      	subs	r2, r2, r3
 80019b6:	4b02      	ldr	r3, [pc, #8]	; (80019c0 <main+0x4f4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	635a      	str	r2, [r3, #52]	; 0x34
 80019bc:	e050      	b.n	8001a60 <main+0x594>
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	200000f4 	.word	0x200000f4
 80019c4:	00000226 	.word	0x00000226
 80019c8:	2000006c 	.word	0x2000006c
 80019cc:	2000002c 	.word	0x2000002c
 80019d0:	200000a4 	.word	0x200000a4
 80019d4:	20000070 	.word	0x20000070
 80019d8:	20000078 	.word	0x20000078
 80019dc:	2000007c 	.word	0x2000007c
 80019e0:	3f8ccccd 	.word	0x3f8ccccd
 80019e4:	20000080 	.word	0x20000080
 80019e8:	3dcccccd 	.word	0x3dcccccd
 80019ec:	20000084 	.word	0x20000084
 80019f0:	20000050 	.word	0x20000050
 80019f4:	20000088 	.word	0x20000088
 80019f8:	41c80000 	.word	0x41c80000
 80019fc:	c20c0000 	.word	0xc20c0000
 8001a00:	2000008c 	.word	0x2000008c
 8001a04:	20000098 	.word	0x20000098
 8001a08:	20000090 	.word	0x20000090
 8001a0c:	20000094 	.word	0x20000094
 8001a10:	c2c80000 	.word	0xc2c80000
 8001a14:	42c80000 	.word	0x42c80000
 8001a18:	2000009c 	.word	0x2000009c
 8001a1c:	0000028a 	.word	0x0000028a
 8001a20:	20000074 	.word	0x20000074
 8001a24:	20000030 	.word	0x20000030
 8001a28:	20000034 	.word	0x20000034
 8001a2c:	3f666666 	.word	0x3f666666
 8001a30:	20000038 	.word	0x20000038
 8001a34:	2000003c 	.word	0x2000003c
 8001a38:	20000040 	.word	0x20000040
 8001a3c:	41a00000 	.word	0x41a00000
 8001a40:	c1a00000 	.word	0xc1a00000
 8001a44:	20000044 	.word	0x20000044
 8001a48:	20000054 	.word	0x20000054
 8001a4c:	20000048 	.word	0x20000048
 8001a50:	2000004c 	.word	0x2000004c
 8001a54:	c2480000 	.word	0xc2480000
 8001a58:	42480000 	.word	0x42480000
 8001a5c:	2000005c 	.word	0x2000005c
//	  	 		 htim2.Instance->CCR2 = BB+pidA;
//	  	 		 htim2.Instance->CCR3= CC-pidA;
	  	 		 htim2.Instance->CCR4 = 650+pidA;
 8001a60:	4b47      	ldr	r3, [pc, #284]	; (8001b80 <main+0x6b4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a47      	ldr	r2, [pc, #284]	; (8001b84 <main+0x6b8>)
 8001a66:	189a      	adds	r2, r3, r2
 8001a68:	4b47      	ldr	r3, [pc, #284]	; (8001b88 <main+0x6bc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40

	  	 		 if(dooA!=0)
 8001a6e:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <main+0x6c0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2100      	movs	r1, #0
 8001a74:	1c18      	adds	r0, r3, #0
 8001a76:	f7fe fcc7 	bl	8000408 <__aeabi_fcmpeq>
 8001a7a:	1e03      	subs	r3, r0, #0
 8001a7c:	d10b      	bne.n	8001a96 <main+0x5ca>
	  		  	 		 {

	  		  	 			 yyy=pidA;
 8001a7e:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <main+0x6b4>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <main+0x6c4>)
 8001a84:	601a      	str	r2, [r3, #0]
	  		  	 			 fg=dooA;
 8001a86:	4b41      	ldr	r3, [pc, #260]	; (8001b8c <main+0x6c0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	1c18      	adds	r0, r3, #0
 8001a8c:	f7ff fc28 	bl	80012e0 <__aeabi_f2iz>
 8001a90:	0002      	movs	r2, r0
 8001a92:	4b40      	ldr	r3, [pc, #256]	; (8001b94 <main+0x6c8>)
 8001a94:	601a      	str	r2, [r3, #0]
	  		  	 		 }


	  			 htim2.Instance->CCR1=max(htim2.Instance->CCR1, 900, 550);
 8001a96:	4b3c      	ldr	r3, [pc, #240]	; (8001b88 <main+0x6bc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff fc8d 	bl	80013bc <__aeabi_ui2f>
 8001aa2:	1c03      	adds	r3, r0, #0
 8001aa4:	4a3c      	ldr	r2, [pc, #240]	; (8001b98 <main+0x6cc>)
 8001aa6:	493d      	ldr	r1, [pc, #244]	; (8001b9c <main+0x6d0>)
 8001aa8:	1c18      	adds	r0, r3, #0
 8001aaa:	f7ff fcf3 	bl	8001494 <max>
 8001aae:	1c02      	adds	r2, r0, #0
 8001ab0:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <main+0x6bc>)
 8001ab2:	681c      	ldr	r4, [r3, #0]
 8001ab4:	1c10      	adds	r0, r2, #0
 8001ab6:	f7fe fcf5 	bl	80004a4 <__aeabi_f2uiz>
 8001aba:	0003      	movs	r3, r0
 8001abc:	6363      	str	r3, [r4, #52]	; 0x34
	  			 htim2.Instance->CCR2=max(htim2.Instance->CCR2, 900, 550);
 8001abe:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <main+0x6bc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f7ff fc79 	bl	80013bc <__aeabi_ui2f>
 8001aca:	1c03      	adds	r3, r0, #0
 8001acc:	4a32      	ldr	r2, [pc, #200]	; (8001b98 <main+0x6cc>)
 8001ace:	4933      	ldr	r1, [pc, #204]	; (8001b9c <main+0x6d0>)
 8001ad0:	1c18      	adds	r0, r3, #0
 8001ad2:	f7ff fcdf 	bl	8001494 <max>
 8001ad6:	1c02      	adds	r2, r0, #0
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <main+0x6bc>)
 8001ada:	681c      	ldr	r4, [r3, #0]
 8001adc:	1c10      	adds	r0, r2, #0
 8001ade:	f7fe fce1 	bl	80004a4 <__aeabi_f2uiz>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	63a3      	str	r3, [r4, #56]	; 0x38
	  			 htim2.Instance->CCR3=max(htim2.Instance->CCR3, 900, 550);
 8001ae6:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <main+0x6bc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aec:	0018      	movs	r0, r3
 8001aee:	f7ff fc65 	bl	80013bc <__aeabi_ui2f>
 8001af2:	1c03      	adds	r3, r0, #0
 8001af4:	4a28      	ldr	r2, [pc, #160]	; (8001b98 <main+0x6cc>)
 8001af6:	4929      	ldr	r1, [pc, #164]	; (8001b9c <main+0x6d0>)
 8001af8:	1c18      	adds	r0, r3, #0
 8001afa:	f7ff fccb 	bl	8001494 <max>
 8001afe:	1c02      	adds	r2, r0, #0
 8001b00:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <main+0x6bc>)
 8001b02:	681c      	ldr	r4, [r3, #0]
 8001b04:	1c10      	adds	r0, r2, #0
 8001b06:	f7fe fccd 	bl	80004a4 <__aeabi_f2uiz>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	63e3      	str	r3, [r4, #60]	; 0x3c
	  			 htim2.Instance->CCR4=max(htim2.Instance->CCR4, 900, 550);
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <main+0x6bc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	0018      	movs	r0, r3
 8001b16:	f7ff fc51 	bl	80013bc <__aeabi_ui2f>
 8001b1a:	1c03      	adds	r3, r0, #0
 8001b1c:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <main+0x6cc>)
 8001b1e:	491f      	ldr	r1, [pc, #124]	; (8001b9c <main+0x6d0>)
 8001b20:	1c18      	adds	r0, r3, #0
 8001b22:	f7ff fcb7 	bl	8001494 <max>
 8001b26:	1c02      	adds	r2, r0, #0
 8001b28:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <main+0x6bc>)
 8001b2a:	681c      	ldr	r4, [r3, #0]
 8001b2c:	1c10      	adds	r0, r2, #0
 8001b2e:	f7fe fcb9 	bl	80004a4 <__aeabi_f2uiz>
 8001b32:	0003      	movs	r3, r0
 8001b34:	6423      	str	r3, [r4, #64]	; 0x40

	  	 		 perrorA=errorA;
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <main+0x6d4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7ff fbf0 	bl	8001320 <__aeabi_i2f>
 8001b40:	1c02      	adds	r2, r0, #0
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <main+0x6d8>)
 8001b44:	601a      	str	r2, [r3, #0]
	  	 		 nn=HAL_GetTick();
 8001b46:	f000 fc55 	bl	80023f4 <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <main+0x6dc>)
 8001b50:	601a      	str	r2, [r3, #0]
	  	 		 s=nn-n;
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <main+0x6dc>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <main+0x6e0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7ff fbdf 	bl	8001320 <__aeabi_i2f>
 8001b62:	1c02      	adds	r2, r0, #0
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <main+0x6e4>)
 8001b66:	601a      	str	r2, [r3, #0]
	  	 		 dt=s/1000;
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <main+0x6e4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4911      	ldr	r1, [pc, #68]	; (8001bb4 <main+0x6e8>)
 8001b6e:	1c18      	adds	r0, r3, #0
 8001b70:	f7fe ff1a 	bl	80009a8 <__aeabi_fdiv>
 8001b74:	1c03      	adds	r3, r0, #0
 8001b76:	1c1a      	adds	r2, r3, #0
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <main+0x6ec>)
 8001b7a:	601a      	str	r2, [r3, #0]
	  n=HAL_GetTick();
 8001b7c:	e4da      	b.n	8001534 <main+0x68>
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	2000005c 	.word	0x2000005c
 8001b84:	0000028a 	.word	0x0000028a
 8001b88:	200000f4 	.word	0x200000f4
 8001b8c:	2000004c 	.word	0x2000004c
 8001b90:	20000060 	.word	0x20000060
 8001b94:	200000a0 	.word	0x200000a0
 8001b98:	44098000 	.word	0x44098000
 8001b9c:	44610000 	.word	0x44610000
 8001ba0:	20000074 	.word	0x20000074
 8001ba4:	20000054 	.word	0x20000054
 8001ba8:	20000068 	.word	0x20000068
 8001bac:	20000064 	.word	0x20000064
 8001bb0:	20000058 	.word	0x20000058
 8001bb4:	447a0000 	.word	0x447a0000
 8001bb8:	20000050 	.word	0x20000050

08001bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b095      	sub	sp, #84	; 0x54
 8001bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc2:	2414      	movs	r4, #20
 8001bc4:	193b      	adds	r3, r7, r4
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	233c      	movs	r3, #60	; 0x3c
 8001bca:	001a      	movs	r2, r3
 8001bcc:	2100      	movs	r1, #0
 8001bce:	f004 fa83 	bl	80060d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	001a      	movs	r2, r3
 8001bda:	2100      	movs	r1, #0
 8001bdc:	f004 fa7c 	bl	80060d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	0018      	movs	r0, r3
 8001be6:	f001 f96b 	bl	8002ec0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bea:	193b      	adds	r3, r7, r4
 8001bec:	2202      	movs	r2, #2
 8001bee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bf0:	193b      	adds	r3, r7, r4
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	0052      	lsls	r2, r2, #1
 8001bf6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001bf8:	0021      	movs	r1, r4
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	2240      	movs	r2, #64	; 0x40
 8001c04:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	2202      	movs	r2, #2
 8001c0a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	2202      	movs	r2, #2
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001c12:	187b      	adds	r3, r7, r1
 8001c14:	2200      	movs	r2, #0
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001c18:	187b      	adds	r3, r7, r1
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c1e:	187b      	adds	r3, r7, r1
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	0292      	lsls	r2, r2, #10
 8001c24:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c26:	187b      	adds	r3, r7, r1
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	0492      	lsls	r2, r2, #18
 8001c2c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	2280      	movs	r2, #128	; 0x80
 8001c32:	0592      	lsls	r2, r2, #22
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c36:	187b      	adds	r3, r7, r1
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f001 f98d 	bl	8002f58 <HAL_RCC_OscConfig>
 8001c3e:	1e03      	subs	r3, r0, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001c42:	f000 f9c5 	bl	8001fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	2207      	movs	r2, #7
 8001c4a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2202      	movs	r2, #2
 8001c50:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2102      	movs	r1, #2
 8001c62:	0018      	movs	r0, r3
 8001c64:	f001 fcde 	bl	8003624 <HAL_RCC_ClockConfig>
 8001c68:	1e03      	subs	r3, r0, #0
 8001c6a:	d001      	beq.n	8001c70 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001c6c:	f000 f9b0 	bl	8001fd0 <Error_Handler>
  }
}
 8001c70:	46c0      	nop			; (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b015      	add	sp, #84	; 0x54
 8001c76:	bd90      	pop	{r4, r7, pc}

08001c78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	2310      	movs	r3, #16
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	0018      	movs	r0, r3
 8001c84:	2310      	movs	r3, #16
 8001c86:	001a      	movs	r2, r3
 8001c88:	2100      	movs	r1, #0
 8001c8a:	f004 fa25 	bl	80060d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	0018      	movs	r0, r3
 8001c92:	230c      	movs	r3, #12
 8001c94:	001a      	movs	r2, r3
 8001c96:	2100      	movs	r1, #0
 8001c98:	f004 fa1e 	bl	80060d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <MX_TIM1_Init+0xac>)
 8001c9e:	4a22      	ldr	r2, [pc, #136]	; (8001d28 <MX_TIM1_Init+0xb0>)
 8001ca0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <MX_TIM1_Init+0xac>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <MX_TIM1_Init+0xac>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <MX_TIM1_Init+0xac>)
 8001cb0:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <MX_TIM1_Init+0xb4>)
 8001cb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <MX_TIM1_Init+0xac>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <MX_TIM1_Init+0xac>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <MX_TIM1_Init+0xac>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <MX_TIM1_Init+0xac>)
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f002 f891 	bl	8003df0 <HAL_TIM_Base_Init>
 8001cce:	1e03      	subs	r3, r0, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8001cd2:	f000 f97d 	bl	8001fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd6:	2110      	movs	r1, #16
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	2280      	movs	r2, #128	; 0x80
 8001cdc:	0152      	lsls	r2, r2, #5
 8001cde:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ce0:	187a      	adds	r2, r7, r1
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <MX_TIM1_Init+0xac>)
 8001ce4:	0011      	movs	r1, r2
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f002 fb20 	bl	800432c <HAL_TIM_ConfigClockSource>
 8001cec:	1e03      	subs	r3, r0, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001cf0:	f000 f96e 	bl	8001fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d06:	1d3a      	adds	r2, r7, #4
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_TIM1_Init+0xac>)
 8001d0a:	0011      	movs	r1, r2
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f002 ffe7 	bl	8004ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d12:	1e03      	subs	r3, r0, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001d16:	f000 f95b 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b008      	add	sp, #32
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	200000a8 	.word	0x200000a8
 8001d28:	40012c00 	.word	0x40012c00
 8001d2c:	0000ffff 	.word	0x0000ffff

08001d30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08e      	sub	sp, #56	; 0x38
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d36:	2328      	movs	r3, #40	; 0x28
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	2310      	movs	r3, #16
 8001d3e:	001a      	movs	r2, r3
 8001d40:	2100      	movs	r1, #0
 8001d42:	f004 f9c9 	bl	80060d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d46:	231c      	movs	r3, #28
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	230c      	movs	r3, #12
 8001d4e:	001a      	movs	r2, r3
 8001d50:	2100      	movs	r1, #0
 8001d52:	f004 f9c1 	bl	80060d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d56:	003b      	movs	r3, r7
 8001d58:	0018      	movs	r0, r3
 8001d5a:	231c      	movs	r3, #28
 8001d5c:	001a      	movs	r2, r3
 8001d5e:	2100      	movs	r1, #0
 8001d60:	f004 f9ba 	bl	80060d8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d64:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <MX_TIM2_Init+0x134>)
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	05d2      	lsls	r2, r2, #23
 8001d6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8001d6c:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <MX_TIM2_Init+0x134>)
 8001d6e:	227f      	movs	r2, #127	; 0x7f
 8001d70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d72:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <MX_TIM2_Init+0x134>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001d78:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <MX_TIM2_Init+0x134>)
 8001d7a:	4a3b      	ldr	r2, [pc, #236]	; (8001e68 <MX_TIM2_Init+0x138>)
 8001d7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7e:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <MX_TIM2_Init+0x134>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d84:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <MX_TIM2_Init+0x134>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d8a:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <MX_TIM2_Init+0x134>)
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f002 f82f 	bl	8003df0 <HAL_TIM_Base_Init>
 8001d92:	1e03      	subs	r3, r0, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001d96:	f000 f91b 	bl	8001fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d9a:	2128      	movs	r1, #40	; 0x28
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	2280      	movs	r2, #128	; 0x80
 8001da0:	0152      	lsls	r2, r2, #5
 8001da2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001da4:	187a      	adds	r2, r7, r1
 8001da6:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <MX_TIM2_Init+0x134>)
 8001da8:	0011      	movs	r1, r2
 8001daa:	0018      	movs	r0, r3
 8001dac:	f002 fabe 	bl	800432c <HAL_TIM_ConfigClockSource>
 8001db0:	1e03      	subs	r3, r0, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001db4:	f000 f90c 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001db8:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <MX_TIM2_Init+0x134>)
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f002 f870 	bl	8003ea0 <HAL_TIM_PWM_Init>
 8001dc0:	1e03      	subs	r3, r0, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001dc4:	f000 f904 	bl	8001fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc8:	211c      	movs	r1, #28
 8001dca:	187b      	adds	r3, r7, r1
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd0:	187b      	adds	r3, r7, r1
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dd6:	187a      	adds	r2, r7, r1
 8001dd8:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <MX_TIM2_Init+0x134>)
 8001dda:	0011      	movs	r1, r2
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f002 ff7f 	bl	8004ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8001de2:	1e03      	subs	r3, r0, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001de6:	f000 f8f3 	bl	8001fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dea:	003b      	movs	r3, r7
 8001dec:	2260      	movs	r2, #96	; 0x60
 8001dee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001df0:	003b      	movs	r3, r7
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df6:	003b      	movs	r3, r7
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfc:	003b      	movs	r3, r7
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e02:	0039      	movs	r1, r7
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <MX_TIM2_Init+0x134>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f002 f999 	bl	8004140 <HAL_TIM_PWM_ConfigChannel>
 8001e0e:	1e03      	subs	r3, r0, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001e12:	f000 f8dd 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e16:	0039      	movs	r1, r7
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <MX_TIM2_Init+0x134>)
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f002 f98f 	bl	8004140 <HAL_TIM_PWM_ConfigChannel>
 8001e22:	1e03      	subs	r3, r0, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8001e26:	f000 f8d3 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e2a:	0039      	movs	r1, r7
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <MX_TIM2_Init+0x134>)
 8001e2e:	2208      	movs	r2, #8
 8001e30:	0018      	movs	r0, r3
 8001e32:	f002 f985 	bl	8004140 <HAL_TIM_PWM_ConfigChannel>
 8001e36:	1e03      	subs	r3, r0, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 8001e3a:	f000 f8c9 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e3e:	0039      	movs	r1, r7
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <MX_TIM2_Init+0x134>)
 8001e42:	220c      	movs	r2, #12
 8001e44:	0018      	movs	r0, r3
 8001e46:	f002 f97b 	bl	8004140 <HAL_TIM_PWM_ConfigChannel>
 8001e4a:	1e03      	subs	r3, r0, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8001e4e:	f000 f8bf 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e52:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <MX_TIM2_Init+0x134>)
 8001e54:	0018      	movs	r0, r3
 8001e56:	f000 f933 	bl	80020c0 <HAL_TIM_MspPostInit>

}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b00e      	add	sp, #56	; 0x38
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	200000f4 	.word	0x200000f4
 8001e68:	0000270f 	.word	0x0000270f

08001e6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <MX_USART1_UART_Init+0x94>)
 8001e72:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <MX_USART1_UART_Init+0x98>)
 8001e74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001e76:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <MX_USART1_UART_Init+0x94>)
 8001e78:	22e1      	movs	r2, #225	; 0xe1
 8001e7a:	0312      	lsls	r2, r2, #12
 8001e7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <MX_USART1_UART_Init+0x94>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e84:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <MX_USART1_UART_Init+0x94>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <MX_USART1_UART_Init+0x94>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e90:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <MX_USART1_UART_Init+0x94>)
 8001e92:	220c      	movs	r2, #12
 8001e94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <MX_USART1_UART_Init+0x94>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <MX_USART1_UART_Init+0x94>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <MX_USART1_UART_Init+0x94>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <MX_USART1_UART_Init+0x94>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_USART1_UART_Init+0x94>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <MX_USART1_UART_Init+0x94>)
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f002 ff88 	bl	8004dcc <HAL_UART_Init>
 8001ebc:	1e03      	subs	r3, r0, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ec0:	f000 f886 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_USART1_UART_Init+0x94>)
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f004 f801 	bl	8005ed0 <HAL_UARTEx_SetTxFifoThreshold>
 8001ece:	1e03      	subs	r3, r0, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ed2:	f000 f87d 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <MX_USART1_UART_Init+0x94>)
 8001ed8:	2100      	movs	r1, #0
 8001eda:	0018      	movs	r0, r3
 8001edc:	f004 f838 	bl	8005f50 <HAL_UARTEx_SetRxFifoThreshold>
 8001ee0:	1e03      	subs	r3, r0, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ee4:	f000 f874 	bl	8001fd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <MX_USART1_UART_Init+0x94>)
 8001eea:	0018      	movs	r0, r3
 8001eec:	f003 ffb6 	bl	8005e5c <HAL_UARTEx_DisableFifoMode>
 8001ef0:	1e03      	subs	r3, r0, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ef4:	f000 f86c 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ef8:	46c0      	nop			; (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	20000140 	.word	0x20000140
 8001f04:	40013800 	.word	0x40013800

08001f08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_DMA_Init+0x38>)
 8001f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <MX_DMA_Init+0x38>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	430a      	orrs	r2, r1
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_DMA_Init+0x38>)
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4013      	ands	r3, r2
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2009      	movs	r0, #9
 8001f2c:	f000 fb52 	bl	80025d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f30:	2009      	movs	r0, #9
 8001f32:	f000 fb64 	bl	80025fe <HAL_NVIC_EnableIRQ>

}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b002      	add	sp, #8
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	40021000 	.word	0x40021000

08001f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4a:	240c      	movs	r4, #12
 8001f4c:	193b      	adds	r3, r7, r4
 8001f4e:	0018      	movs	r0, r3
 8001f50:	2314      	movs	r3, #20
 8001f52:	001a      	movs	r2, r3
 8001f54:	2100      	movs	r1, #0
 8001f56:	f004 f8bf 	bl	80060d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <MX_GPIO_Init+0x84>)
 8001f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <MX_GPIO_Init+0x84>)
 8001f60:	2104      	movs	r1, #4
 8001f62:	430a      	orrs	r2, r1
 8001f64:	635a      	str	r2, [r3, #52]	; 0x34
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <MX_GPIO_Init+0x84>)
 8001f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <MX_GPIO_Init+0x84>)
 8001f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <MX_GPIO_Init+0x84>)
 8001f78:	2101      	movs	r1, #1
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <MX_GPIO_Init+0x84>)
 8001f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f82:	2201      	movs	r2, #1
 8001f84:	4013      	ands	r3, r2
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	019b      	lsls	r3, r3, #6
 8001f8e:	480f      	ldr	r0, [pc, #60]	; (8001fcc <MX_GPIO_Init+0x88>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	0019      	movs	r1, r3
 8001f94:	f000 ff5c 	bl	8002e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f98:	193b      	adds	r3, r7, r4
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	0192      	lsls	r2, r2, #6
 8001f9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa0:	193b      	adds	r3, r7, r4
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	193b      	adds	r3, r7, r4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	193b      	adds	r3, r7, r4
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb2:	193b      	adds	r3, r7, r4
 8001fb4:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <MX_GPIO_Init+0x88>)
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	0010      	movs	r0, r2
 8001fba:	f000 fddd 	bl	8002b78 <HAL_GPIO_Init>

}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b009      	add	sp, #36	; 0x24
 8001fc4:	bd90      	pop	{r4, r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	50000800 	.word	0x50000800

08001fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd4:	b672      	cpsid	i
}
 8001fd6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <Error_Handler+0x8>
	...

08001fdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_MspInit+0x4c>)
 8001fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_MspInit+0x4c>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	430a      	orrs	r2, r1
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_MspInit+0x4c>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_MspInit+0x4c>)
 8001ffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_MspInit+0x4c>)
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	0549      	lsls	r1, r1, #21
 8002004:	430a      	orrs	r2, r1
 8002006:	63da      	str	r2, [r3, #60]	; 0x3c
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <HAL_MspInit+0x4c>)
 800200a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	055b      	lsls	r3, r3, #21
 8002010:	4013      	ands	r3, r2
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002016:	23c0      	movs	r3, #192	; 0xc0
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	0018      	movs	r0, r3
 800201c:	f000 fa18 	bl	8002450 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002020:	46c0      	nop			; (mov r8, r8)
 8002022:	46bd      	mov	sp, r7
 8002024:	b002      	add	sp, #8
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000

0800202c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b099      	sub	sp, #100	; 0x64
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002034:	2414      	movs	r4, #20
 8002036:	193b      	adds	r3, r7, r4
 8002038:	0018      	movs	r0, r3
 800203a:	234c      	movs	r3, #76	; 0x4c
 800203c:	001a      	movs	r2, r3
 800203e:	2100      	movs	r1, #0
 8002040:	f004 f84a 	bl	80060d8 <memset>
  if(htim_base->Instance==TIM1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <HAL_TIM_Base_MspInit+0x8c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d11d      	bne.n	800208a <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800204e:	193b      	adds	r3, r7, r4
 8002050:	2280      	movs	r2, #128	; 0x80
 8002052:	0392      	lsls	r2, r2, #14
 8002054:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8002056:	193b      	adds	r3, r7, r4
 8002058:	2200      	movs	r2, #0
 800205a:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800205c:	193b      	adds	r3, r7, r4
 800205e:	0018      	movs	r0, r3
 8002060:	f001 fc8a 	bl	8003978 <HAL_RCCEx_PeriphCLKConfig>
 8002064:	1e03      	subs	r3, r0, #0
 8002066:	d001      	beq.n	800206c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8002068:	f7ff ffb2 	bl	8001fd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_TIM_Base_MspInit+0x90>)
 800206e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_TIM_Base_MspInit+0x90>)
 8002072:	2180      	movs	r1, #128	; 0x80
 8002074:	0109      	lsls	r1, r1, #4
 8002076:	430a      	orrs	r2, r1
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_TIM_Base_MspInit+0x90>)
 800207c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002088:	e011      	b.n	80020ae <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	05db      	lsls	r3, r3, #23
 8002092:	429a      	cmp	r2, r3
 8002094:	d10b      	bne.n	80020ae <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_TIM_Base_MspInit+0x90>)
 8002098:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_TIM_Base_MspInit+0x90>)
 800209c:	2101      	movs	r1, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_TIM_Base_MspInit+0x90>)
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	2201      	movs	r2, #1
 80020a8:	4013      	ands	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b019      	add	sp, #100	; 0x64
 80020b4:	bd90      	pop	{r4, r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	40012c00 	.word	0x40012c00
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	240c      	movs	r4, #12
 80020ca:	193b      	adds	r3, r7, r4
 80020cc:	0018      	movs	r0, r3
 80020ce:	2314      	movs	r3, #20
 80020d0:	001a      	movs	r2, r3
 80020d2:	2100      	movs	r1, #0
 80020d4:	f004 f800 	bl	80060d8 <memset>
  if(htim->Instance==TIM2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	05db      	lsls	r3, r3, #23
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d122      	bne.n	800212a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e4:	4b13      	ldr	r3, [pc, #76]	; (8002134 <HAL_TIM_MspPostInit+0x74>)
 80020e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_TIM_MspPostInit+0x74>)
 80020ea:	2101      	movs	r1, #1
 80020ec:	430a      	orrs	r2, r1
 80020ee:	635a      	str	r2, [r3, #52]	; 0x34
 80020f0:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_TIM_MspPostInit+0x74>)
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	2201      	movs	r2, #1
 80020f6:	4013      	ands	r3, r2
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80020fc:	0021      	movs	r1, r4
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	220f      	movs	r2, #15
 8002102:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	187b      	adds	r3, r7, r1
 8002106:	2202      	movs	r2, #2
 8002108:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	187b      	adds	r3, r7, r1
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	187b      	adds	r3, r7, r1
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002116:	187b      	adds	r3, r7, r1
 8002118:	2202      	movs	r2, #2
 800211a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211c:	187a      	adds	r2, r7, r1
 800211e:	23a0      	movs	r3, #160	; 0xa0
 8002120:	05db      	lsls	r3, r3, #23
 8002122:	0011      	movs	r1, r2
 8002124:	0018      	movs	r0, r3
 8002126:	f000 fd27 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b009      	add	sp, #36	; 0x24
 8002130:	bd90      	pop	{r4, r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	40021000 	.word	0x40021000

08002138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002138:	b590      	push	{r4, r7, lr}
 800213a:	b09d      	sub	sp, #116	; 0x74
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	235c      	movs	r3, #92	; 0x5c
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	0018      	movs	r0, r3
 8002146:	2314      	movs	r3, #20
 8002148:	001a      	movs	r2, r3
 800214a:	2100      	movs	r1, #0
 800214c:	f003 ffc4 	bl	80060d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002150:	2410      	movs	r4, #16
 8002152:	193b      	adds	r3, r7, r4
 8002154:	0018      	movs	r0, r3
 8002156:	234c      	movs	r3, #76	; 0x4c
 8002158:	001a      	movs	r2, r3
 800215a:	2100      	movs	r1, #0
 800215c:	f003 ffbc 	bl	80060d8 <memset>
  if(huart->Instance==USART1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a37      	ldr	r2, [pc, #220]	; (8002244 <HAL_UART_MspInit+0x10c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d168      	bne.n	800223c <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800216a:	193b      	adds	r3, r7, r4
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002170:	193b      	adds	r3, r7, r4
 8002172:	2200      	movs	r2, #0
 8002174:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002176:	193b      	adds	r3, r7, r4
 8002178:	0018      	movs	r0, r3
 800217a:	f001 fbfd 	bl	8003978 <HAL_RCCEx_PeriphCLKConfig>
 800217e:	1e03      	subs	r3, r0, #0
 8002180:	d001      	beq.n	8002186 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002182:	f7ff ff25 	bl	8001fd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002186:	4b30      	ldr	r3, [pc, #192]	; (8002248 <HAL_UART_MspInit+0x110>)
 8002188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800218a:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <HAL_UART_MspInit+0x110>)
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	01c9      	lsls	r1, r1, #7
 8002190:	430a      	orrs	r2, r1
 8002192:	641a      	str	r2, [r3, #64]	; 0x40
 8002194:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <HAL_UART_MspInit+0x110>)
 8002196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	01db      	lsls	r3, r3, #7
 800219c:	4013      	ands	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	4b29      	ldr	r3, [pc, #164]	; (8002248 <HAL_UART_MspInit+0x110>)
 80021a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a6:	4b28      	ldr	r3, [pc, #160]	; (8002248 <HAL_UART_MspInit+0x110>)
 80021a8:	2101      	movs	r1, #1
 80021aa:	430a      	orrs	r2, r1
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34
 80021ae:	4b26      	ldr	r3, [pc, #152]	; (8002248 <HAL_UART_MspInit+0x110>)
 80021b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b2:	2201      	movs	r2, #1
 80021b4:	4013      	ands	r3, r2
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021ba:	215c      	movs	r1, #92	; 0x5c
 80021bc:	187b      	adds	r3, r7, r1
 80021be:	22c0      	movs	r2, #192	; 0xc0
 80021c0:	00d2      	lsls	r2, r2, #3
 80021c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	187b      	adds	r3, r7, r1
 80021c6:	2202      	movs	r2, #2
 80021c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	187b      	adds	r3, r7, r1
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	187b      	adds	r3, r7, r1
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	2201      	movs	r2, #1
 80021da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	187a      	adds	r2, r7, r1
 80021de:	23a0      	movs	r3, #160	; 0xa0
 80021e0:	05db      	lsls	r3, r3, #23
 80021e2:	0011      	movs	r1, r2
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 fcc7 	bl	8002b78 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80021ea:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_UART_MspInit+0x114>)
 80021ec:	4a18      	ldr	r2, [pc, #96]	; (8002250 <HAL_UART_MspInit+0x118>)
 80021ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <HAL_UART_MspInit+0x114>)
 80021f2:	2232      	movs	r2, #50	; 0x32
 80021f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_UART_MspInit+0x114>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <HAL_UART_MspInit+0x114>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_UART_MspInit+0x114>)
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <HAL_UART_MspInit+0x114>)
 800220a:	2200      	movs	r2, #0
 800220c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <HAL_UART_MspInit+0x114>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002214:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_UART_MspInit+0x114>)
 8002216:	2220      	movs	r2, #32
 8002218:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <HAL_UART_MspInit+0x114>)
 800221c:	2200      	movs	r2, #0
 800221e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_UART_MspInit+0x114>)
 8002222:	0018      	movs	r0, r3
 8002224:	f000 fa08 	bl	8002638 <HAL_DMA_Init>
 8002228:	1e03      	subs	r3, r0, #0
 800222a:	d001      	beq.n	8002230 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 800222c:	f7ff fed0 	bl	8001fd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a06      	ldr	r2, [pc, #24]	; (800224c <HAL_UART_MspInit+0x114>)
 8002234:	67da      	str	r2, [r3, #124]	; 0x7c
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_UART_MspInit+0x114>)
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800223c:	46c0      	nop			; (mov r8, r8)
 800223e:	46bd      	mov	sp, r7
 8002240:	b01d      	add	sp, #116	; 0x74
 8002242:	bd90      	pop	{r4, r7, pc}
 8002244:	40013800 	.word	0x40013800
 8002248:	40021000 	.word	0x40021000
 800224c:	200001d0 	.word	0x200001d0
 8002250:	40020008 	.word	0x40020008

08002254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <NMI_Handler+0x4>

0800225a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225e:	e7fe      	b.n	800225e <HardFault_Handler+0x4>

08002260 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002278:	f000 f8aa 	bl	80023d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <DMA1_Channel1_IRQHandler+0x14>)
 800228a:	0018      	movs	r0, r3
 800228c:	f000 fb06 	bl	800289c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002290:	46c0      	nop			; (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	200001d0 	.word	0x200001d0

0800229c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 80022a8:	480d      	ldr	r0, [pc, #52]	; (80022e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022ac:	f7ff fff6 	bl	800229c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022b0:	480c      	ldr	r0, [pc, #48]	; (80022e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80022b2:	490d      	ldr	r1, [pc, #52]	; (80022e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022b4:	4a0d      	ldr	r2, [pc, #52]	; (80022ec <LoopForever+0xe>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b8:	e002      	b.n	80022c0 <LoopCopyDataInit>

080022ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022be:	3304      	adds	r3, #4

080022c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c4:	d3f9      	bcc.n	80022ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022c8:	4c0a      	ldr	r4, [pc, #40]	; (80022f4 <LoopForever+0x16>)
  movs r3, #0
 80022ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022cc:	e001      	b.n	80022d2 <LoopFillZerobss>

080022ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d0:	3204      	adds	r2, #4

080022d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d4:	d3fb      	bcc.n	80022ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80022d6:	f003 fedb 	bl	8006090 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80022da:	f7ff f8f7 	bl	80014cc <main>

080022de <LoopForever>:

LoopForever:
  b LoopForever
 80022de:	e7fe      	b.n	80022de <LoopForever>
  ldr   r0, =_estack
 80022e0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80022ec:	080062ac 	.word	0x080062ac
  ldr r2, =_sbss
 80022f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80022f4:	20000234 	.word	0x20000234

080022f8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022f8:	e7fe      	b.n	80022f8 <ADC1_COMP_IRQHandler>
	...

080022fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002302:	1dfb      	adds	r3, r7, #7
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_Init+0x3c>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_Init+0x3c>)
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	0049      	lsls	r1, r1, #1
 8002312:	430a      	orrs	r2, r1
 8002314:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002316:	2003      	movs	r0, #3
 8002318:	f000 f810 	bl	800233c <HAL_InitTick>
 800231c:	1e03      	subs	r3, r0, #0
 800231e:	d003      	beq.n	8002328 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002320:	1dfb      	adds	r3, r7, #7
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e001      	b.n	800232c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002328:	f7ff fe58 	bl	8001fdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800232c:	1dfb      	adds	r3, r7, #7
 800232e:	781b      	ldrb	r3, [r3, #0]
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	b002      	add	sp, #8
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40022000 	.word	0x40022000

0800233c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002344:	230f      	movs	r3, #15
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_InitTick+0x88>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d02b      	beq.n	80023ac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002354:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <HAL_InitTick+0x8c>)
 8002356:	681c      	ldr	r4, [r3, #0]
 8002358:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <HAL_InitTick+0x88>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	0019      	movs	r1, r3
 800235e:	23fa      	movs	r3, #250	; 0xfa
 8002360:	0098      	lsls	r0, r3, #2
 8002362:	f7fd fecf 	bl	8000104 <__udivsi3>
 8002366:	0003      	movs	r3, r0
 8002368:	0019      	movs	r1, r3
 800236a:	0020      	movs	r0, r4
 800236c:	f7fd feca 	bl	8000104 <__udivsi3>
 8002370:	0003      	movs	r3, r0
 8002372:	0018      	movs	r0, r3
 8002374:	f000 f953 	bl	800261e <HAL_SYSTICK_Config>
 8002378:	1e03      	subs	r3, r0, #0
 800237a:	d112      	bne.n	80023a2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d80a      	bhi.n	8002398 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	2301      	movs	r3, #1
 8002386:	425b      	negs	r3, r3
 8002388:	2200      	movs	r2, #0
 800238a:	0018      	movs	r0, r3
 800238c:	f000 f922 	bl	80025d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <HAL_InitTick+0x90>)
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	e00d      	b.n	80023b4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002398:	230f      	movs	r3, #15
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e008      	b.n	80023b4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023a2:	230f      	movs	r3, #15
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	e003      	b.n	80023b4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023ac:	230f      	movs	r3, #15
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80023b4:	230f      	movs	r3, #15
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	781b      	ldrb	r3, [r3, #0]
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b005      	add	sp, #20
 80023c0:	bd90      	pop	{r4, r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	20000008 	.word	0x20000008
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000004 	.word	0x20000004

080023d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_IncTick+0x1c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	001a      	movs	r2, r3
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_IncTick+0x20>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	18d2      	adds	r2, r2, r3
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <HAL_IncTick+0x20>)
 80023e2:	601a      	str	r2, [r3, #0]
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	20000008 	.word	0x20000008
 80023f0:	20000230 	.word	0x20000230

080023f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  return uwTick;
 80023f8:	4b02      	ldr	r3, [pc, #8]	; (8002404 <HAL_GetTick+0x10>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	20000230 	.word	0x20000230

08002408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002410:	f7ff fff0 	bl	80023f4 <HAL_GetTick>
 8002414:	0003      	movs	r3, r0
 8002416:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	3301      	adds	r3, #1
 8002420:	d005      	beq.n	800242e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_Delay+0x44>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	001a      	movs	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	189b      	adds	r3, r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	f7ff ffe0 	bl	80023f4 <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	429a      	cmp	r2, r3
 800243e:	d8f7      	bhi.n	8002430 <HAL_Delay+0x28>
  {
  }
}
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b004      	add	sp, #16
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	20000008 	.word	0x20000008

08002450 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a06      	ldr	r2, [pc, #24]	; (8002478 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800245e:	4013      	ands	r3, r2
 8002460:	0019      	movs	r1, r3
 8002462:	4b04      	ldr	r3, [pc, #16]	; (8002474 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]
}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	b002      	add	sp, #8
 8002470:	bd80      	pop	{r7, pc}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	40010000 	.word	0x40010000
 8002478:	fffff9ff 	.word	0xfffff9ff

0800247c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	0002      	movs	r2, r0
 8002484:	1dfb      	adds	r3, r7, #7
 8002486:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002488:	1dfb      	adds	r3, r7, #7
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b7f      	cmp	r3, #127	; 0x7f
 800248e:	d809      	bhi.n	80024a4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002490:	1dfb      	adds	r3, r7, #7
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	001a      	movs	r2, r3
 8002496:	231f      	movs	r3, #31
 8002498:	401a      	ands	r2, r3
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <__NVIC_EnableIRQ+0x30>)
 800249c:	2101      	movs	r1, #1
 800249e:	4091      	lsls	r1, r2
 80024a0:	000a      	movs	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	e000e100 	.word	0xe000e100

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	0002      	movs	r2, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	1dfb      	adds	r3, r7, #7
 80024bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024be:	1dfb      	adds	r3, r7, #7
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b7f      	cmp	r3, #127	; 0x7f
 80024c4:	d828      	bhi.n	8002518 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024c6:	4a2f      	ldr	r2, [pc, #188]	; (8002584 <__NVIC_SetPriority+0xd4>)
 80024c8:	1dfb      	adds	r3, r7, #7
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	b25b      	sxtb	r3, r3
 80024ce:	089b      	lsrs	r3, r3, #2
 80024d0:	33c0      	adds	r3, #192	; 0xc0
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	589b      	ldr	r3, [r3, r2]
 80024d6:	1dfa      	adds	r2, r7, #7
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	0011      	movs	r1, r2
 80024dc:	2203      	movs	r2, #3
 80024de:	400a      	ands	r2, r1
 80024e0:	00d2      	lsls	r2, r2, #3
 80024e2:	21ff      	movs	r1, #255	; 0xff
 80024e4:	4091      	lsls	r1, r2
 80024e6:	000a      	movs	r2, r1
 80024e8:	43d2      	mvns	r2, r2
 80024ea:	401a      	ands	r2, r3
 80024ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	019b      	lsls	r3, r3, #6
 80024f2:	22ff      	movs	r2, #255	; 0xff
 80024f4:	401a      	ands	r2, r3
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	0018      	movs	r0, r3
 80024fc:	2303      	movs	r3, #3
 80024fe:	4003      	ands	r3, r0
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002504:	481f      	ldr	r0, [pc, #124]	; (8002584 <__NVIC_SetPriority+0xd4>)
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	b25b      	sxtb	r3, r3
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	430a      	orrs	r2, r1
 8002510:	33c0      	adds	r3, #192	; 0xc0
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002516:	e031      	b.n	800257c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002518:	4a1b      	ldr	r2, [pc, #108]	; (8002588 <__NVIC_SetPriority+0xd8>)
 800251a:	1dfb      	adds	r3, r7, #7
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	0019      	movs	r1, r3
 8002520:	230f      	movs	r3, #15
 8002522:	400b      	ands	r3, r1
 8002524:	3b08      	subs	r3, #8
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	3306      	adds	r3, #6
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	18d3      	adds	r3, r2, r3
 800252e:	3304      	adds	r3, #4
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	1dfa      	adds	r2, r7, #7
 8002534:	7812      	ldrb	r2, [r2, #0]
 8002536:	0011      	movs	r1, r2
 8002538:	2203      	movs	r2, #3
 800253a:	400a      	ands	r2, r1
 800253c:	00d2      	lsls	r2, r2, #3
 800253e:	21ff      	movs	r1, #255	; 0xff
 8002540:	4091      	lsls	r1, r2
 8002542:	000a      	movs	r2, r1
 8002544:	43d2      	mvns	r2, r2
 8002546:	401a      	ands	r2, r3
 8002548:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	019b      	lsls	r3, r3, #6
 800254e:	22ff      	movs	r2, #255	; 0xff
 8002550:	401a      	ands	r2, r3
 8002552:	1dfb      	adds	r3, r7, #7
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	0018      	movs	r0, r3
 8002558:	2303      	movs	r3, #3
 800255a:	4003      	ands	r3, r0
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002560:	4809      	ldr	r0, [pc, #36]	; (8002588 <__NVIC_SetPriority+0xd8>)
 8002562:	1dfb      	adds	r3, r7, #7
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	001c      	movs	r4, r3
 8002568:	230f      	movs	r3, #15
 800256a:	4023      	ands	r3, r4
 800256c:	3b08      	subs	r3, #8
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	430a      	orrs	r2, r1
 8002572:	3306      	adds	r3, #6
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	18c3      	adds	r3, r0, r3
 8002578:	3304      	adds	r3, #4
 800257a:	601a      	str	r2, [r3, #0]
}
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b003      	add	sp, #12
 8002582:	bd90      	pop	{r4, r7, pc}
 8002584:	e000e100 	.word	0xe000e100
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	1e5a      	subs	r2, r3, #1
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	045b      	lsls	r3, r3, #17
 800259c:	429a      	cmp	r2, r3
 800259e:	d301      	bcc.n	80025a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a0:	2301      	movs	r3, #1
 80025a2:	e010      	b.n	80025c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <SysTick_Config+0x44>)
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	3a01      	subs	r2, #1
 80025aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ac:	2301      	movs	r3, #1
 80025ae:	425b      	negs	r3, r3
 80025b0:	2103      	movs	r1, #3
 80025b2:	0018      	movs	r0, r3
 80025b4:	f7ff ff7c 	bl	80024b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <SysTick_Config+0x44>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025be:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <SysTick_Config+0x44>)
 80025c0:	2207      	movs	r2, #7
 80025c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b002      	add	sp, #8
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	e000e010 	.word	0xe000e010

080025d4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	210f      	movs	r1, #15
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	1c02      	adds	r2, r0, #0
 80025e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	0011      	movs	r1, r2
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7ff ff5d 	bl	80024b0 <__NVIC_SetPriority>
}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b004      	add	sp, #16
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	0002      	movs	r2, r0
 8002606:	1dfb      	adds	r3, r7, #7
 8002608:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800260a:	1dfb      	adds	r3, r7, #7
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	b25b      	sxtb	r3, r3
 8002610:	0018      	movs	r0, r3
 8002612:	f7ff ff33 	bl	800247c <__NVIC_EnableIRQ>
}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	b002      	add	sp, #8
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	0018      	movs	r0, r3
 800262a:	f7ff ffaf 	bl	800258c <SysTick_Config>
 800262e:	0003      	movs	r3, r0
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e091      	b.n	800276e <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	001a      	movs	r2, r3
 8002650:	4b49      	ldr	r3, [pc, #292]	; (8002778 <HAL_DMA_Init+0x140>)
 8002652:	429a      	cmp	r2, r3
 8002654:	d810      	bhi.n	8002678 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a48      	ldr	r2, [pc, #288]	; (800277c <HAL_DMA_Init+0x144>)
 800265c:	4694      	mov	ip, r2
 800265e:	4463      	add	r3, ip
 8002660:	2114      	movs	r1, #20
 8002662:	0018      	movs	r0, r3
 8002664:	f7fd fd4e 	bl	8000104 <__udivsi3>
 8002668:	0003      	movs	r3, r0
 800266a:	009a      	lsls	r2, r3, #2
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a43      	ldr	r2, [pc, #268]	; (8002780 <HAL_DMA_Init+0x148>)
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
 8002676:	e00f      	b.n	8002698 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a41      	ldr	r2, [pc, #260]	; (8002784 <HAL_DMA_Init+0x14c>)
 800267e:	4694      	mov	ip, r2
 8002680:	4463      	add	r3, ip
 8002682:	2114      	movs	r1, #20
 8002684:	0018      	movs	r0, r3
 8002686:	f7fd fd3d 	bl	8000104 <__udivsi3>
 800268a:	0003      	movs	r3, r0
 800268c:	009a      	lsls	r2, r3, #2
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a3c      	ldr	r2, [pc, #240]	; (8002788 <HAL_DMA_Init+0x150>)
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2225      	movs	r2, #37	; 0x25
 800269c:	2102      	movs	r1, #2
 800269e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4938      	ldr	r1, [pc, #224]	; (800278c <HAL_DMA_Init+0x154>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6819      	ldr	r1, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f000 f9d7 	bl	8002a9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	01db      	lsls	r3, r3, #7
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d102      	bne.n	8002700 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002708:	217f      	movs	r1, #127	; 0x7f
 800270a:	400a      	ands	r2, r1
 800270c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002716:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d011      	beq.n	8002744 <HAL_DMA_Init+0x10c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d80d      	bhi.n	8002744 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	0018      	movs	r0, r3
 800272c:	f000 fa00 	bl	8002b30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	e008      	b.n	8002756 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2225      	movs	r2, #37	; 0x25
 8002760:	2101      	movs	r1, #1
 8002762:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	; 0x24
 8002768:	2100      	movs	r1, #0
 800276a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	0018      	movs	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	b002      	add	sp, #8
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	40020407 	.word	0x40020407
 800277c:	bffdfff8 	.word	0xbffdfff8
 8002780:	40020000 	.word	0x40020000
 8002784:	bffdfbf8 	.word	0xbffdfbf8
 8002788:	40020400 	.word	0x40020400
 800278c:	ffff800f 	.word	0xffff800f

08002790 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800279e:	2317      	movs	r3, #23
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2224      	movs	r2, #36	; 0x24
 80027aa:	5c9b      	ldrb	r3, [r3, r2]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_DMA_Start_IT+0x24>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e06f      	b.n	8002894 <HAL_DMA_Start_IT+0x104>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2224      	movs	r2, #36	; 0x24
 80027b8:	2101      	movs	r1, #1
 80027ba:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2225      	movs	r2, #37	; 0x25
 80027c0:	5c9b      	ldrb	r3, [r3, r2]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d157      	bne.n	8002878 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2225      	movs	r2, #37	; 0x25
 80027cc:	2102      	movs	r1, #2
 80027ce:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2101      	movs	r1, #1
 80027e2:	438a      	bics	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f919 	bl	8002a24 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	210e      	movs	r1, #14
 8002806:	430a      	orrs	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e00f      	b.n	800282c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2104      	movs	r1, #4
 8002818:	438a      	bics	r2, r1
 800281a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	210a      	movs	r1, #10
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	025b      	lsls	r3, r3, #9
 8002836:	4013      	ands	r3, r2
 8002838:	d008      	beq.n	800284c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002844:	2180      	movs	r1, #128	; 0x80
 8002846:	0049      	lsls	r1, r1, #1
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	2180      	movs	r1, #128	; 0x80
 8002860:	0049      	lsls	r1, r1, #1
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2101      	movs	r1, #1
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e00a      	b.n	800288e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2224      	movs	r2, #36	; 0x24
 8002882:	2100      	movs	r1, #0
 8002884:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002886:	2317      	movs	r3, #23
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800288e:	2317      	movs	r3, #23
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	781b      	ldrb	r3, [r3, #0]
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b006      	add	sp, #24
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	221c      	movs	r2, #28
 80028ba:	4013      	ands	r3, r2
 80028bc:	2204      	movs	r2, #4
 80028be:	409a      	lsls	r2, r3
 80028c0:	0013      	movs	r3, r2
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4013      	ands	r3, r2
 80028c6:	d026      	beq.n	8002916 <HAL_DMA_IRQHandler+0x7a>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2204      	movs	r2, #4
 80028cc:	4013      	ands	r3, r2
 80028ce:	d022      	beq.n	8002916 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2220      	movs	r2, #32
 80028d8:	4013      	ands	r3, r2
 80028da:	d107      	bne.n	80028ec <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2104      	movs	r1, #4
 80028e8:	438a      	bics	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	221c      	movs	r2, #28
 80028f2:	401a      	ands	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	2104      	movs	r1, #4
 80028fa:	4091      	lsls	r1, r2
 80028fc:	000a      	movs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	2b00      	cmp	r3, #0
 8002906:	d100      	bne.n	800290a <HAL_DMA_IRQHandler+0x6e>
 8002908:	e080      	b.n	8002a0c <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	0010      	movs	r0, r2
 8002912:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002914:	e07a      	b.n	8002a0c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	221c      	movs	r2, #28
 800291c:	4013      	ands	r3, r2
 800291e:	2202      	movs	r2, #2
 8002920:	409a      	lsls	r2, r3
 8002922:	0013      	movs	r3, r2
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4013      	ands	r3, r2
 8002928:	d03c      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x108>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2202      	movs	r2, #2
 800292e:	4013      	ands	r3, r2
 8002930:	d038      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2220      	movs	r2, #32
 800293a:	4013      	ands	r3, r2
 800293c:	d10b      	bne.n	8002956 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	210a      	movs	r1, #10
 800294a:	438a      	bics	r2, r1
 800294c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2225      	movs	r2, #37	; 0x25
 8002952:	2101      	movs	r1, #1
 8002954:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	001a      	movs	r2, r3
 800295c:	4b2e      	ldr	r3, [pc, #184]	; (8002a18 <HAL_DMA_IRQHandler+0x17c>)
 800295e:	429a      	cmp	r2, r3
 8002960:	d909      	bls.n	8002976 <HAL_DMA_IRQHandler+0xda>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	221c      	movs	r2, #28
 8002968:	401a      	ands	r2, r3
 800296a:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <HAL_DMA_IRQHandler+0x180>)
 800296c:	2102      	movs	r1, #2
 800296e:	4091      	lsls	r1, r2
 8002970:	000a      	movs	r2, r1
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	e008      	b.n	8002988 <HAL_DMA_IRQHandler+0xec>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	221c      	movs	r2, #28
 800297c:	401a      	ands	r2, r3
 800297e:	4b28      	ldr	r3, [pc, #160]	; (8002a20 <HAL_DMA_IRQHandler+0x184>)
 8002980:	2102      	movs	r1, #2
 8002982:	4091      	lsls	r1, r2
 8002984:	000a      	movs	r2, r1
 8002986:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2224      	movs	r2, #36	; 0x24
 800298c:	2100      	movs	r1, #0
 800298e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d039      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	0010      	movs	r0, r2
 80029a0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80029a2:	e033      	b.n	8002a0c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	221c      	movs	r2, #28
 80029aa:	4013      	ands	r3, r2
 80029ac:	2208      	movs	r2, #8
 80029ae:	409a      	lsls	r2, r3
 80029b0:	0013      	movs	r3, r2
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4013      	ands	r3, r2
 80029b6:	d02a      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x172>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2208      	movs	r2, #8
 80029bc:	4013      	ands	r3, r2
 80029be:	d026      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	210e      	movs	r1, #14
 80029cc:	438a      	bics	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	221c      	movs	r2, #28
 80029d6:	401a      	ands	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	2101      	movs	r1, #1
 80029de:	4091      	lsls	r1, r2
 80029e0:	000a      	movs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2225      	movs	r2, #37	; 0x25
 80029ee:	2101      	movs	r1, #1
 80029f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2224      	movs	r2, #36	; 0x24
 80029f6:	2100      	movs	r1, #0
 80029f8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	0010      	movs	r0, r2
 8002a0a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a0c:	46c0      	nop			; (mov r8, r8)
 8002a0e:	46c0      	nop			; (mov r8, r8)
}
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b004      	add	sp, #16
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	40020080 	.word	0x40020080
 8002a1c:	40020400 	.word	0x40020400
 8002a20:	40020000 	.word	0x40020000

08002a24 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a3a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a4c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	221c      	movs	r2, #28
 8002a54:	401a      	ands	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4091      	lsls	r1, r2
 8002a5e:	000a      	movs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d108      	bne.n	8002a84 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a82:	e007      	b.n	8002a94 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	60da      	str	r2, [r3, #12]
}
 8002a94:	46c0      	nop			; (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b004      	add	sp, #16
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	001a      	movs	r2, r3
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d814      	bhi.n	8002ada <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002aba:	189a      	adds	r2, r3, r2
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	23ff      	movs	r3, #255	; 0xff
 8002ac8:	4013      	ands	r3, r2
 8002aca:	3b08      	subs	r3, #8
 8002acc:	2114      	movs	r1, #20
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7fd fb18 	bl	8000104 <__udivsi3>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e014      	b.n	8002b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002ae4:	189a      	adds	r2, r3, r2
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	001a      	movs	r2, r3
 8002af0:	23ff      	movs	r3, #255	; 0xff
 8002af2:	4013      	ands	r3, r2
 8002af4:	3b08      	subs	r3, #8
 8002af6:	2114      	movs	r1, #20
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7fd fb03 	bl	8000104 <__udivsi3>
 8002afe:	0003      	movs	r3, r0
 8002b00:	3307      	adds	r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a09      	ldr	r2, [pc, #36]	; (8002b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8002b08:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	221f      	movs	r2, #31
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2201      	movs	r2, #1
 8002b12:	409a      	lsls	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b004      	add	sp, #16
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40020407 	.word	0x40020407
 8002b24:	40020800 	.word	0x40020800
 8002b28:	4002081c 	.word	0x4002081c
 8002b2c:	40020880 	.word	0x40020880

08002b30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	227f      	movs	r2, #127	; 0x7f
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002b46:	4694      	mov	ip, r2
 8002b48:	4463      	add	r3, ip
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	001a      	movs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002b56:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2201      	movs	r2, #1
 8002b62:	409a      	lsls	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b004      	add	sp, #16
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	1000823f 	.word	0x1000823f
 8002b74:	40020940 	.word	0x40020940

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b86:	e14d      	b.n	8002e24 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4091      	lsls	r1, r2
 8002b92:	000a      	movs	r2, r1
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d100      	bne.n	8002ba0 <HAL_GPIO_Init+0x28>
 8002b9e:	e13e      	b.n	8002e1e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d005      	beq.n	8002bb8 <HAL_GPIO_Init+0x40>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d130      	bne.n	8002c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	0013      	movs	r3, r2
 8002bc8:	43da      	mvns	r2, r3
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	0013      	movs	r3, r2
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bee:	2201      	movs	r2, #1
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	0013      	movs	r3, r2
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	2201      	movs	r2, #1
 8002c06:	401a      	ands	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	0013      	movs	r3, r2
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2203      	movs	r2, #3
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d017      	beq.n	8002c56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	2203      	movs	r2, #3
 8002c32:	409a      	lsls	r2, r3
 8002c34:	0013      	movs	r3, r2
 8002c36:	43da      	mvns	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	409a      	lsls	r2, r3
 8002c48:	0013      	movs	r3, r2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d123      	bne.n	8002caa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	08da      	lsrs	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3208      	adds	r2, #8
 8002c6a:	0092      	lsls	r2, r2, #2
 8002c6c:	58d3      	ldr	r3, [r2, r3]
 8002c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2207      	movs	r2, #7
 8002c74:	4013      	ands	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	220f      	movs	r2, #15
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	0013      	movs	r3, r2
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2107      	movs	r1, #7
 8002c8e:	400b      	ands	r3, r1
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	409a      	lsls	r2, r3
 8002c94:	0013      	movs	r3, r2
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	08da      	lsrs	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3208      	adds	r2, #8
 8002ca4:	0092      	lsls	r2, r2, #2
 8002ca6:	6939      	ldr	r1, [r7, #16]
 8002ca8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	0013      	movs	r3, r2
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	401a      	ands	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	23c0      	movs	r3, #192	; 0xc0
 8002ce4:	029b      	lsls	r3, r3, #10
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d100      	bne.n	8002cec <HAL_GPIO_Init+0x174>
 8002cea:	e098      	b.n	8002e1e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002cec:	4a53      	ldr	r2, [pc, #332]	; (8002e3c <HAL_GPIO_Init+0x2c4>)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	089b      	lsrs	r3, r3, #2
 8002cf2:	3318      	adds	r3, #24
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	589b      	ldr	r3, [r3, r2]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	4013      	ands	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	220f      	movs	r2, #15
 8002d04:	409a      	lsls	r2, r3
 8002d06:	0013      	movs	r3, r2
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	23a0      	movs	r3, #160	; 0xa0
 8002d14:	05db      	lsls	r3, r3, #23
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d019      	beq.n	8002d4e <HAL_GPIO_Init+0x1d6>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a48      	ldr	r2, [pc, #288]	; (8002e40 <HAL_GPIO_Init+0x2c8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_GPIO_Init+0x1d2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a47      	ldr	r2, [pc, #284]	; (8002e44 <HAL_GPIO_Init+0x2cc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00d      	beq.n	8002d46 <HAL_GPIO_Init+0x1ce>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a46      	ldr	r2, [pc, #280]	; (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d007      	beq.n	8002d42 <HAL_GPIO_Init+0x1ca>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a45      	ldr	r2, [pc, #276]	; (8002e4c <HAL_GPIO_Init+0x2d4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d101      	bne.n	8002d3e <HAL_GPIO_Init+0x1c6>
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	e008      	b.n	8002d50 <HAL_GPIO_Init+0x1d8>
 8002d3e:	2305      	movs	r3, #5
 8002d40:	e006      	b.n	8002d50 <HAL_GPIO_Init+0x1d8>
 8002d42:	2303      	movs	r3, #3
 8002d44:	e004      	b.n	8002d50 <HAL_GPIO_Init+0x1d8>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e002      	b.n	8002d50 <HAL_GPIO_Init+0x1d8>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_GPIO_Init+0x1d8>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	2103      	movs	r1, #3
 8002d54:	400a      	ands	r2, r1
 8002d56:	00d2      	lsls	r2, r2, #3
 8002d58:	4093      	lsls	r3, r2
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002d60:	4936      	ldr	r1, [pc, #216]	; (8002e3c <HAL_GPIO_Init+0x2c4>)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	089b      	lsrs	r3, r3, #2
 8002d66:	3318      	adds	r3, #24
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d6e:	4a33      	ldr	r2, [pc, #204]	; (8002e3c <HAL_GPIO_Init+0x2c4>)
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	58d3      	ldr	r3, [r2, r3]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	025b      	lsls	r3, r3, #9
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d94:	4929      	ldr	r1, [pc, #164]	; (8002e3c <HAL_GPIO_Init+0x2c4>)
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002d9c:	4a27      	ldr	r2, [pc, #156]	; (8002e3c <HAL_GPIO_Init+0x2c4>)
 8002d9e:	2384      	movs	r3, #132	; 0x84
 8002da0:	58d3      	ldr	r3, [r2, r3]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	43da      	mvns	r2, r3
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	029b      	lsls	r3, r3, #10
 8002db6:	4013      	ands	r3, r2
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dc2:	491e      	ldr	r1, [pc, #120]	; (8002e3c <HAL_GPIO_Init+0x2c4>)
 8002dc4:	2284      	movs	r2, #132	; 0x84
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dca:	4b1c      	ldr	r3, [pc, #112]	; (8002e3c <HAL_GPIO_Init+0x2c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	035b      	lsls	r3, r3, #13
 8002de2:	4013      	ands	r3, r2
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dee:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <HAL_GPIO_Init+0x2c4>)
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <HAL_GPIO_Init+0x2c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	43da      	mvns	r2, r3
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	039b      	lsls	r3, r3, #14
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_GPIO_Init+0x2c4>)
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	3301      	adds	r3, #1
 8002e22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	40da      	lsrs	r2, r3
 8002e2c:	1e13      	subs	r3, r2, #0
 8002e2e:	d000      	beq.n	8002e32 <HAL_GPIO_Init+0x2ba>
 8002e30:	e6aa      	b.n	8002b88 <HAL_GPIO_Init+0x10>
  }
}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b006      	add	sp, #24
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40021800 	.word	0x40021800
 8002e40:	50000400 	.word	0x50000400
 8002e44:	50000800 	.word	0x50000800
 8002e48:	50000c00 	.word	0x50000c00
 8002e4c:	50001000 	.word	0x50001000

08002e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	0008      	movs	r0, r1
 8002e5a:	0011      	movs	r1, r2
 8002e5c:	1cbb      	adds	r3, r7, #2
 8002e5e:	1c02      	adds	r2, r0, #0
 8002e60:	801a      	strh	r2, [r3, #0]
 8002e62:	1c7b      	adds	r3, r7, #1
 8002e64:	1c0a      	adds	r2, r1, #0
 8002e66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e68:	1c7b      	adds	r3, r7, #1
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d004      	beq.n	8002e7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e70:	1cbb      	adds	r3, r7, #2
 8002e72:	881a      	ldrh	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e78:	e003      	b.n	8002e82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e7a:	1cbb      	adds	r3, r7, #2
 8002e7c:	881a      	ldrh	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b002      	add	sp, #8
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	000a      	movs	r2, r1
 8002e94:	1cbb      	adds	r3, r7, #2
 8002e96:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e9e:	1cbb      	adds	r3, r7, #2
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	041a      	lsls	r2, r3, #16
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	1cb9      	adds	r1, r7, #2
 8002eae:	8809      	ldrh	r1, [r1, #0]
 8002eb0:	400b      	ands	r3, r1
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	619a      	str	r2, [r3, #24]
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b004      	add	sp, #16
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ec8:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a19      	ldr	r2, [pc, #100]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d11f      	bne.n	8002f24 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002ee4:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	0013      	movs	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	189b      	adds	r3, r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4912      	ldr	r1, [pc, #72]	; (8002f3c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f7fd f906 	bl	8000104 <__udivsi3>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	3301      	adds	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002efe:	e008      	b.n	8002f12 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e001      	b.n	8002f12 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e009      	b.n	8002f26 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f12:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d0ed      	beq.n	8002f00 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	0018      	movs	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b004      	add	sp, #16
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	40007000 	.word	0x40007000
 8002f34:	fffff9ff 	.word	0xfffff9ff
 8002f38:	20000000 	.word	0x20000000
 8002f3c:	000f4240 	.word	0x000f4240

08002f40 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	23e0      	movs	r3, #224	; 0xe0
 8002f4a:	01db      	lsls	r3, r3, #7
 8002f4c:	4013      	ands	r3, r2
}
 8002f4e:	0018      	movs	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40021000 	.word	0x40021000

08002f58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f000 fb56 	bl	8003618 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2201      	movs	r2, #1
 8002f72:	4013      	ands	r3, r2
 8002f74:	d100      	bne.n	8002f78 <HAL_RCC_OscConfig+0x20>
 8002f76:	e07d      	b.n	8003074 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f78:	4bc3      	ldr	r3, [pc, #780]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2238      	movs	r2, #56	; 0x38
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f82:	4bc1      	ldr	r3, [pc, #772]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	2203      	movs	r2, #3
 8002f88:	4013      	ands	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d102      	bne.n	8002f98 <HAL_RCC_OscConfig+0x40>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d002      	beq.n	8002f9e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9e:	4bba      	ldr	r3, [pc, #744]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	029b      	lsls	r3, r3, #10
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d063      	beq.n	8003072 <HAL_RCC_OscConfig+0x11a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d15f      	bne.n	8003072 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f000 fb30 	bl	8003618 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	025b      	lsls	r3, r3, #9
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x7c>
 8002fc4:	4bb0      	ldr	r3, [pc, #704]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4baf      	ldr	r3, [pc, #700]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	0249      	lsls	r1, r1, #9
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	e020      	b.n	8003016 <HAL_RCC_OscConfig+0xbe>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	23a0      	movs	r3, #160	; 0xa0
 8002fda:	02db      	lsls	r3, r3, #11
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d10e      	bne.n	8002ffe <HAL_RCC_OscConfig+0xa6>
 8002fe0:	4ba9      	ldr	r3, [pc, #676]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4ba8      	ldr	r3, [pc, #672]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8002fe6:	2180      	movs	r1, #128	; 0x80
 8002fe8:	02c9      	lsls	r1, r1, #11
 8002fea:	430a      	orrs	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	4ba6      	ldr	r3, [pc, #664]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4ba5      	ldr	r3, [pc, #660]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	0249      	lsls	r1, r1, #9
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e00b      	b.n	8003016 <HAL_RCC_OscConfig+0xbe>
 8002ffe:	4ba2      	ldr	r3, [pc, #648]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4ba1      	ldr	r3, [pc, #644]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8003004:	49a1      	ldr	r1, [pc, #644]	; (800328c <HAL_RCC_OscConfig+0x334>)
 8003006:	400a      	ands	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	4b9f      	ldr	r3, [pc, #636]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4b9e      	ldr	r3, [pc, #632]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8003010:	499f      	ldr	r1, [pc, #636]	; (8003290 <HAL_RCC_OscConfig+0x338>)
 8003012:	400a      	ands	r2, r1
 8003014:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d014      	beq.n	8003048 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7ff f9e9 	bl	80023f4 <HAL_GetTick>
 8003022:	0003      	movs	r3, r0
 8003024:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003028:	f7ff f9e4 	bl	80023f4 <HAL_GetTick>
 800302c:	0002      	movs	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	; 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e2ee      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800303a:	4b93      	ldr	r3, [pc, #588]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	029b      	lsls	r3, r3, #10
 8003042:	4013      	ands	r3, r2
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0xd0>
 8003046:	e015      	b.n	8003074 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7ff f9d4 	bl	80023f4 <HAL_GetTick>
 800304c:	0003      	movs	r3, r0
 800304e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003052:	f7ff f9cf 	bl	80023f4 <HAL_GetTick>
 8003056:	0002      	movs	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b64      	cmp	r3, #100	; 0x64
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e2d9      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003064:	4b88      	ldr	r3, [pc, #544]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	029b      	lsls	r3, r3, #10
 800306c:	4013      	ands	r3, r2
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0xfa>
 8003070:	e000      	b.n	8003074 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003072:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2202      	movs	r2, #2
 800307a:	4013      	ands	r3, r2
 800307c:	d100      	bne.n	8003080 <HAL_RCC_OscConfig+0x128>
 800307e:	e099      	b.n	80031b4 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003080:	4b81      	ldr	r3, [pc, #516]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2238      	movs	r2, #56	; 0x38
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800308a:	4b7f      	ldr	r3, [pc, #508]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2203      	movs	r2, #3
 8003090:	4013      	ands	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b10      	cmp	r3, #16
 8003098:	d102      	bne.n	80030a0 <HAL_RCC_OscConfig+0x148>
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d002      	beq.n	80030a6 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d135      	bne.n	8003112 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a6:	4b78      	ldr	r3, [pc, #480]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4013      	ands	r3, r2
 80030b0:	d005      	beq.n	80030be <HAL_RCC_OscConfig+0x166>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e2ac      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030be:	4b72      	ldr	r3, [pc, #456]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	4a74      	ldr	r2, [pc, #464]	; (8003294 <HAL_RCC_OscConfig+0x33c>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	0019      	movs	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	021a      	lsls	r2, r3, #8
 80030ce:	4b6e      	ldr	r3, [pc, #440]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 80030d0:	430a      	orrs	r2, r1
 80030d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d112      	bne.n	8003100 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80030da:	4b6b      	ldr	r3, [pc, #428]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6e      	ldr	r2, [pc, #440]	; (8003298 <HAL_RCC_OscConfig+0x340>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	0019      	movs	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	4b67      	ldr	r3, [pc, #412]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 80030ea:	430a      	orrs	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80030ee:	4b66      	ldr	r3, [pc, #408]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	0adb      	lsrs	r3, r3, #11
 80030f4:	2207      	movs	r2, #7
 80030f6:	4013      	ands	r3, r2
 80030f8:	4a68      	ldr	r2, [pc, #416]	; (800329c <HAL_RCC_OscConfig+0x344>)
 80030fa:	40da      	lsrs	r2, r3
 80030fc:	4b68      	ldr	r3, [pc, #416]	; (80032a0 <HAL_RCC_OscConfig+0x348>)
 80030fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003100:	4b68      	ldr	r3, [pc, #416]	; (80032a4 <HAL_RCC_OscConfig+0x34c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	0018      	movs	r0, r3
 8003106:	f7ff f919 	bl	800233c <HAL_InitTick>
 800310a:	1e03      	subs	r3, r0, #0
 800310c:	d051      	beq.n	80031b2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e282      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d030      	beq.n	800317c <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800311a:	4b5b      	ldr	r3, [pc, #364]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a5e      	ldr	r2, [pc, #376]	; (8003298 <HAL_RCC_OscConfig+0x340>)
 8003120:	4013      	ands	r3, r2
 8003122:	0019      	movs	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	4b57      	ldr	r3, [pc, #348]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 800312a:	430a      	orrs	r2, r1
 800312c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800312e:	4b56      	ldr	r3, [pc, #344]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	4b55      	ldr	r3, [pc, #340]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	0049      	lsls	r1, r1, #1
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7ff f95a 	bl	80023f4 <HAL_GetTick>
 8003140:	0003      	movs	r3, r0
 8003142:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003146:	f7ff f955 	bl	80023f4 <HAL_GetTick>
 800314a:	0002      	movs	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e25f      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003158:	4b4b      	ldr	r3, [pc, #300]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4013      	ands	r3, r2
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003164:	4b48      	ldr	r3, [pc, #288]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a4a      	ldr	r2, [pc, #296]	; (8003294 <HAL_RCC_OscConfig+0x33c>)
 800316a:	4013      	ands	r3, r2
 800316c:	0019      	movs	r1, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	021a      	lsls	r2, r3, #8
 8003174:	4b44      	ldr	r3, [pc, #272]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	e01b      	b.n	80031b4 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800317c:	4b42      	ldr	r3, [pc, #264]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b41      	ldr	r3, [pc, #260]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8003182:	4949      	ldr	r1, [pc, #292]	; (80032a8 <HAL_RCC_OscConfig+0x350>)
 8003184:	400a      	ands	r2, r1
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7ff f934 	bl	80023f4 <HAL_GetTick>
 800318c:	0003      	movs	r3, r0
 800318e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003192:	f7ff f92f 	bl	80023f4 <HAL_GetTick>
 8003196:	0002      	movs	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e239      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031a4:	4b38      	ldr	r3, [pc, #224]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4013      	ands	r3, r2
 80031ae:	d1f0      	bne.n	8003192 <HAL_RCC_OscConfig+0x23a>
 80031b0:	e000      	b.n	80031b4 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2208      	movs	r2, #8
 80031ba:	4013      	ands	r3, r2
 80031bc:	d047      	beq.n	800324e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80031be:	4b32      	ldr	r3, [pc, #200]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2238      	movs	r2, #56	; 0x38
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b18      	cmp	r3, #24
 80031c8:	d10a      	bne.n	80031e0 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80031ca:	4b2f      	ldr	r3, [pc, #188]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 80031cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ce:	2202      	movs	r2, #2
 80031d0:	4013      	ands	r3, r2
 80031d2:	d03c      	beq.n	800324e <HAL_RCC_OscConfig+0x2f6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d138      	bne.n	800324e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e21b      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d019      	beq.n	800321c <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80031e8:	4b27      	ldr	r3, [pc, #156]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 80031ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031ec:	4b26      	ldr	r3, [pc, #152]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 80031ee:	2101      	movs	r1, #1
 80031f0:	430a      	orrs	r2, r1
 80031f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7ff f8fe 	bl	80023f4 <HAL_GetTick>
 80031f8:	0003      	movs	r3, r0
 80031fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fe:	f7ff f8f9 	bl	80023f4 <HAL_GetTick>
 8003202:	0002      	movs	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e203      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003210:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8003212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003214:	2202      	movs	r2, #2
 8003216:	4013      	ands	r3, r2
 8003218:	d0f1      	beq.n	80031fe <HAL_RCC_OscConfig+0x2a6>
 800321a:	e018      	b.n	800324e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800321c:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 800321e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8003222:	2101      	movs	r1, #1
 8003224:	438a      	bics	r2, r1
 8003226:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7ff f8e4 	bl	80023f4 <HAL_GetTick>
 800322c:	0003      	movs	r3, r0
 800322e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003232:	f7ff f8df 	bl	80023f4 <HAL_GetTick>
 8003236:	0002      	movs	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1e9      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003244:	4b10      	ldr	r3, [pc, #64]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8003246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003248:	2202      	movs	r2, #2
 800324a:	4013      	ands	r3, r2
 800324c:	d1f1      	bne.n	8003232 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2204      	movs	r2, #4
 8003254:	4013      	ands	r3, r2
 8003256:	d100      	bne.n	800325a <HAL_RCC_OscConfig+0x302>
 8003258:	e0c6      	b.n	80033e8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325a:	231f      	movs	r3, #31
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	2200      	movs	r2, #0
 8003260:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2238      	movs	r2, #56	; 0x38
 8003268:	4013      	ands	r3, r2
 800326a:	2b20      	cmp	r3, #32
 800326c:	d11e      	bne.n	80032ac <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_RCC_OscConfig+0x330>)
 8003270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003272:	2202      	movs	r2, #2
 8003274:	4013      	ands	r3, r2
 8003276:	d100      	bne.n	800327a <HAL_RCC_OscConfig+0x322>
 8003278:	e0b6      	b.n	80033e8 <HAL_RCC_OscConfig+0x490>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d000      	beq.n	8003284 <HAL_RCC_OscConfig+0x32c>
 8003282:	e0b1      	b.n	80033e8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e1c7      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
 8003288:	40021000 	.word	0x40021000
 800328c:	fffeffff 	.word	0xfffeffff
 8003290:	fffbffff 	.word	0xfffbffff
 8003294:	ffff80ff 	.word	0xffff80ff
 8003298:	ffffc7ff 	.word	0xffffc7ff
 800329c:	00f42400 	.word	0x00f42400
 80032a0:	20000000 	.word	0x20000000
 80032a4:	20000004 	.word	0x20000004
 80032a8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032ac:	4bb8      	ldr	r3, [pc, #736]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 80032ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	055b      	lsls	r3, r3, #21
 80032b4:	4013      	ands	r3, r2
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_OscConfig+0x364>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x366>
 80032bc:	2300      	movs	r3, #0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d011      	beq.n	80032e6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80032c2:	4bb3      	ldr	r3, [pc, #716]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 80032c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032c6:	4bb2      	ldr	r3, [pc, #712]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	0549      	lsls	r1, r1, #21
 80032cc:	430a      	orrs	r2, r1
 80032ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80032d0:	4baf      	ldr	r3, [pc, #700]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 80032d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	055b      	lsls	r3, r3, #21
 80032d8:	4013      	ands	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80032de:	231f      	movs	r3, #31
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	2201      	movs	r2, #1
 80032e4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e6:	4bab      	ldr	r3, [pc, #684]	; (8003594 <HAL_RCC_OscConfig+0x63c>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4013      	ands	r3, r2
 80032f0:	d11a      	bne.n	8003328 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f2:	4ba8      	ldr	r3, [pc, #672]	; (8003594 <HAL_RCC_OscConfig+0x63c>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4ba7      	ldr	r3, [pc, #668]	; (8003594 <HAL_RCC_OscConfig+0x63c>)
 80032f8:	2180      	movs	r1, #128	; 0x80
 80032fa:	0049      	lsls	r1, r1, #1
 80032fc:	430a      	orrs	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003300:	f7ff f878 	bl	80023f4 <HAL_GetTick>
 8003304:	0003      	movs	r3, r0
 8003306:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330a:	f7ff f873 	bl	80023f4 <HAL_GetTick>
 800330e:	0002      	movs	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e17d      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800331c:	4b9d      	ldr	r3, [pc, #628]	; (8003594 <HAL_RCC_OscConfig+0x63c>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4013      	ands	r3, r2
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x3e6>
 8003330:	4b97      	ldr	r3, [pc, #604]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003332:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003334:	4b96      	ldr	r3, [pc, #600]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003336:	2101      	movs	r1, #1
 8003338:	430a      	orrs	r2, r1
 800333a:	65da      	str	r2, [r3, #92]	; 0x5c
 800333c:	e01c      	b.n	8003378 <HAL_RCC_OscConfig+0x420>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b05      	cmp	r3, #5
 8003344:	d10c      	bne.n	8003360 <HAL_RCC_OscConfig+0x408>
 8003346:	4b92      	ldr	r3, [pc, #584]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003348:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800334a:	4b91      	ldr	r3, [pc, #580]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 800334c:	2104      	movs	r1, #4
 800334e:	430a      	orrs	r2, r1
 8003350:	65da      	str	r2, [r3, #92]	; 0x5c
 8003352:	4b8f      	ldr	r3, [pc, #572]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003354:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003356:	4b8e      	ldr	r3, [pc, #568]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003358:	2101      	movs	r1, #1
 800335a:	430a      	orrs	r2, r1
 800335c:	65da      	str	r2, [r3, #92]	; 0x5c
 800335e:	e00b      	b.n	8003378 <HAL_RCC_OscConfig+0x420>
 8003360:	4b8b      	ldr	r3, [pc, #556]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003362:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003364:	4b8a      	ldr	r3, [pc, #552]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003366:	2101      	movs	r1, #1
 8003368:	438a      	bics	r2, r1
 800336a:	65da      	str	r2, [r3, #92]	; 0x5c
 800336c:	4b88      	ldr	r3, [pc, #544]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 800336e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003370:	4b87      	ldr	r3, [pc, #540]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003372:	2104      	movs	r1, #4
 8003374:	438a      	bics	r2, r1
 8003376:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d014      	beq.n	80033aa <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7ff f838 	bl	80023f4 <HAL_GetTick>
 8003384:	0003      	movs	r3, r0
 8003386:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003388:	e009      	b.n	800339e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f7ff f833 	bl	80023f4 <HAL_GetTick>
 800338e:	0002      	movs	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	4a80      	ldr	r2, [pc, #512]	; (8003598 <HAL_RCC_OscConfig+0x640>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e13c      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800339e:	4b7c      	ldr	r3, [pc, #496]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	2202      	movs	r2, #2
 80033a4:	4013      	ands	r3, r2
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x432>
 80033a8:	e013      	b.n	80033d2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033aa:	f7ff f823 	bl	80023f4 <HAL_GetTick>
 80033ae:	0003      	movs	r3, r0
 80033b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033b2:	e009      	b.n	80033c8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b4:	f7ff f81e 	bl	80023f4 <HAL_GetTick>
 80033b8:	0002      	movs	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	4a76      	ldr	r2, [pc, #472]	; (8003598 <HAL_RCC_OscConfig+0x640>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e127      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033c8:	4b71      	ldr	r3, [pc, #452]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	2202      	movs	r2, #2
 80033ce:	4013      	ands	r3, r2
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80033d2:	231f      	movs	r3, #31
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d105      	bne.n	80033e8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80033dc:	4b6c      	ldr	r3, [pc, #432]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 80033de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e0:	4b6b      	ldr	r3, [pc, #428]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 80033e2:	496e      	ldr	r1, [pc, #440]	; (800359c <HAL_RCC_OscConfig+0x644>)
 80033e4:	400a      	ands	r2, r1
 80033e6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2220      	movs	r2, #32
 80033ee:	4013      	ands	r3, r2
 80033f0:	d039      	beq.n	8003466 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01b      	beq.n	8003432 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033fa:	4b65      	ldr	r3, [pc, #404]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b64      	ldr	r3, [pc, #400]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003400:	2180      	movs	r1, #128	; 0x80
 8003402:	03c9      	lsls	r1, r1, #15
 8003404:	430a      	orrs	r2, r1
 8003406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fe fff4 	bl	80023f4 <HAL_GetTick>
 800340c:	0003      	movs	r3, r0
 800340e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003412:	f7fe ffef 	bl	80023f4 <HAL_GetTick>
 8003416:	0002      	movs	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0f9      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003424:	4b5a      	ldr	r3, [pc, #360]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	041b      	lsls	r3, r3, #16
 800342c:	4013      	ands	r3, r2
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x4ba>
 8003430:	e019      	b.n	8003466 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003432:	4b57      	ldr	r3, [pc, #348]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4b56      	ldr	r3, [pc, #344]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003438:	4959      	ldr	r1, [pc, #356]	; (80035a0 <HAL_RCC_OscConfig+0x648>)
 800343a:	400a      	ands	r2, r1
 800343c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343e:	f7fe ffd9 	bl	80023f4 <HAL_GetTick>
 8003442:	0003      	movs	r3, r0
 8003444:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003448:	f7fe ffd4 	bl	80023f4 <HAL_GetTick>
 800344c:	0002      	movs	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e0de      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800345a:	4b4d      	ldr	r3, [pc, #308]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	041b      	lsls	r3, r3, #16
 8003462:	4013      	ands	r3, r2
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d100      	bne.n	8003470 <HAL_RCC_OscConfig+0x518>
 800346e:	e0d2      	b.n	8003616 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003470:	4b47      	ldr	r3, [pc, #284]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2238      	movs	r2, #56	; 0x38
 8003476:	4013      	ands	r3, r2
 8003478:	2b10      	cmp	r3, #16
 800347a:	d100      	bne.n	800347e <HAL_RCC_OscConfig+0x526>
 800347c:	e081      	b.n	8003582 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d156      	bne.n	8003534 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b42      	ldr	r3, [pc, #264]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4b41      	ldr	r3, [pc, #260]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 800348c:	4945      	ldr	r1, [pc, #276]	; (80035a4 <HAL_RCC_OscConfig+0x64c>)
 800348e:	400a      	ands	r2, r1
 8003490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003492:	f7fe ffaf 	bl	80023f4 <HAL_GetTick>
 8003496:	0003      	movs	r3, r0
 8003498:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fe ffaa 	bl	80023f4 <HAL_GetTick>
 80034a0:	0002      	movs	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0b4      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ae:	4b38      	ldr	r3, [pc, #224]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	049b      	lsls	r3, r3, #18
 80034b6:	4013      	ands	r3, r2
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ba:	4b35      	ldr	r3, [pc, #212]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	4a3a      	ldr	r2, [pc, #232]	; (80035a8 <HAL_RCC_OscConfig+0x650>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	0019      	movs	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	431a      	orrs	r2, r3
 80034e8:	4b29      	ldr	r3, [pc, #164]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 80034ea:	430a      	orrs	r2, r1
 80034ec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ee:	4b28      	ldr	r3, [pc, #160]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	4b27      	ldr	r3, [pc, #156]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	0449      	lsls	r1, r1, #17
 80034f8:	430a      	orrs	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80034fc:	4b24      	ldr	r3, [pc, #144]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	4b23      	ldr	r3, [pc, #140]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003502:	2180      	movs	r1, #128	; 0x80
 8003504:	0549      	lsls	r1, r1, #21
 8003506:	430a      	orrs	r2, r1
 8003508:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fe ff73 	bl	80023f4 <HAL_GetTick>
 800350e:	0003      	movs	r3, r0
 8003510:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003514:	f7fe ff6e 	bl	80023f4 <HAL_GetTick>
 8003518:	0002      	movs	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e078      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003526:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	049b      	lsls	r3, r3, #18
 800352e:	4013      	ands	r3, r2
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x5bc>
 8003532:	e070      	b.n	8003616 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003534:	4b16      	ldr	r3, [pc, #88]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b15      	ldr	r3, [pc, #84]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 800353a:	491a      	ldr	r1, [pc, #104]	; (80035a4 <HAL_RCC_OscConfig+0x64c>)
 800353c:	400a      	ands	r2, r1
 800353e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003540:	4b13      	ldr	r3, [pc, #76]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003546:	2103      	movs	r1, #3
 8003548:	438a      	bics	r2, r1
 800354a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003552:	4916      	ldr	r1, [pc, #88]	; (80035ac <HAL_RCC_OscConfig+0x654>)
 8003554:	400a      	ands	r2, r1
 8003556:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fe ff4c 	bl	80023f4 <HAL_GetTick>
 800355c:	0003      	movs	r3, r0
 800355e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003562:	f7fe ff47 	bl	80023f4 <HAL_GetTick>
 8003566:	0002      	movs	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e051      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_RCC_OscConfig+0x638>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	049b      	lsls	r3, r3, #18
 800357c:	4013      	ands	r3, r2
 800357e:	d1f0      	bne.n	8003562 <HAL_RCC_OscConfig+0x60a>
 8003580:	e049      	b.n	8003616 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d112      	bne.n	80035b0 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e044      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	40021000 	.word	0x40021000
 8003594:	40007000 	.word	0x40007000
 8003598:	00001388 	.word	0x00001388
 800359c:	efffffff 	.word	0xefffffff
 80035a0:	ffbfffff 	.word	0xffbfffff
 80035a4:	feffffff 	.word	0xfeffffff
 80035a8:	11c1808c 	.word	0x11c1808c
 80035ac:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80035b0:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_RCC_OscConfig+0x6c8>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2203      	movs	r2, #3
 80035ba:	401a      	ands	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d126      	bne.n	8003612 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2270      	movs	r2, #112	; 0x70
 80035c8:	401a      	ands	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d11f      	bne.n	8003612 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	23fe      	movs	r3, #254	; 0xfe
 80035d6:	01db      	lsls	r3, r3, #7
 80035d8:	401a      	ands	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d116      	bne.n	8003612 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	23f8      	movs	r3, #248	; 0xf8
 80035e8:	039b      	lsls	r3, r3, #14
 80035ea:	401a      	ands	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d10e      	bne.n	8003612 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	23e0      	movs	r3, #224	; 0xe0
 80035f8:	051b      	lsls	r3, r3, #20
 80035fa:	401a      	ands	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d106      	bne.n	8003612 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	0f5b      	lsrs	r3, r3, #29
 8003608:	075a      	lsls	r2, r3, #29
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d001      	beq.n	8003616 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	0018      	movs	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	b008      	add	sp, #32
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40021000 	.word	0x40021000

08003624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0e9      	b.n	800380c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003638:	4b76      	ldr	r3, [pc, #472]	; (8003814 <HAL_RCC_ClockConfig+0x1f0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2207      	movs	r2, #7
 800363e:	4013      	ands	r3, r2
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d91e      	bls.n	8003684 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b73      	ldr	r3, [pc, #460]	; (8003814 <HAL_RCC_ClockConfig+0x1f0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2207      	movs	r2, #7
 800364c:	4393      	bics	r3, r2
 800364e:	0019      	movs	r1, r3
 8003650:	4b70      	ldr	r3, [pc, #448]	; (8003814 <HAL_RCC_ClockConfig+0x1f0>)
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003658:	f7fe fecc 	bl	80023f4 <HAL_GetTick>
 800365c:	0003      	movs	r3, r0
 800365e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003660:	e009      	b.n	8003676 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003662:	f7fe fec7 	bl	80023f4 <HAL_GetTick>
 8003666:	0002      	movs	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	4a6a      	ldr	r2, [pc, #424]	; (8003818 <HAL_RCC_ClockConfig+0x1f4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0ca      	b.n	800380c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003676:	4b67      	ldr	r3, [pc, #412]	; (8003814 <HAL_RCC_ClockConfig+0x1f0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2207      	movs	r2, #7
 800367c:	4013      	ands	r3, r2
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d1ee      	bne.n	8003662 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2202      	movs	r2, #2
 800368a:	4013      	ands	r3, r2
 800368c:	d015      	beq.n	80036ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2204      	movs	r2, #4
 8003694:	4013      	ands	r3, r2
 8003696:	d006      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003698:	4b60      	ldr	r3, [pc, #384]	; (800381c <HAL_RCC_ClockConfig+0x1f8>)
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	4b5f      	ldr	r3, [pc, #380]	; (800381c <HAL_RCC_ClockConfig+0x1f8>)
 800369e:	21e0      	movs	r1, #224	; 0xe0
 80036a0:	01c9      	lsls	r1, r1, #7
 80036a2:	430a      	orrs	r2, r1
 80036a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a6:	4b5d      	ldr	r3, [pc, #372]	; (800381c <HAL_RCC_ClockConfig+0x1f8>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4a5d      	ldr	r2, [pc, #372]	; (8003820 <HAL_RCC_ClockConfig+0x1fc>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	0019      	movs	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	4b59      	ldr	r3, [pc, #356]	; (800381c <HAL_RCC_ClockConfig+0x1f8>)
 80036b6:	430a      	orrs	r2, r1
 80036b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2201      	movs	r2, #1
 80036c0:	4013      	ands	r3, r2
 80036c2:	d057      	beq.n	8003774 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d107      	bne.n	80036dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036cc:	4b53      	ldr	r3, [pc, #332]	; (800381c <HAL_RCC_ClockConfig+0x1f8>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	029b      	lsls	r3, r3, #10
 80036d4:	4013      	ands	r3, r2
 80036d6:	d12b      	bne.n	8003730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e097      	b.n	800380c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d107      	bne.n	80036f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e4:	4b4d      	ldr	r3, [pc, #308]	; (800381c <HAL_RCC_ClockConfig+0x1f8>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	049b      	lsls	r3, r3, #18
 80036ec:	4013      	ands	r3, r2
 80036ee:	d11f      	bne.n	8003730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e08b      	b.n	800380c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d107      	bne.n	800370c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036fc:	4b47      	ldr	r3, [pc, #284]	; (800381c <HAL_RCC_ClockConfig+0x1f8>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4013      	ands	r3, r2
 8003706:	d113      	bne.n	8003730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e07f      	b.n	800380c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b03      	cmp	r3, #3
 8003712:	d106      	bne.n	8003722 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003714:	4b41      	ldr	r3, [pc, #260]	; (800381c <HAL_RCC_ClockConfig+0x1f8>)
 8003716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003718:	2202      	movs	r2, #2
 800371a:	4013      	ands	r3, r2
 800371c:	d108      	bne.n	8003730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e074      	b.n	800380c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003722:	4b3e      	ldr	r3, [pc, #248]	; (800381c <HAL_RCC_ClockConfig+0x1f8>)
 8003724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003726:	2202      	movs	r2, #2
 8003728:	4013      	ands	r3, r2
 800372a:	d101      	bne.n	8003730 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e06d      	b.n	800380c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003730:	4b3a      	ldr	r3, [pc, #232]	; (800381c <HAL_RCC_ClockConfig+0x1f8>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2207      	movs	r2, #7
 8003736:	4393      	bics	r3, r2
 8003738:	0019      	movs	r1, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	4b37      	ldr	r3, [pc, #220]	; (800381c <HAL_RCC_ClockConfig+0x1f8>)
 8003740:	430a      	orrs	r2, r1
 8003742:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003744:	f7fe fe56 	bl	80023f4 <HAL_GetTick>
 8003748:	0003      	movs	r3, r0
 800374a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374c:	e009      	b.n	8003762 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374e:	f7fe fe51 	bl	80023f4 <HAL_GetTick>
 8003752:	0002      	movs	r2, r0
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	4a2f      	ldr	r2, [pc, #188]	; (8003818 <HAL_RCC_ClockConfig+0x1f4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e054      	b.n	800380c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003762:	4b2e      	ldr	r3, [pc, #184]	; (800381c <HAL_RCC_ClockConfig+0x1f8>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2238      	movs	r2, #56	; 0x38
 8003768:	401a      	ands	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	429a      	cmp	r2, r3
 8003772:	d1ec      	bne.n	800374e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003774:	4b27      	ldr	r3, [pc, #156]	; (8003814 <HAL_RCC_ClockConfig+0x1f0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2207      	movs	r2, #7
 800377a:	4013      	ands	r3, r2
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d21e      	bcs.n	80037c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_RCC_ClockConfig+0x1f0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2207      	movs	r2, #7
 8003788:	4393      	bics	r3, r2
 800378a:	0019      	movs	r1, r3
 800378c:	4b21      	ldr	r3, [pc, #132]	; (8003814 <HAL_RCC_ClockConfig+0x1f0>)
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003794:	f7fe fe2e 	bl	80023f4 <HAL_GetTick>
 8003798:	0003      	movs	r3, r0
 800379a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800379c:	e009      	b.n	80037b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379e:	f7fe fe29 	bl	80023f4 <HAL_GetTick>
 80037a2:	0002      	movs	r2, r0
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <HAL_RCC_ClockConfig+0x1f4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e02c      	b.n	800380c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_RCC_ClockConfig+0x1f0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2207      	movs	r2, #7
 80037b8:	4013      	ands	r3, r2
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d1ee      	bne.n	800379e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2204      	movs	r2, #4
 80037c6:	4013      	ands	r3, r2
 80037c8:	d009      	beq.n	80037de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80037ca:	4b14      	ldr	r3, [pc, #80]	; (800381c <HAL_RCC_ClockConfig+0x1f8>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <HAL_RCC_ClockConfig+0x200>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	0019      	movs	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	4b10      	ldr	r3, [pc, #64]	; (800381c <HAL_RCC_ClockConfig+0x1f8>)
 80037da:	430a      	orrs	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80037de:	f000 f829 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 80037e2:	0001      	movs	r1, r0
 80037e4:	4b0d      	ldr	r3, [pc, #52]	; (800381c <HAL_RCC_ClockConfig+0x1f8>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	220f      	movs	r2, #15
 80037ec:	401a      	ands	r2, r3
 80037ee:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <HAL_RCC_ClockConfig+0x204>)
 80037f0:	0092      	lsls	r2, r2, #2
 80037f2:	58d3      	ldr	r3, [r2, r3]
 80037f4:	221f      	movs	r2, #31
 80037f6:	4013      	ands	r3, r2
 80037f8:	000a      	movs	r2, r1
 80037fa:	40da      	lsrs	r2, r3
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_RCC_ClockConfig+0x208>)
 80037fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCC_ClockConfig+0x20c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	0018      	movs	r0, r3
 8003806:	f7fe fd99 	bl	800233c <HAL_InitTick>
 800380a:	0003      	movs	r3, r0
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	b004      	add	sp, #16
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40022000 	.word	0x40022000
 8003818:	00001388 	.word	0x00001388
 800381c:	40021000 	.word	0x40021000
 8003820:	fffff0ff 	.word	0xfffff0ff
 8003824:	ffff8fff 	.word	0xffff8fff
 8003828:	080061c0 	.word	0x080061c0
 800382c:	20000000 	.word	0x20000000
 8003830:	20000004 	.word	0x20000004

08003834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800383a:	4b3c      	ldr	r3, [pc, #240]	; (800392c <HAL_RCC_GetSysClockFreq+0xf8>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2238      	movs	r2, #56	; 0x38
 8003840:	4013      	ands	r3, r2
 8003842:	d10f      	bne.n	8003864 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003844:	4b39      	ldr	r3, [pc, #228]	; (800392c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	0adb      	lsrs	r3, r3, #11
 800384a:	2207      	movs	r2, #7
 800384c:	4013      	ands	r3, r2
 800384e:	2201      	movs	r2, #1
 8003850:	409a      	lsls	r2, r3
 8003852:	0013      	movs	r3, r2
 8003854:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003856:	6839      	ldr	r1, [r7, #0]
 8003858:	4835      	ldr	r0, [pc, #212]	; (8003930 <HAL_RCC_GetSysClockFreq+0xfc>)
 800385a:	f7fc fc53 	bl	8000104 <__udivsi3>
 800385e:	0003      	movs	r3, r0
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	e05d      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003864:	4b31      	ldr	r3, [pc, #196]	; (800392c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2238      	movs	r2, #56	; 0x38
 800386a:	4013      	ands	r3, r2
 800386c:	2b08      	cmp	r3, #8
 800386e:	d102      	bne.n	8003876 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003870:	4b30      	ldr	r3, [pc, #192]	; (8003934 <HAL_RCC_GetSysClockFreq+0x100>)
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	e054      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003876:	4b2d      	ldr	r3, [pc, #180]	; (800392c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2238      	movs	r2, #56	; 0x38
 800387c:	4013      	ands	r3, r2
 800387e:	2b10      	cmp	r3, #16
 8003880:	d138      	bne.n	80038f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003882:	4b2a      	ldr	r3, [pc, #168]	; (800392c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2203      	movs	r2, #3
 8003888:	4013      	ands	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800388c:	4b27      	ldr	r3, [pc, #156]	; (800392c <HAL_RCC_GetSysClockFreq+0xf8>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	2207      	movs	r2, #7
 8003894:	4013      	ands	r3, r2
 8003896:	3301      	adds	r3, #1
 8003898:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b03      	cmp	r3, #3
 800389e:	d10d      	bne.n	80038bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	4824      	ldr	r0, [pc, #144]	; (8003934 <HAL_RCC_GetSysClockFreq+0x100>)
 80038a4:	f7fc fc2e 	bl	8000104 <__udivsi3>
 80038a8:	0003      	movs	r3, r0
 80038aa:	0019      	movs	r1, r3
 80038ac:	4b1f      	ldr	r3, [pc, #124]	; (800392c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	0a1b      	lsrs	r3, r3, #8
 80038b2:	227f      	movs	r2, #127	; 0x7f
 80038b4:	4013      	ands	r3, r2
 80038b6:	434b      	muls	r3, r1
 80038b8:	617b      	str	r3, [r7, #20]
        break;
 80038ba:	e00d      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	481c      	ldr	r0, [pc, #112]	; (8003930 <HAL_RCC_GetSysClockFreq+0xfc>)
 80038c0:	f7fc fc20 	bl	8000104 <__udivsi3>
 80038c4:	0003      	movs	r3, r0
 80038c6:	0019      	movs	r1, r3
 80038c8:	4b18      	ldr	r3, [pc, #96]	; (800392c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	227f      	movs	r2, #127	; 0x7f
 80038d0:	4013      	ands	r3, r2
 80038d2:	434b      	muls	r3, r1
 80038d4:	617b      	str	r3, [r7, #20]
        break;
 80038d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80038d8:	4b14      	ldr	r3, [pc, #80]	; (800392c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	0f5b      	lsrs	r3, r3, #29
 80038de:	2207      	movs	r2, #7
 80038e0:	4013      	ands	r3, r2
 80038e2:	3301      	adds	r3, #1
 80038e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	6978      	ldr	r0, [r7, #20]
 80038ea:	f7fc fc0b 	bl	8000104 <__udivsi3>
 80038ee:	0003      	movs	r3, r0
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	e015      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80038f4:	4b0d      	ldr	r3, [pc, #52]	; (800392c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2238      	movs	r2, #56	; 0x38
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d103      	bne.n	8003908 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	e00b      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <HAL_RCC_GetSysClockFreq+0xf8>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2238      	movs	r2, #56	; 0x38
 800390e:	4013      	ands	r3, r2
 8003910:	2b18      	cmp	r3, #24
 8003912:	d103      	bne.n	800391c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003914:	23fa      	movs	r3, #250	; 0xfa
 8003916:	01db      	lsls	r3, r3, #7
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	e001      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003920:	693b      	ldr	r3, [r7, #16]
}
 8003922:	0018      	movs	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	b006      	add	sp, #24
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	40021000 	.word	0x40021000
 8003930:	00f42400 	.word	0x00f42400
 8003934:	007a1200 	.word	0x007a1200

08003938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800393c:	4b02      	ldr	r3, [pc, #8]	; (8003948 <HAL_RCC_GetHCLKFreq+0x10>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	0018      	movs	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	20000000 	.word	0x20000000

0800394c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800394c:	b5b0      	push	{r4, r5, r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003950:	f7ff fff2 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003954:	0004      	movs	r4, r0
 8003956:	f7ff faf3 	bl	8002f40 <LL_RCC_GetAPB1Prescaler>
 800395a:	0003      	movs	r3, r0
 800395c:	0b1a      	lsrs	r2, r3, #12
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003960:	0092      	lsls	r2, r2, #2
 8003962:	58d3      	ldr	r3, [r2, r3]
 8003964:	221f      	movs	r2, #31
 8003966:	4013      	ands	r3, r2
 8003968:	40dc      	lsrs	r4, r3
 800396a:	0023      	movs	r3, r4
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	bdb0      	pop	{r4, r5, r7, pc}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	08006200 	.word	0x08006200

08003978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003980:	2313      	movs	r3, #19
 8003982:	18fb      	adds	r3, r7, r3
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003988:	2312      	movs	r3, #18
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	029b      	lsls	r3, r3, #10
 8003998:	4013      	ands	r3, r2
 800399a:	d100      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800399c:	e0ad      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399e:	2011      	movs	r0, #17
 80039a0:	183b      	adds	r3, r7, r0
 80039a2:	2200      	movs	r2, #0
 80039a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a6:	4b47      	ldr	r3, [pc, #284]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	055b      	lsls	r3, r3, #21
 80039ae:	4013      	ands	r3, r2
 80039b0:	d110      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b2:	4b44      	ldr	r3, [pc, #272]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b6:	4b43      	ldr	r3, [pc, #268]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039b8:	2180      	movs	r1, #128	; 0x80
 80039ba:	0549      	lsls	r1, r1, #21
 80039bc:	430a      	orrs	r2, r1
 80039be:	63da      	str	r2, [r3, #60]	; 0x3c
 80039c0:	4b40      	ldr	r3, [pc, #256]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	055b      	lsls	r3, r3, #21
 80039c8:	4013      	ands	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ce:	183b      	adds	r3, r7, r0
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039d4:	4b3c      	ldr	r3, [pc, #240]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4b3b      	ldr	r3, [pc, #236]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80039da:	2180      	movs	r1, #128	; 0x80
 80039dc:	0049      	lsls	r1, r1, #1
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039e2:	f7fe fd07 	bl	80023f4 <HAL_GetTick>
 80039e6:	0003      	movs	r3, r0
 80039e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039ea:	e00b      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ec:	f7fe fd02 	bl	80023f4 <HAL_GetTick>
 80039f0:	0002      	movs	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d904      	bls.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80039fa:	2313      	movs	r3, #19
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	2203      	movs	r2, #3
 8003a00:	701a      	strb	r2, [r3, #0]
        break;
 8003a02:	e005      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a04:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d0ed      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003a10:	2313      	movs	r3, #19
 8003a12:	18fb      	adds	r3, r7, r3
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d15e      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a1e:	23c0      	movs	r3, #192	; 0xc0
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4013      	ands	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d019      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d014      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a36:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3a:	4a24      	ldr	r2, [pc, #144]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a40:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a44:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a46:	2180      	movs	r1, #128	; 0x80
 8003a48:	0249      	lsls	r1, r1, #9
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a52:	4b1c      	ldr	r3, [pc, #112]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a54:	491e      	ldr	r1, [pc, #120]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2201      	movs	r2, #1
 8003a64:	4013      	ands	r3, r2
 8003a66:	d016      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fe fcc4 	bl	80023f4 <HAL_GetTick>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a70:	e00c      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a72:	f7fe fcbf 	bl	80023f4 <HAL_GetTick>
 8003a76:	0002      	movs	r2, r0
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d904      	bls.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003a82:	2313      	movs	r3, #19
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	2203      	movs	r2, #3
 8003a88:	701a      	strb	r2, [r3, #0]
            break;
 8003a8a:	e004      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a90:	2202      	movs	r2, #2
 8003a92:	4013      	ands	r3, r2
 8003a94:	d0ed      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003a96:	2313      	movs	r3, #19
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa0:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa4:	4a09      	ldr	r2, [pc, #36]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ab4:	e016      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ab6:	2312      	movs	r3, #18
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	2213      	movs	r2, #19
 8003abc:	18ba      	adds	r2, r7, r2
 8003abe:	7812      	ldrb	r2, [r2, #0]
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	e00f      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	fffffcff 	.word	0xfffffcff
 8003ad0:	fffeffff 	.word	0xfffeffff
 8003ad4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad8:	2312      	movs	r3, #18
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	2213      	movs	r2, #19
 8003ade:	18ba      	adds	r2, r7, r2
 8003ae0:	7812      	ldrb	r2, [r2, #0]
 8003ae2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ae4:	2311      	movs	r3, #17
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d105      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aee:	4bb6      	ldr	r3, [pc, #728]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003af2:	4bb5      	ldr	r3, [pc, #724]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003af4:	49b5      	ldr	r1, [pc, #724]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003af6:	400a      	ands	r2, r1
 8003af8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2201      	movs	r2, #1
 8003b00:	4013      	ands	r3, r2
 8003b02:	d009      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b04:	4bb0      	ldr	r3, [pc, #704]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	2203      	movs	r2, #3
 8003b0a:	4393      	bics	r3, r2
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	4bad      	ldr	r3, [pc, #692]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b14:	430a      	orrs	r2, r1
 8003b16:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d009      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b22:	4ba9      	ldr	r3, [pc, #676]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	220c      	movs	r2, #12
 8003b28:	4393      	bics	r3, r2
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	4ba5      	ldr	r3, [pc, #660]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b32:	430a      	orrs	r2, r1
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d009      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b40:	4ba1      	ldr	r3, [pc, #644]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b44:	2230      	movs	r2, #48	; 0x30
 8003b46:	4393      	bics	r3, r2
 8003b48:	0019      	movs	r1, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	4b9e      	ldr	r3, [pc, #632]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b50:	430a      	orrs	r2, r1
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2210      	movs	r2, #16
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d009      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b5e:	4b9a      	ldr	r3, [pc, #616]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	4a9b      	ldr	r2, [pc, #620]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	0019      	movs	r1, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	4b96      	ldr	r3, [pc, #600]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	015b      	lsls	r3, r3, #5
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d009      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003b7e:	4b92      	ldr	r3, [pc, #584]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	4a94      	ldr	r2, [pc, #592]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	0019      	movs	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	4b8e      	ldr	r3, [pc, #568]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d009      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b9e:	4b8a      	ldr	r3, [pc, #552]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba2:	4a8d      	ldr	r2, [pc, #564]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bac:	4b86      	ldr	r3, [pc, #536]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d009      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bbe:	4b82      	ldr	r3, [pc, #520]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc2:	4a86      	ldr	r2, [pc, #536]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	0019      	movs	r1, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bcc:	4b7e      	ldr	r3, [pc, #504]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bdc:	4b7a      	ldr	r3, [pc, #488]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	4a7f      	ldr	r2, [pc, #508]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	0019      	movs	r1, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	4b77      	ldr	r3, [pc, #476]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bec:	430a      	orrs	r2, r1
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2240      	movs	r2, #64	; 0x40
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bfa:	4b73      	ldr	r3, [pc, #460]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	4a79      	ldr	r2, [pc, #484]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	0019      	movs	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	4b6f      	ldr	r3, [pc, #444]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	2380      	movs	r3, #128	; 0x80
 8003c14:	01db      	lsls	r3, r3, #7
 8003c16:	4013      	ands	r3, r2
 8003c18:	d015      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c1a:	4b6b      	ldr	r3, [pc, #428]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	0899      	lsrs	r1, r3, #2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c26:	4b68      	ldr	r3, [pc, #416]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	05db      	lsls	r3, r3, #23
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d106      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c38:	4b63      	ldr	r3, [pc, #396]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	4b62      	ldr	r3, [pc, #392]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c3e:	2180      	movs	r1, #128	; 0x80
 8003c40:	0249      	lsls	r1, r1, #9
 8003c42:	430a      	orrs	r2, r1
 8003c44:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	031b      	lsls	r3, r3, #12
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c52:	4b5d      	ldr	r3, [pc, #372]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c56:	2240      	movs	r2, #64	; 0x40
 8003c58:	4393      	bics	r3, r2
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c60:	4b59      	ldr	r3, [pc, #356]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c62:	430a      	orrs	r2, r1
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	039b      	lsls	r3, r3, #14
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d016      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c72:	4b55      	ldr	r3, [pc, #340]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c76:	4a5c      	ldr	r2, [pc, #368]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c80:	4b51      	ldr	r3, [pc, #324]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c82:	430a      	orrs	r2, r1
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	03db      	lsls	r3, r3, #15
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d106      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c92:	4b4d      	ldr	r3, [pc, #308]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	4b4c      	ldr	r3, [pc, #304]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c98:	2180      	movs	r1, #128	; 0x80
 8003c9a:	0449      	lsls	r1, r1, #17
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	03db      	lsls	r3, r3, #15
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d016      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003cac:	4b46      	ldr	r3, [pc, #280]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb0:	4a4e      	ldr	r2, [pc, #312]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	0019      	movs	r1, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cba:	4b43      	ldr	r3, [pc, #268]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	045b      	lsls	r3, r3, #17
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d106      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003ccc:	4b3e      	ldr	r3, [pc, #248]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	4b3d      	ldr	r3, [pc, #244]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	0449      	lsls	r1, r1, #17
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d014      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003ce6:	4b38      	ldr	r3, [pc, #224]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	2203      	movs	r2, #3
 8003cec:	4393      	bics	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1a      	ldr	r2, [r3, #32]
 8003cf4:	4b34      	ldr	r3, [pc, #208]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d106      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d02:	4b31      	ldr	r3, [pc, #196]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d08:	2180      	movs	r1, #128	; 0x80
 8003d0a:	0249      	lsls	r1, r1, #9
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	019b      	lsls	r3, r3, #6
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d014      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003d1c:	4b2a      	ldr	r3, [pc, #168]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d20:	220c      	movs	r2, #12
 8003d22:	4393      	bics	r3, r2
 8003d24:	0019      	movs	r1, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d2a:	4b27      	ldr	r3, [pc, #156]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d106      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d38:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	0249      	lsls	r1, r1, #9
 8003d42:	430a      	orrs	r2, r1
 8003d44:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	045b      	lsls	r3, r3, #17
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d016      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d52:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	4a22      	ldr	r2, [pc, #136]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d60:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d62:	430a      	orrs	r2, r1
 8003d64:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	019b      	lsls	r3, r3, #6
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d106      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d72:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	4b14      	ldr	r3, [pc, #80]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d78:	2180      	movs	r1, #128	; 0x80
 8003d7a:	0449      	lsls	r1, r1, #17
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	2380      	movs	r3, #128	; 0x80
 8003d86:	049b      	lsls	r3, r3, #18
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d016      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	4a10      	ldr	r2, [pc, #64]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	0019      	movs	r1, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d106      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003db2:	2180      	movs	r1, #128	; 0x80
 8003db4:	0449      	lsls	r1, r1, #17
 8003db6:	430a      	orrs	r2, r1
 8003db8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003dba:	2312      	movs	r3, #18
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	781b      	ldrb	r3, [r3, #0]
}
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b006      	add	sp, #24
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	efffffff 	.word	0xefffffff
 8003dd0:	fffff3ff 	.word	0xfffff3ff
 8003dd4:	fffffcff 	.word	0xfffffcff
 8003dd8:	fff3ffff 	.word	0xfff3ffff
 8003ddc:	ffcfffff 	.word	0xffcfffff
 8003de0:	ffffcfff 	.word	0xffffcfff
 8003de4:	ffff3fff 	.word	0xffff3fff
 8003de8:	ffbfffff 	.word	0xffbfffff
 8003dec:	feffffff 	.word	0xfeffffff

08003df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e04a      	b.n	8003e98 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	223d      	movs	r2, #61	; 0x3d
 8003e06:	5c9b      	ldrb	r3, [r3, r2]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d107      	bne.n	8003e1e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	223c      	movs	r2, #60	; 0x3c
 8003e12:	2100      	movs	r1, #0
 8003e14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f7fe f907 	bl	800202c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	223d      	movs	r2, #61	; 0x3d
 8003e22:	2102      	movs	r1, #2
 8003e24:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	0019      	movs	r1, r3
 8003e30:	0010      	movs	r0, r2
 8003e32:	f000 fb47 	bl	80044c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2248      	movs	r2, #72	; 0x48
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	223e      	movs	r2, #62	; 0x3e
 8003e42:	2101      	movs	r1, #1
 8003e44:	5499      	strb	r1, [r3, r2]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	223f      	movs	r2, #63	; 0x3f
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	5499      	strb	r1, [r3, r2]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2240      	movs	r2, #64	; 0x40
 8003e52:	2101      	movs	r1, #1
 8003e54:	5499      	strb	r1, [r3, r2]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2241      	movs	r2, #65	; 0x41
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	5499      	strb	r1, [r3, r2]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2242      	movs	r2, #66	; 0x42
 8003e62:	2101      	movs	r1, #1
 8003e64:	5499      	strb	r1, [r3, r2]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2243      	movs	r2, #67	; 0x43
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2244      	movs	r2, #68	; 0x44
 8003e72:	2101      	movs	r1, #1
 8003e74:	5499      	strb	r1, [r3, r2]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2245      	movs	r2, #69	; 0x45
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	5499      	strb	r1, [r3, r2]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2246      	movs	r2, #70	; 0x46
 8003e82:	2101      	movs	r1, #1
 8003e84:	5499      	strb	r1, [r3, r2]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2247      	movs	r2, #71	; 0x47
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	223d      	movs	r2, #61	; 0x3d
 8003e92:	2101      	movs	r1, #1
 8003e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	0018      	movs	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b002      	add	sp, #8
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e04a      	b.n	8003f48 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	223d      	movs	r2, #61	; 0x3d
 8003eb6:	5c9b      	ldrb	r3, [r3, r2]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d107      	bne.n	8003ece <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	223c      	movs	r2, #60	; 0x3c
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f000 f841 	bl	8003f50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	223d      	movs	r2, #61	; 0x3d
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3304      	adds	r3, #4
 8003ede:	0019      	movs	r1, r3
 8003ee0:	0010      	movs	r0, r2
 8003ee2:	f000 faef 	bl	80044c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2248      	movs	r2, #72	; 0x48
 8003eea:	2101      	movs	r1, #1
 8003eec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	223e      	movs	r2, #62	; 0x3e
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	5499      	strb	r1, [r3, r2]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	223f      	movs	r2, #63	; 0x3f
 8003efa:	2101      	movs	r1, #1
 8003efc:	5499      	strb	r1, [r3, r2]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2240      	movs	r2, #64	; 0x40
 8003f02:	2101      	movs	r1, #1
 8003f04:	5499      	strb	r1, [r3, r2]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2241      	movs	r2, #65	; 0x41
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	5499      	strb	r1, [r3, r2]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2242      	movs	r2, #66	; 0x42
 8003f12:	2101      	movs	r1, #1
 8003f14:	5499      	strb	r1, [r3, r2]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2243      	movs	r2, #67	; 0x43
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2244      	movs	r2, #68	; 0x44
 8003f22:	2101      	movs	r1, #1
 8003f24:	5499      	strb	r1, [r3, r2]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2245      	movs	r2, #69	; 0x45
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	5499      	strb	r1, [r3, r2]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2246      	movs	r2, #70	; 0x46
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2247      	movs	r2, #71	; 0x47
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	223d      	movs	r2, #61	; 0x3d
 8003f42:	2101      	movs	r1, #1
 8003f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	0018      	movs	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f58:	46c0      	nop			; (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b002      	add	sp, #8
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d108      	bne.n	8003f82 <HAL_TIM_PWM_Start+0x22>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	223e      	movs	r2, #62	; 0x3e
 8003f74:	5c9b      	ldrb	r3, [r3, r2]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	1e5a      	subs	r2, r3, #1
 8003f7c:	4193      	sbcs	r3, r2
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	e037      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x92>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d108      	bne.n	8003f9a <HAL_TIM_PWM_Start+0x3a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	223f      	movs	r2, #63	; 0x3f
 8003f8c:	5c9b      	ldrb	r3, [r3, r2]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	1e5a      	subs	r2, r3, #1
 8003f94:	4193      	sbcs	r3, r2
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	e02b      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x92>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d108      	bne.n	8003fb2 <HAL_TIM_PWM_Start+0x52>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2240      	movs	r2, #64	; 0x40
 8003fa4:	5c9b      	ldrb	r3, [r3, r2]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	1e5a      	subs	r2, r3, #1
 8003fac:	4193      	sbcs	r3, r2
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	e01f      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x92>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b0c      	cmp	r3, #12
 8003fb6:	d108      	bne.n	8003fca <HAL_TIM_PWM_Start+0x6a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2241      	movs	r2, #65	; 0x41
 8003fbc:	5c9b      	ldrb	r3, [r3, r2]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	1e5a      	subs	r2, r3, #1
 8003fc4:	4193      	sbcs	r3, r2
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e013      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x92>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d108      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0x82>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2242      	movs	r2, #66	; 0x42
 8003fd4:	5c9b      	ldrb	r3, [r3, r2]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	1e5a      	subs	r2, r3, #1
 8003fdc:	4193      	sbcs	r3, r2
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	e007      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x92>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2243      	movs	r2, #67	; 0x43
 8003fe6:	5c9b      	ldrb	r3, [r3, r2]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	1e5a      	subs	r2, r3, #1
 8003fee:	4193      	sbcs	r3, r2
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e090      	b.n	800411c <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d104      	bne.n	800400a <HAL_TIM_PWM_Start+0xaa>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	223e      	movs	r2, #62	; 0x3e
 8004004:	2102      	movs	r1, #2
 8004006:	5499      	strb	r1, [r3, r2]
 8004008:	e023      	b.n	8004052 <HAL_TIM_PWM_Start+0xf2>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b04      	cmp	r3, #4
 800400e:	d104      	bne.n	800401a <HAL_TIM_PWM_Start+0xba>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	223f      	movs	r2, #63	; 0x3f
 8004014:	2102      	movs	r1, #2
 8004016:	5499      	strb	r1, [r3, r2]
 8004018:	e01b      	b.n	8004052 <HAL_TIM_PWM_Start+0xf2>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b08      	cmp	r3, #8
 800401e:	d104      	bne.n	800402a <HAL_TIM_PWM_Start+0xca>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2240      	movs	r2, #64	; 0x40
 8004024:	2102      	movs	r1, #2
 8004026:	5499      	strb	r1, [r3, r2]
 8004028:	e013      	b.n	8004052 <HAL_TIM_PWM_Start+0xf2>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b0c      	cmp	r3, #12
 800402e:	d104      	bne.n	800403a <HAL_TIM_PWM_Start+0xda>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2241      	movs	r2, #65	; 0x41
 8004034:	2102      	movs	r1, #2
 8004036:	5499      	strb	r1, [r3, r2]
 8004038:	e00b      	b.n	8004052 <HAL_TIM_PWM_Start+0xf2>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b10      	cmp	r3, #16
 800403e:	d104      	bne.n	800404a <HAL_TIM_PWM_Start+0xea>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2242      	movs	r2, #66	; 0x42
 8004044:	2102      	movs	r1, #2
 8004046:	5499      	strb	r1, [r3, r2]
 8004048:	e003      	b.n	8004052 <HAL_TIM_PWM_Start+0xf2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2243      	movs	r2, #67	; 0x43
 800404e:	2102      	movs	r1, #2
 8004050:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6839      	ldr	r1, [r7, #0]
 8004058:	2201      	movs	r2, #1
 800405a:	0018      	movs	r0, r3
 800405c:	f000 fe1c 	bl	8004c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a2f      	ldr	r2, [pc, #188]	; (8004124 <HAL_TIM_PWM_Start+0x1c4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00e      	beq.n	8004088 <HAL_TIM_PWM_Start+0x128>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2e      	ldr	r2, [pc, #184]	; (8004128 <HAL_TIM_PWM_Start+0x1c8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d009      	beq.n	8004088 <HAL_TIM_PWM_Start+0x128>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a2c      	ldr	r2, [pc, #176]	; (800412c <HAL_TIM_PWM_Start+0x1cc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d004      	beq.n	8004088 <HAL_TIM_PWM_Start+0x128>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a2b      	ldr	r2, [pc, #172]	; (8004130 <HAL_TIM_PWM_Start+0x1d0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d101      	bne.n	800408c <HAL_TIM_PWM_Start+0x12c>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <HAL_TIM_PWM_Start+0x12e>
 800408c:	2300      	movs	r3, #0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2180      	movs	r1, #128	; 0x80
 800409e:	0209      	lsls	r1, r1, #8
 80040a0:	430a      	orrs	r2, r1
 80040a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <HAL_TIM_PWM_Start+0x1c4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d014      	beq.n	80040d8 <HAL_TIM_PWM_Start+0x178>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	05db      	lsls	r3, r3, #23
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d00e      	beq.n	80040d8 <HAL_TIM_PWM_Start+0x178>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <HAL_TIM_PWM_Start+0x1d4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_TIM_PWM_Start+0x178>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1b      	ldr	r2, [pc, #108]	; (8004138 <HAL_TIM_PWM_Start+0x1d8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_TIM_PWM_Start+0x178>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a15      	ldr	r2, [pc, #84]	; (8004128 <HAL_TIM_PWM_Start+0x1c8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d116      	bne.n	8004106 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	4a17      	ldr	r2, [pc, #92]	; (800413c <HAL_TIM_PWM_Start+0x1dc>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b06      	cmp	r3, #6
 80040e8:	d016      	beq.n	8004118 <HAL_TIM_PWM_Start+0x1b8>
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	025b      	lsls	r3, r3, #9
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d011      	beq.n	8004118 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2101      	movs	r1, #1
 8004100:	430a      	orrs	r2, r1
 8004102:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004104:	e008      	b.n	8004118 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2101      	movs	r1, #1
 8004112:	430a      	orrs	r2, r1
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	e000      	b.n	800411a <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004118:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	b004      	add	sp, #16
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40012c00 	.word	0x40012c00
 8004128:	40014000 	.word	0x40014000
 800412c:	40014400 	.word	0x40014400
 8004130:	40014800 	.word	0x40014800
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	00010007 	.word	0x00010007

08004140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	223c      	movs	r2, #60	; 0x3c
 8004150:	5c9b      	ldrb	r3, [r3, r2]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004156:	2302      	movs	r3, #2
 8004158:	e0df      	b.n	800431a <HAL_TIM_PWM_ConfigChannel+0x1da>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	223c      	movs	r2, #60	; 0x3c
 800415e:	2101      	movs	r1, #1
 8004160:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b14      	cmp	r3, #20
 8004166:	d900      	bls.n	800416a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004168:	e0d1      	b.n	800430e <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	009a      	lsls	r2, r3, #2
 800416e:	4b6d      	ldr	r3, [pc, #436]	; (8004324 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8004170:	18d3      	adds	r3, r2, r3
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	0011      	movs	r1, r2
 800417e:	0018      	movs	r0, r3
 8004180:	f000 fa2a 	bl	80045d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2108      	movs	r1, #8
 8004190:	430a      	orrs	r2, r1
 8004192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2104      	movs	r1, #4
 80041a0:	438a      	bics	r2, r1
 80041a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6999      	ldr	r1, [r3, #24]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	619a      	str	r2, [r3, #24]
      break;
 80041b6:	e0ab      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	0011      	movs	r1, r2
 80041c0:	0018      	movs	r0, r3
 80041c2:	f000 fa93 	bl	80046ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699a      	ldr	r2, [r3, #24]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2180      	movs	r1, #128	; 0x80
 80041d2:	0109      	lsls	r1, r1, #4
 80041d4:	430a      	orrs	r2, r1
 80041d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4951      	ldr	r1, [pc, #324]	; (8004328 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6999      	ldr	r1, [r3, #24]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	021a      	lsls	r2, r3, #8
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	619a      	str	r2, [r3, #24]
      break;
 80041fc:	e088      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	0011      	movs	r1, r2
 8004206:	0018      	movs	r0, r3
 8004208:	f000 faf4 	bl	80047f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2108      	movs	r1, #8
 8004218:	430a      	orrs	r2, r1
 800421a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69da      	ldr	r2, [r3, #28]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2104      	movs	r1, #4
 8004228:	438a      	bics	r2, r1
 800422a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69d9      	ldr	r1, [r3, #28]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	61da      	str	r2, [r3, #28]
      break;
 800423e:	e067      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	0011      	movs	r1, r2
 8004248:	0018      	movs	r0, r3
 800424a:	f000 fb5b 	bl	8004904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2180      	movs	r1, #128	; 0x80
 800425a:	0109      	lsls	r1, r1, #4
 800425c:	430a      	orrs	r2, r1
 800425e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	492f      	ldr	r1, [pc, #188]	; (8004328 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800426c:	400a      	ands	r2, r1
 800426e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69d9      	ldr	r1, [r3, #28]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	021a      	lsls	r2, r3, #8
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	61da      	str	r2, [r3, #28]
      break;
 8004284:	e044      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	0011      	movs	r1, r2
 800428e:	0018      	movs	r0, r3
 8004290:	f000 fba2 	bl	80049d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2108      	movs	r1, #8
 80042a0:	430a      	orrs	r2, r1
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2104      	movs	r1, #4
 80042b0:	438a      	bics	r2, r1
 80042b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042c6:	e023      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	0011      	movs	r1, r2
 80042d0:	0018      	movs	r0, r3
 80042d2:	f000 fbe1 	bl	8004a98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2180      	movs	r1, #128	; 0x80
 80042e2:	0109      	lsls	r1, r1, #4
 80042e4:	430a      	orrs	r2, r1
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	490d      	ldr	r1, [pc, #52]	; (8004328 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80042f4:	400a      	ands	r2, r1
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	021a      	lsls	r2, r3, #8
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800430c:	e000      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800430e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	223c      	movs	r2, #60	; 0x3c
 8004314:	2100      	movs	r1, #0
 8004316:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	0018      	movs	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	b004      	add	sp, #16
 8004320:	bd80      	pop	{r7, pc}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	08006220 	.word	0x08006220
 8004328:	fffffbff 	.word	0xfffffbff

0800432c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	223c      	movs	r2, #60	; 0x3c
 800433a:	5c9b      	ldrb	r3, [r3, r2]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_TIM_ConfigClockSource+0x18>
 8004340:	2302      	movs	r3, #2
 8004342:	e0b7      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x188>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	223c      	movs	r2, #60	; 0x3c
 8004348:	2101      	movs	r1, #1
 800434a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	223d      	movs	r2, #61	; 0x3d
 8004350:	2102      	movs	r1, #2
 8004352:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a57      	ldr	r2, [pc, #348]	; (80044bc <HAL_TIM_ConfigClockSource+0x190>)
 8004360:	4013      	ands	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a56      	ldr	r2, [pc, #344]	; (80044c0 <HAL_TIM_ConfigClockSource+0x194>)
 8004368:	4013      	ands	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2280      	movs	r2, #128	; 0x80
 800437a:	0192      	lsls	r2, r2, #6
 800437c:	4293      	cmp	r3, r2
 800437e:	d040      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0xd6>
 8004380:	2280      	movs	r2, #128	; 0x80
 8004382:	0192      	lsls	r2, r2, #6
 8004384:	4293      	cmp	r3, r2
 8004386:	d900      	bls.n	800438a <HAL_TIM_ConfigClockSource+0x5e>
 8004388:	e088      	b.n	800449c <HAL_TIM_ConfigClockSource+0x170>
 800438a:	2280      	movs	r2, #128	; 0x80
 800438c:	0152      	lsls	r2, r2, #5
 800438e:	4293      	cmp	r3, r2
 8004390:	d100      	bne.n	8004394 <HAL_TIM_ConfigClockSource+0x68>
 8004392:	e085      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x174>
 8004394:	2280      	movs	r2, #128	; 0x80
 8004396:	0152      	lsls	r2, r2, #5
 8004398:	4293      	cmp	r3, r2
 800439a:	d900      	bls.n	800439e <HAL_TIM_ConfigClockSource+0x72>
 800439c:	e07e      	b.n	800449c <HAL_TIM_ConfigClockSource+0x170>
 800439e:	2b70      	cmp	r3, #112	; 0x70
 80043a0:	d018      	beq.n	80043d4 <HAL_TIM_ConfigClockSource+0xa8>
 80043a2:	d900      	bls.n	80043a6 <HAL_TIM_ConfigClockSource+0x7a>
 80043a4:	e07a      	b.n	800449c <HAL_TIM_ConfigClockSource+0x170>
 80043a6:	2b60      	cmp	r3, #96	; 0x60
 80043a8:	d04f      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x11e>
 80043aa:	d900      	bls.n	80043ae <HAL_TIM_ConfigClockSource+0x82>
 80043ac:	e076      	b.n	800449c <HAL_TIM_ConfigClockSource+0x170>
 80043ae:	2b50      	cmp	r3, #80	; 0x50
 80043b0:	d03b      	beq.n	800442a <HAL_TIM_ConfigClockSource+0xfe>
 80043b2:	d900      	bls.n	80043b6 <HAL_TIM_ConfigClockSource+0x8a>
 80043b4:	e072      	b.n	800449c <HAL_TIM_ConfigClockSource+0x170>
 80043b6:	2b40      	cmp	r3, #64	; 0x40
 80043b8:	d057      	beq.n	800446a <HAL_TIM_ConfigClockSource+0x13e>
 80043ba:	d900      	bls.n	80043be <HAL_TIM_ConfigClockSource+0x92>
 80043bc:	e06e      	b.n	800449c <HAL_TIM_ConfigClockSource+0x170>
 80043be:	2b30      	cmp	r3, #48	; 0x30
 80043c0:	d063      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x15e>
 80043c2:	d86b      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x170>
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d060      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x15e>
 80043c8:	d868      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x170>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d05d      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x15e>
 80043ce:	2b10      	cmp	r3, #16
 80043d0:	d05b      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80043d2:	e063      	b.n	800449c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6899      	ldr	r1, [r3, #8]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f000 fc38 	bl	8004c58 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2277      	movs	r2, #119	; 0x77
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	609a      	str	r2, [r3, #8]
      break;
 8004400:	e04f      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6899      	ldr	r1, [r3, #8]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f000 fc21 	bl	8004c58 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2180      	movs	r1, #128	; 0x80
 8004422:	01c9      	lsls	r1, r1, #7
 8004424:	430a      	orrs	r2, r1
 8004426:	609a      	str	r2, [r3, #8]
      break;
 8004428:	e03b      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6859      	ldr	r1, [r3, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	001a      	movs	r2, r3
 8004438:	f000 fb92 	bl	8004b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2150      	movs	r1, #80	; 0x50
 8004442:	0018      	movs	r0, r3
 8004444:	f000 fbec 	bl	8004c20 <TIM_ITRx_SetConfig>
      break;
 8004448:	e02b      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6859      	ldr	r1, [r3, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	001a      	movs	r2, r3
 8004458:	f000 fbb0 	bl	8004bbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2160      	movs	r1, #96	; 0x60
 8004462:	0018      	movs	r0, r3
 8004464:	f000 fbdc 	bl	8004c20 <TIM_ITRx_SetConfig>
      break;
 8004468:	e01b      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6859      	ldr	r1, [r3, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	001a      	movs	r2, r3
 8004478:	f000 fb72 	bl	8004b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2140      	movs	r1, #64	; 0x40
 8004482:	0018      	movs	r0, r3
 8004484:	f000 fbcc 	bl	8004c20 <TIM_ITRx_SetConfig>
      break;
 8004488:	e00b      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	0019      	movs	r1, r3
 8004494:	0010      	movs	r0, r2
 8004496:	f000 fbc3 	bl	8004c20 <TIM_ITRx_SetConfig>
        break;
 800449a:	e002      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800449c:	46c0      	nop			; (mov r8, r8)
 800449e:	e000      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80044a0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	223d      	movs	r2, #61	; 0x3d
 80044a6:	2101      	movs	r1, #1
 80044a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	223c      	movs	r2, #60	; 0x3c
 80044ae:	2100      	movs	r1, #0
 80044b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b004      	add	sp, #16
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	ffceff88 	.word	0xffceff88
 80044c0:	ffff00ff 	.word	0xffff00ff

080044c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a38      	ldr	r2, [pc, #224]	; (80045b8 <TIM_Base_SetConfig+0xf4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00c      	beq.n	80044f6 <TIM_Base_SetConfig+0x32>
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	2380      	movs	r3, #128	; 0x80
 80044e0:	05db      	lsls	r3, r3, #23
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d007      	beq.n	80044f6 <TIM_Base_SetConfig+0x32>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a34      	ldr	r2, [pc, #208]	; (80045bc <TIM_Base_SetConfig+0xf8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d003      	beq.n	80044f6 <TIM_Base_SetConfig+0x32>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a33      	ldr	r2, [pc, #204]	; (80045c0 <TIM_Base_SetConfig+0xfc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d108      	bne.n	8004508 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2270      	movs	r2, #112	; 0x70
 80044fa:	4393      	bics	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a2b      	ldr	r2, [pc, #172]	; (80045b8 <TIM_Base_SetConfig+0xf4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d01c      	beq.n	800454a <TIM_Base_SetConfig+0x86>
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	2380      	movs	r3, #128	; 0x80
 8004514:	05db      	lsls	r3, r3, #23
 8004516:	429a      	cmp	r2, r3
 8004518:	d017      	beq.n	800454a <TIM_Base_SetConfig+0x86>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a27      	ldr	r2, [pc, #156]	; (80045bc <TIM_Base_SetConfig+0xf8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <TIM_Base_SetConfig+0x86>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a26      	ldr	r2, [pc, #152]	; (80045c0 <TIM_Base_SetConfig+0xfc>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00f      	beq.n	800454a <TIM_Base_SetConfig+0x86>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a25      	ldr	r2, [pc, #148]	; (80045c4 <TIM_Base_SetConfig+0x100>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00b      	beq.n	800454a <TIM_Base_SetConfig+0x86>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a24      	ldr	r2, [pc, #144]	; (80045c8 <TIM_Base_SetConfig+0x104>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d007      	beq.n	800454a <TIM_Base_SetConfig+0x86>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a23      	ldr	r2, [pc, #140]	; (80045cc <TIM_Base_SetConfig+0x108>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d003      	beq.n	800454a <TIM_Base_SetConfig+0x86>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a22      	ldr	r2, [pc, #136]	; (80045d0 <TIM_Base_SetConfig+0x10c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d108      	bne.n	800455c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4a21      	ldr	r2, [pc, #132]	; (80045d4 <TIM_Base_SetConfig+0x110>)
 800454e:	4013      	ands	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2280      	movs	r2, #128	; 0x80
 8004560:	4393      	bics	r3, r2
 8004562:	001a      	movs	r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <TIM_Base_SetConfig+0xf4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00b      	beq.n	80045a2 <TIM_Base_SetConfig+0xde>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a0e      	ldr	r2, [pc, #56]	; (80045c8 <TIM_Base_SetConfig+0x104>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d007      	beq.n	80045a2 <TIM_Base_SetConfig+0xde>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a0d      	ldr	r2, [pc, #52]	; (80045cc <TIM_Base_SetConfig+0x108>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d003      	beq.n	80045a2 <TIM_Base_SetConfig+0xde>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a0c      	ldr	r2, [pc, #48]	; (80045d0 <TIM_Base_SetConfig+0x10c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d103      	bne.n	80045aa <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	615a      	str	r2, [r3, #20]
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b004      	add	sp, #16
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40012c00 	.word	0x40012c00
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	40002000 	.word	0x40002000
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800
 80045d4:	fffffcff 	.word	0xfffffcff

080045d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	2201      	movs	r2, #1
 80045e8:	4393      	bics	r3, r2
 80045ea:	001a      	movs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a32      	ldr	r2, [pc, #200]	; (80046d0 <TIM_OC1_SetConfig+0xf8>)
 8004606:	4013      	ands	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2203      	movs	r2, #3
 800460e:	4393      	bics	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2202      	movs	r2, #2
 8004620:	4393      	bics	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a28      	ldr	r2, [pc, #160]	; (80046d4 <TIM_OC1_SetConfig+0xfc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00b      	beq.n	800464e <TIM_OC1_SetConfig+0x76>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a27      	ldr	r2, [pc, #156]	; (80046d8 <TIM_OC1_SetConfig+0x100>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <TIM_OC1_SetConfig+0x76>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a26      	ldr	r2, [pc, #152]	; (80046dc <TIM_OC1_SetConfig+0x104>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_OC1_SetConfig+0x76>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a25      	ldr	r2, [pc, #148]	; (80046e0 <TIM_OC1_SetConfig+0x108>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d10c      	bne.n	8004668 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2208      	movs	r2, #8
 8004652:	4393      	bics	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2204      	movs	r2, #4
 8004664:	4393      	bics	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a1a      	ldr	r2, [pc, #104]	; (80046d4 <TIM_OC1_SetConfig+0xfc>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00b      	beq.n	8004688 <TIM_OC1_SetConfig+0xb0>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a19      	ldr	r2, [pc, #100]	; (80046d8 <TIM_OC1_SetConfig+0x100>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d007      	beq.n	8004688 <TIM_OC1_SetConfig+0xb0>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a18      	ldr	r2, [pc, #96]	; (80046dc <TIM_OC1_SetConfig+0x104>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <TIM_OC1_SetConfig+0xb0>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <TIM_OC1_SetConfig+0x108>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d111      	bne.n	80046ac <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	4a16      	ldr	r2, [pc, #88]	; (80046e4 <TIM_OC1_SetConfig+0x10c>)
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4a15      	ldr	r2, [pc, #84]	; (80046e8 <TIM_OC1_SetConfig+0x110>)
 8004694:	4013      	ands	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b006      	add	sp, #24
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	fffeff8f 	.word	0xfffeff8f
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40014000 	.word	0x40014000
 80046dc:	40014400 	.word	0x40014400
 80046e0:	40014800 	.word	0x40014800
 80046e4:	fffffeff 	.word	0xfffffeff
 80046e8:	fffffdff 	.word	0xfffffdff

080046ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	2210      	movs	r2, #16
 80046fc:	4393      	bics	r3, r2
 80046fe:	001a      	movs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a2e      	ldr	r2, [pc, #184]	; (80047d4 <TIM_OC2_SetConfig+0xe8>)
 800471a:	4013      	ands	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a2d      	ldr	r2, [pc, #180]	; (80047d8 <TIM_OC2_SetConfig+0xec>)
 8004722:	4013      	ands	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2220      	movs	r2, #32
 8004736:	4393      	bics	r3, r2
 8004738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a24      	ldr	r2, [pc, #144]	; (80047dc <TIM_OC2_SetConfig+0xf0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d10d      	bne.n	800476a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2280      	movs	r2, #128	; 0x80
 8004752:	4393      	bics	r3, r2
 8004754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2240      	movs	r2, #64	; 0x40
 8004766:	4393      	bics	r3, r2
 8004768:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <TIM_OC2_SetConfig+0xf0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00b      	beq.n	800478a <TIM_OC2_SetConfig+0x9e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a1a      	ldr	r2, [pc, #104]	; (80047e0 <TIM_OC2_SetConfig+0xf4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d007      	beq.n	800478a <TIM_OC2_SetConfig+0x9e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <TIM_OC2_SetConfig+0xf8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_OC2_SetConfig+0x9e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <TIM_OC2_SetConfig+0xfc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d113      	bne.n	80047b2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	4a17      	ldr	r2, [pc, #92]	; (80047ec <TIM_OC2_SetConfig+0x100>)
 800478e:	4013      	ands	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	4a16      	ldr	r2, [pc, #88]	; (80047f0 <TIM_OC2_SetConfig+0x104>)
 8004796:	4013      	ands	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	621a      	str	r2, [r3, #32]
}
 80047cc:	46c0      	nop			; (mov r8, r8)
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b006      	add	sp, #24
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	feff8fff 	.word	0xfeff8fff
 80047d8:	fffffcff 	.word	0xfffffcff
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40014000 	.word	0x40014000
 80047e4:	40014400 	.word	0x40014400
 80047e8:	40014800 	.word	0x40014800
 80047ec:	fffffbff 	.word	0xfffffbff
 80047f0:	fffff7ff 	.word	0xfffff7ff

080047f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	4a35      	ldr	r2, [pc, #212]	; (80048d8 <TIM_OC3_SetConfig+0xe4>)
 8004804:	401a      	ands	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a2f      	ldr	r2, [pc, #188]	; (80048dc <TIM_OC3_SetConfig+0xe8>)
 8004820:	4013      	ands	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2203      	movs	r2, #3
 8004828:	4393      	bics	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	4a29      	ldr	r2, [pc, #164]	; (80048e0 <TIM_OC3_SetConfig+0xec>)
 800483a:	4013      	ands	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a25      	ldr	r2, [pc, #148]	; (80048e4 <TIM_OC3_SetConfig+0xf0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d10d      	bne.n	800486e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	4a24      	ldr	r2, [pc, #144]	; (80048e8 <TIM_OC3_SetConfig+0xf4>)
 8004856:	4013      	ands	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	4a20      	ldr	r2, [pc, #128]	; (80048ec <TIM_OC3_SetConfig+0xf8>)
 800486a:	4013      	ands	r3, r2
 800486c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a1c      	ldr	r2, [pc, #112]	; (80048e4 <TIM_OC3_SetConfig+0xf0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00b      	beq.n	800488e <TIM_OC3_SetConfig+0x9a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a1d      	ldr	r2, [pc, #116]	; (80048f0 <TIM_OC3_SetConfig+0xfc>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d007      	beq.n	800488e <TIM_OC3_SetConfig+0x9a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a1c      	ldr	r2, [pc, #112]	; (80048f4 <TIM_OC3_SetConfig+0x100>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d003      	beq.n	800488e <TIM_OC3_SetConfig+0x9a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a1b      	ldr	r2, [pc, #108]	; (80048f8 <TIM_OC3_SetConfig+0x104>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d113      	bne.n	80048b6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	4a1a      	ldr	r2, [pc, #104]	; (80048fc <TIM_OC3_SetConfig+0x108>)
 8004892:	4013      	ands	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4a19      	ldr	r2, [pc, #100]	; (8004900 <TIM_OC3_SetConfig+0x10c>)
 800489a:	4013      	ands	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	621a      	str	r2, [r3, #32]
}
 80048d0:	46c0      	nop			; (mov r8, r8)
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b006      	add	sp, #24
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	fffffeff 	.word	0xfffffeff
 80048dc:	fffeff8f 	.word	0xfffeff8f
 80048e0:	fffffdff 	.word	0xfffffdff
 80048e4:	40012c00 	.word	0x40012c00
 80048e8:	fffff7ff 	.word	0xfffff7ff
 80048ec:	fffffbff 	.word	0xfffffbff
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40014400 	.word	0x40014400
 80048f8:	40014800 	.word	0x40014800
 80048fc:	ffffefff 	.word	0xffffefff
 8004900:	ffffdfff 	.word	0xffffdfff

08004904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	4a28      	ldr	r2, [pc, #160]	; (80049b4 <TIM_OC4_SetConfig+0xb0>)
 8004914:	401a      	ands	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a22      	ldr	r2, [pc, #136]	; (80049b8 <TIM_OC4_SetConfig+0xb4>)
 8004930:	4013      	ands	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4a21      	ldr	r2, [pc, #132]	; (80049bc <TIM_OC4_SetConfig+0xb8>)
 8004938:	4013      	ands	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4a1d      	ldr	r2, [pc, #116]	; (80049c0 <TIM_OC4_SetConfig+0xbc>)
 800494c:	4013      	ands	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	031b      	lsls	r3, r3, #12
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <TIM_OC4_SetConfig+0xc0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00b      	beq.n	800497c <TIM_OC4_SetConfig+0x78>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <TIM_OC4_SetConfig+0xc4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d007      	beq.n	800497c <TIM_OC4_SetConfig+0x78>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a17      	ldr	r2, [pc, #92]	; (80049cc <TIM_OC4_SetConfig+0xc8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_OC4_SetConfig+0x78>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a16      	ldr	r2, [pc, #88]	; (80049d0 <TIM_OC4_SetConfig+0xcc>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d109      	bne.n	8004990 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	4a15      	ldr	r2, [pc, #84]	; (80049d4 <TIM_OC4_SetConfig+0xd0>)
 8004980:	4013      	ands	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	019b      	lsls	r3, r3, #6
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	621a      	str	r2, [r3, #32]
}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	46bd      	mov	sp, r7
 80049ae:	b006      	add	sp, #24
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	ffffefff 	.word	0xffffefff
 80049b8:	feff8fff 	.word	0xfeff8fff
 80049bc:	fffffcff 	.word	0xfffffcff
 80049c0:	ffffdfff 	.word	0xffffdfff
 80049c4:	40012c00 	.word	0x40012c00
 80049c8:	40014000 	.word	0x40014000
 80049cc:	40014400 	.word	0x40014400
 80049d0:	40014800 	.word	0x40014800
 80049d4:	ffffbfff 	.word	0xffffbfff

080049d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <TIM_OC5_SetConfig+0xa4>)
 80049e8:	401a      	ands	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a1f      	ldr	r2, [pc, #124]	; (8004a80 <TIM_OC5_SetConfig+0xa8>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4a1b      	ldr	r2, [pc, #108]	; (8004a84 <TIM_OC5_SetConfig+0xac>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	041b      	lsls	r3, r3, #16
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a17      	ldr	r2, [pc, #92]	; (8004a88 <TIM_OC5_SetConfig+0xb0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00b      	beq.n	8004a46 <TIM_OC5_SetConfig+0x6e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a16      	ldr	r2, [pc, #88]	; (8004a8c <TIM_OC5_SetConfig+0xb4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d007      	beq.n	8004a46 <TIM_OC5_SetConfig+0x6e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a15      	ldr	r2, [pc, #84]	; (8004a90 <TIM_OC5_SetConfig+0xb8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d003      	beq.n	8004a46 <TIM_OC5_SetConfig+0x6e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a14      	ldr	r2, [pc, #80]	; (8004a94 <TIM_OC5_SetConfig+0xbc>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d109      	bne.n	8004a5a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	4a0c      	ldr	r2, [pc, #48]	; (8004a7c <TIM_OC5_SetConfig+0xa4>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	621a      	str	r2, [r3, #32]
}
 8004a74:	46c0      	nop			; (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b006      	add	sp, #24
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	fffeffff 	.word	0xfffeffff
 8004a80:	fffeff8f 	.word	0xfffeff8f
 8004a84:	fffdffff 	.word	0xfffdffff
 8004a88:	40012c00 	.word	0x40012c00
 8004a8c:	40014000 	.word	0x40014000
 8004a90:	40014400 	.word	0x40014400
 8004a94:	40014800 	.word	0x40014800

08004a98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	4a26      	ldr	r2, [pc, #152]	; (8004b40 <TIM_OC6_SetConfig+0xa8>)
 8004aa8:	401a      	ands	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a20      	ldr	r2, [pc, #128]	; (8004b44 <TIM_OC6_SetConfig+0xac>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <TIM_OC6_SetConfig+0xb0>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	051b      	lsls	r3, r3, #20
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <TIM_OC6_SetConfig+0xb4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00b      	beq.n	8004b08 <TIM_OC6_SetConfig+0x70>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <TIM_OC6_SetConfig+0xb8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d007      	beq.n	8004b08 <TIM_OC6_SetConfig+0x70>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a16      	ldr	r2, [pc, #88]	; (8004b54 <TIM_OC6_SetConfig+0xbc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d003      	beq.n	8004b08 <TIM_OC6_SetConfig+0x70>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a15      	ldr	r2, [pc, #84]	; (8004b58 <TIM_OC6_SetConfig+0xc0>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d109      	bne.n	8004b1c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	4a14      	ldr	r2, [pc, #80]	; (8004b5c <TIM_OC6_SetConfig+0xc4>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	029b      	lsls	r3, r3, #10
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	621a      	str	r2, [r3, #32]
}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b006      	add	sp, #24
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	ffefffff 	.word	0xffefffff
 8004b44:	feff8fff 	.word	0xfeff8fff
 8004b48:	ffdfffff 	.word	0xffdfffff
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800
 8004b5c:	fffbffff 	.word	0xfffbffff

08004b60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	2201      	movs	r2, #1
 8004b78:	4393      	bics	r3, r2
 8004b7a:	001a      	movs	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	22f0      	movs	r2, #240	; 0xf0
 8004b8a:	4393      	bics	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	220a      	movs	r2, #10
 8004b9c:	4393      	bics	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	621a      	str	r2, [r3, #32]
}
 8004bb4:	46c0      	nop			; (mov r8, r8)
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b006      	add	sp, #24
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	2210      	movs	r2, #16
 8004bce:	4393      	bics	r3, r2
 8004bd0:	001a      	movs	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	4a0d      	ldr	r2, [pc, #52]	; (8004c1c <TIM_TI2_ConfigInputStage+0x60>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	031b      	lsls	r3, r3, #12
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	22a0      	movs	r2, #160	; 0xa0
 8004bf8:	4393      	bics	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	621a      	str	r2, [r3, #32]
}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b006      	add	sp, #24
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	ffff0fff 	.word	0xffff0fff

08004c20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a08      	ldr	r2, [pc, #32]	; (8004c54 <TIM_ITRx_SetConfig+0x34>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	2207      	movs	r2, #7
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	609a      	str	r2, [r3, #8]
}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b004      	add	sp, #16
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	ffcfff8f 	.word	0xffcfff8f

08004c58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <TIM_ETR_SetConfig+0x3c>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	021a      	lsls	r2, r3, #8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	609a      	str	r2, [r3, #8]
}
 8004c8c:	46c0      	nop			; (mov r8, r8)
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b006      	add	sp, #24
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	ffff00ff 	.word	0xffff00ff

08004c98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	221f      	movs	r2, #31
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2201      	movs	r2, #1
 8004cac:	409a      	lsls	r2, r3
 8004cae:	0013      	movs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	43d2      	mvns	r2, r2
 8004cba:	401a      	ands	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a1a      	ldr	r2, [r3, #32]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	211f      	movs	r1, #31
 8004cc8:	400b      	ands	r3, r1
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	4099      	lsls	r1, r3
 8004cce:	000b      	movs	r3, r1
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b006      	add	sp, #24
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	223c      	movs	r2, #60	; 0x3c
 8004cee:	5c9b      	ldrb	r3, [r3, r2]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e05a      	b.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	223c      	movs	r2, #60	; 0x3c
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	223d      	movs	r2, #61	; 0x3d
 8004d04:	2102      	movs	r1, #2
 8004d06:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a26      	ldr	r2, [pc, #152]	; (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d108      	bne.n	8004d34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4a25      	ldr	r2, [pc, #148]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2270      	movs	r2, #112	; 0x70
 8004d38:	4393      	bics	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a19      	ldr	r2, [pc, #100]	; (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d014      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	2380      	movs	r3, #128	; 0x80
 8004d5e:	05db      	lsls	r3, r3, #23
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d00e      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a15      	ldr	r2, [pc, #84]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d009      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a14      	ldr	r2, [pc, #80]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a12      	ldr	r2, [pc, #72]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d10c      	bne.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2280      	movs	r2, #128	; 0x80
 8004d86:	4393      	bics	r3, r2
 8004d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	223d      	movs	r2, #61	; 0x3d
 8004da0:	2101      	movs	r1, #1
 8004da2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	223c      	movs	r2, #60	; 0x3c
 8004da8:	2100      	movs	r1, #0
 8004daa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	0018      	movs	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b004      	add	sp, #16
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	ff0fffff 	.word	0xff0fffff
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800
 8004dc8:	40014000 	.word	0x40014000

08004dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e046      	b.n	8004e6c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2284      	movs	r2, #132	; 0x84
 8004de2:	589b      	ldr	r3, [r3, r2]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d107      	bne.n	8004df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2280      	movs	r2, #128	; 0x80
 8004dec:	2100      	movs	r1, #0
 8004dee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	0018      	movs	r0, r3
 8004df4:	f7fd f9a0 	bl	8002138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2284      	movs	r2, #132	; 0x84
 8004dfc:	2124      	movs	r1, #36	; 0x24
 8004dfe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	438a      	bics	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	0018      	movs	r0, r3
 8004e14:	f000 f8c4 	bl	8004fa0 <UART_SetConfig>
 8004e18:	0003      	movs	r3, r0
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e024      	b.n	8004e6c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f000 fc0f 	bl	8005650 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	490d      	ldr	r1, [pc, #52]	; (8004e74 <HAL_UART_Init+0xa8>)
 8004e3e:	400a      	ands	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	212a      	movs	r1, #42	; 0x2a
 8004e4e:	438a      	bics	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	0018      	movs	r0, r3
 8004e66:	f000 fca7 	bl	80057b8 <UART_CheckIdleState>
 8004e6a:	0003      	movs	r3, r0
}
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b002      	add	sp, #8
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	ffffb7ff 	.word	0xffffb7ff

08004e78 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	1dbb      	adds	r3, r7, #6
 8004e84:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2288      	movs	r2, #136	; 0x88
 8004e8a:	589b      	ldr	r3, [r3, r2]
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d15a      	bne.n	8004f46 <HAL_UART_Receive_DMA+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_UART_Receive_DMA+0x26>
 8004e96:	1dbb      	adds	r3, r7, #6
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e052      	b.n	8004f48 <HAL_UART_Receive_DMA+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	2380      	movs	r3, #128	; 0x80
 8004ea8:	015b      	lsls	r3, r3, #5
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d109      	bne.n	8004ec2 <HAL_UART_Receive_DMA+0x4a>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d105      	bne.n	8004ec2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d001      	beq.n	8004ec2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e042      	b.n	8004f48 <HAL_UART_Receive_DMA+0xd0>
      }
    }

    __HAL_LOCK(huart);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2280      	movs	r2, #128	; 0x80
 8004ec6:	5c9b      	ldrb	r3, [r3, r2]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_UART_Receive_DMA+0x58>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e03b      	b.n	8004f48 <HAL_UART_Receive_DMA+0xd0>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2280      	movs	r2, #128	; 0x80
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <HAL_UART_Receive_DMA+0xd8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d025      	beq.n	8004f34 <HAL_UART_Receive_DMA+0xbc>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a19      	ldr	r2, [pc, #100]	; (8004f54 <HAL_UART_Receive_DMA+0xdc>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d020      	beq.n	8004f34 <HAL_UART_Receive_DMA+0xbc>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	041b      	lsls	r3, r3, #16
 8004efc:	4013      	ands	r3, r2
 8004efe:	d019      	beq.n	8004f34 <HAL_UART_Receive_DMA+0xbc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f00:	f3ef 8310 	mrs	r3, PRIMASK
 8004f04:	613b      	str	r3, [r7, #16]
  return(result);
 8004f06:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f08:	61fb      	str	r3, [r7, #28]
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f383 8810 	msr	PRIMASK, r3
}
 8004f14:	46c0      	nop			; (mov r8, r8)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2180      	movs	r1, #128	; 0x80
 8004f22:	04c9      	lsls	r1, r1, #19
 8004f24:	430a      	orrs	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	f383 8810 	msr	PRIMASK, r3
}
 8004f32:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004f34:	1dbb      	adds	r3, r7, #6
 8004f36:	881a      	ldrh	r2, [r3, #0]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f000 fd4d 	bl	80059dc <UART_Start_Receive_DMA>
 8004f42:	0003      	movs	r3, r0
 8004f44:	e000      	b.n	8004f48 <HAL_UART_Receive_DMA+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8004f46:	2302      	movs	r3, #2
  }
}
 8004f48:	0018      	movs	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b008      	add	sp, #32
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40008000 	.word	0x40008000
 8004f54:	40008400 	.word	0x40008400

08004f58 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004f60:	46c0      	nop			; (mov r8, r8)
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b002      	add	sp, #8
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f70:	46c0      	nop			; (mov r8, r8)
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b002      	add	sp, #8
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f80:	46c0      	nop			; (mov r8, r8)
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b002      	add	sp, #8
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	000a      	movs	r2, r1
 8004f92:	1cbb      	adds	r3, r7, #2
 8004f94:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	b002      	add	sp, #8
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa0:	b5b0      	push	{r4, r5, r7, lr}
 8004fa2:	b090      	sub	sp, #64	; 0x40
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fa8:	231a      	movs	r3, #26
 8004faa:	2220      	movs	r2, #32
 8004fac:	189b      	adds	r3, r3, r2
 8004fae:	19db      	adds	r3, r3, r7
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4ac1      	ldr	r2, [pc, #772]	; (80052d8 <UART_SetConfig+0x338>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	0019      	movs	r1, r3
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	4abc      	ldr	r2, [pc, #752]	; (80052dc <UART_SetConfig+0x33c>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	0018      	movs	r0, r3
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	68d9      	ldr	r1, [r3, #12]
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	0003      	movs	r3, r0
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4ab6      	ldr	r2, [pc, #728]	; (80052e0 <UART_SetConfig+0x340>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d009      	beq.n	8005020 <UART_SetConfig+0x80>
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4ab4      	ldr	r2, [pc, #720]	; (80052e4 <UART_SetConfig+0x344>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800501c:	4313      	orrs	r3, r2
 800501e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	4ab0      	ldr	r2, [pc, #704]	; (80052e8 <UART_SetConfig+0x348>)
 8005028:	4013      	ands	r3, r2
 800502a:	0019      	movs	r1, r3
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005032:	430b      	orrs	r3, r1
 8005034:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	220f      	movs	r2, #15
 800503e:	4393      	bics	r3, r2
 8005040:	0018      	movs	r0, r3
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	0003      	movs	r3, r0
 800504c:	430b      	orrs	r3, r1
 800504e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4aa5      	ldr	r2, [pc, #660]	; (80052ec <UART_SetConfig+0x34c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d131      	bne.n	80050be <UART_SetConfig+0x11e>
 800505a:	4ba5      	ldr	r3, [pc, #660]	; (80052f0 <UART_SetConfig+0x350>)
 800505c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505e:	2203      	movs	r2, #3
 8005060:	4013      	ands	r3, r2
 8005062:	2b03      	cmp	r3, #3
 8005064:	d01d      	beq.n	80050a2 <UART_SetConfig+0x102>
 8005066:	d823      	bhi.n	80050b0 <UART_SetConfig+0x110>
 8005068:	2b02      	cmp	r3, #2
 800506a:	d00c      	beq.n	8005086 <UART_SetConfig+0xe6>
 800506c:	d820      	bhi.n	80050b0 <UART_SetConfig+0x110>
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <UART_SetConfig+0xd8>
 8005072:	2b01      	cmp	r3, #1
 8005074:	d00e      	beq.n	8005094 <UART_SetConfig+0xf4>
 8005076:	e01b      	b.n	80050b0 <UART_SetConfig+0x110>
 8005078:	231b      	movs	r3, #27
 800507a:	2220      	movs	r2, #32
 800507c:	189b      	adds	r3, r3, r2
 800507e:	19db      	adds	r3, r3, r7
 8005080:	2200      	movs	r2, #0
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	e154      	b.n	8005330 <UART_SetConfig+0x390>
 8005086:	231b      	movs	r3, #27
 8005088:	2220      	movs	r2, #32
 800508a:	189b      	adds	r3, r3, r2
 800508c:	19db      	adds	r3, r3, r7
 800508e:	2202      	movs	r2, #2
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	e14d      	b.n	8005330 <UART_SetConfig+0x390>
 8005094:	231b      	movs	r3, #27
 8005096:	2220      	movs	r2, #32
 8005098:	189b      	adds	r3, r3, r2
 800509a:	19db      	adds	r3, r3, r7
 800509c:	2204      	movs	r2, #4
 800509e:	701a      	strb	r2, [r3, #0]
 80050a0:	e146      	b.n	8005330 <UART_SetConfig+0x390>
 80050a2:	231b      	movs	r3, #27
 80050a4:	2220      	movs	r2, #32
 80050a6:	189b      	adds	r3, r3, r2
 80050a8:	19db      	adds	r3, r3, r7
 80050aa:	2208      	movs	r2, #8
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	e13f      	b.n	8005330 <UART_SetConfig+0x390>
 80050b0:	231b      	movs	r3, #27
 80050b2:	2220      	movs	r2, #32
 80050b4:	189b      	adds	r3, r3, r2
 80050b6:	19db      	adds	r3, r3, r7
 80050b8:	2210      	movs	r2, #16
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	e138      	b.n	8005330 <UART_SetConfig+0x390>
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a8c      	ldr	r2, [pc, #560]	; (80052f4 <UART_SetConfig+0x354>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d131      	bne.n	800512c <UART_SetConfig+0x18c>
 80050c8:	4b89      	ldr	r3, [pc, #548]	; (80052f0 <UART_SetConfig+0x350>)
 80050ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050cc:	220c      	movs	r2, #12
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b0c      	cmp	r3, #12
 80050d2:	d01d      	beq.n	8005110 <UART_SetConfig+0x170>
 80050d4:	d823      	bhi.n	800511e <UART_SetConfig+0x17e>
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d00c      	beq.n	80050f4 <UART_SetConfig+0x154>
 80050da:	d820      	bhi.n	800511e <UART_SetConfig+0x17e>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <UART_SetConfig+0x146>
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d00e      	beq.n	8005102 <UART_SetConfig+0x162>
 80050e4:	e01b      	b.n	800511e <UART_SetConfig+0x17e>
 80050e6:	231b      	movs	r3, #27
 80050e8:	2220      	movs	r2, #32
 80050ea:	189b      	adds	r3, r3, r2
 80050ec:	19db      	adds	r3, r3, r7
 80050ee:	2200      	movs	r2, #0
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	e11d      	b.n	8005330 <UART_SetConfig+0x390>
 80050f4:	231b      	movs	r3, #27
 80050f6:	2220      	movs	r2, #32
 80050f8:	189b      	adds	r3, r3, r2
 80050fa:	19db      	adds	r3, r3, r7
 80050fc:	2202      	movs	r2, #2
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	e116      	b.n	8005330 <UART_SetConfig+0x390>
 8005102:	231b      	movs	r3, #27
 8005104:	2220      	movs	r2, #32
 8005106:	189b      	adds	r3, r3, r2
 8005108:	19db      	adds	r3, r3, r7
 800510a:	2204      	movs	r2, #4
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	e10f      	b.n	8005330 <UART_SetConfig+0x390>
 8005110:	231b      	movs	r3, #27
 8005112:	2220      	movs	r2, #32
 8005114:	189b      	adds	r3, r3, r2
 8005116:	19db      	adds	r3, r3, r7
 8005118:	2208      	movs	r2, #8
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	e108      	b.n	8005330 <UART_SetConfig+0x390>
 800511e:	231b      	movs	r3, #27
 8005120:	2220      	movs	r2, #32
 8005122:	189b      	adds	r3, r3, r2
 8005124:	19db      	adds	r3, r3, r7
 8005126:	2210      	movs	r2, #16
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	e101      	b.n	8005330 <UART_SetConfig+0x390>
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a71      	ldr	r2, [pc, #452]	; (80052f8 <UART_SetConfig+0x358>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d131      	bne.n	800519a <UART_SetConfig+0x1fa>
 8005136:	4b6e      	ldr	r3, [pc, #440]	; (80052f0 <UART_SetConfig+0x350>)
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	2230      	movs	r2, #48	; 0x30
 800513c:	4013      	ands	r3, r2
 800513e:	2b30      	cmp	r3, #48	; 0x30
 8005140:	d01d      	beq.n	800517e <UART_SetConfig+0x1de>
 8005142:	d823      	bhi.n	800518c <UART_SetConfig+0x1ec>
 8005144:	2b20      	cmp	r3, #32
 8005146:	d00c      	beq.n	8005162 <UART_SetConfig+0x1c2>
 8005148:	d820      	bhi.n	800518c <UART_SetConfig+0x1ec>
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <UART_SetConfig+0x1b4>
 800514e:	2b10      	cmp	r3, #16
 8005150:	d00e      	beq.n	8005170 <UART_SetConfig+0x1d0>
 8005152:	e01b      	b.n	800518c <UART_SetConfig+0x1ec>
 8005154:	231b      	movs	r3, #27
 8005156:	2220      	movs	r2, #32
 8005158:	189b      	adds	r3, r3, r2
 800515a:	19db      	adds	r3, r3, r7
 800515c:	2200      	movs	r2, #0
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	e0e6      	b.n	8005330 <UART_SetConfig+0x390>
 8005162:	231b      	movs	r3, #27
 8005164:	2220      	movs	r2, #32
 8005166:	189b      	adds	r3, r3, r2
 8005168:	19db      	adds	r3, r3, r7
 800516a:	2202      	movs	r2, #2
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	e0df      	b.n	8005330 <UART_SetConfig+0x390>
 8005170:	231b      	movs	r3, #27
 8005172:	2220      	movs	r2, #32
 8005174:	189b      	adds	r3, r3, r2
 8005176:	19db      	adds	r3, r3, r7
 8005178:	2204      	movs	r2, #4
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	e0d8      	b.n	8005330 <UART_SetConfig+0x390>
 800517e:	231b      	movs	r3, #27
 8005180:	2220      	movs	r2, #32
 8005182:	189b      	adds	r3, r3, r2
 8005184:	19db      	adds	r3, r3, r7
 8005186:	2208      	movs	r2, #8
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	e0d1      	b.n	8005330 <UART_SetConfig+0x390>
 800518c:	231b      	movs	r3, #27
 800518e:	2220      	movs	r2, #32
 8005190:	189b      	adds	r3, r3, r2
 8005192:	19db      	adds	r3, r3, r7
 8005194:	2210      	movs	r2, #16
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	e0ca      	b.n	8005330 <UART_SetConfig+0x390>
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a57      	ldr	r2, [pc, #348]	; (80052fc <UART_SetConfig+0x35c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d106      	bne.n	80051b2 <UART_SetConfig+0x212>
 80051a4:	231b      	movs	r3, #27
 80051a6:	2220      	movs	r2, #32
 80051a8:	189b      	adds	r3, r3, r2
 80051aa:	19db      	adds	r3, r3, r7
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e0be      	b.n	8005330 <UART_SetConfig+0x390>
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a52      	ldr	r2, [pc, #328]	; (8005300 <UART_SetConfig+0x360>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d106      	bne.n	80051ca <UART_SetConfig+0x22a>
 80051bc:	231b      	movs	r3, #27
 80051be:	2220      	movs	r2, #32
 80051c0:	189b      	adds	r3, r3, r2
 80051c2:	19db      	adds	r3, r3, r7
 80051c4:	2200      	movs	r2, #0
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e0b2      	b.n	8005330 <UART_SetConfig+0x390>
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a4d      	ldr	r2, [pc, #308]	; (8005304 <UART_SetConfig+0x364>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d106      	bne.n	80051e2 <UART_SetConfig+0x242>
 80051d4:	231b      	movs	r3, #27
 80051d6:	2220      	movs	r2, #32
 80051d8:	189b      	adds	r3, r3, r2
 80051da:	19db      	adds	r3, r3, r7
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	e0a6      	b.n	8005330 <UART_SetConfig+0x390>
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a3e      	ldr	r2, [pc, #248]	; (80052e0 <UART_SetConfig+0x340>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d13e      	bne.n	800526a <UART_SetConfig+0x2ca>
 80051ec:	4b40      	ldr	r3, [pc, #256]	; (80052f0 <UART_SetConfig+0x350>)
 80051ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051f0:	23c0      	movs	r3, #192	; 0xc0
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	4013      	ands	r3, r2
 80051f6:	22c0      	movs	r2, #192	; 0xc0
 80051f8:	0112      	lsls	r2, r2, #4
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d027      	beq.n	800524e <UART_SetConfig+0x2ae>
 80051fe:	22c0      	movs	r2, #192	; 0xc0
 8005200:	0112      	lsls	r2, r2, #4
 8005202:	4293      	cmp	r3, r2
 8005204:	d82a      	bhi.n	800525c <UART_SetConfig+0x2bc>
 8005206:	2280      	movs	r2, #128	; 0x80
 8005208:	0112      	lsls	r2, r2, #4
 800520a:	4293      	cmp	r3, r2
 800520c:	d011      	beq.n	8005232 <UART_SetConfig+0x292>
 800520e:	2280      	movs	r2, #128	; 0x80
 8005210:	0112      	lsls	r2, r2, #4
 8005212:	4293      	cmp	r3, r2
 8005214:	d822      	bhi.n	800525c <UART_SetConfig+0x2bc>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d004      	beq.n	8005224 <UART_SetConfig+0x284>
 800521a:	2280      	movs	r2, #128	; 0x80
 800521c:	00d2      	lsls	r2, r2, #3
 800521e:	4293      	cmp	r3, r2
 8005220:	d00e      	beq.n	8005240 <UART_SetConfig+0x2a0>
 8005222:	e01b      	b.n	800525c <UART_SetConfig+0x2bc>
 8005224:	231b      	movs	r3, #27
 8005226:	2220      	movs	r2, #32
 8005228:	189b      	adds	r3, r3, r2
 800522a:	19db      	adds	r3, r3, r7
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
 8005230:	e07e      	b.n	8005330 <UART_SetConfig+0x390>
 8005232:	231b      	movs	r3, #27
 8005234:	2220      	movs	r2, #32
 8005236:	189b      	adds	r3, r3, r2
 8005238:	19db      	adds	r3, r3, r7
 800523a:	2202      	movs	r2, #2
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	e077      	b.n	8005330 <UART_SetConfig+0x390>
 8005240:	231b      	movs	r3, #27
 8005242:	2220      	movs	r2, #32
 8005244:	189b      	adds	r3, r3, r2
 8005246:	19db      	adds	r3, r3, r7
 8005248:	2204      	movs	r2, #4
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	e070      	b.n	8005330 <UART_SetConfig+0x390>
 800524e:	231b      	movs	r3, #27
 8005250:	2220      	movs	r2, #32
 8005252:	189b      	adds	r3, r3, r2
 8005254:	19db      	adds	r3, r3, r7
 8005256:	2208      	movs	r2, #8
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e069      	b.n	8005330 <UART_SetConfig+0x390>
 800525c:	231b      	movs	r3, #27
 800525e:	2220      	movs	r2, #32
 8005260:	189b      	adds	r3, r3, r2
 8005262:	19db      	adds	r3, r3, r7
 8005264:	2210      	movs	r2, #16
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	e062      	b.n	8005330 <UART_SetConfig+0x390>
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <UART_SetConfig+0x344>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d157      	bne.n	8005324 <UART_SetConfig+0x384>
 8005274:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <UART_SetConfig+0x350>)
 8005276:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005278:	23c0      	movs	r3, #192	; 0xc0
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4013      	ands	r3, r2
 800527e:	22c0      	movs	r2, #192	; 0xc0
 8005280:	0092      	lsls	r2, r2, #2
 8005282:	4293      	cmp	r3, r2
 8005284:	d040      	beq.n	8005308 <UART_SetConfig+0x368>
 8005286:	22c0      	movs	r2, #192	; 0xc0
 8005288:	0092      	lsls	r2, r2, #2
 800528a:	4293      	cmp	r3, r2
 800528c:	d843      	bhi.n	8005316 <UART_SetConfig+0x376>
 800528e:	2280      	movs	r2, #128	; 0x80
 8005290:	0092      	lsls	r2, r2, #2
 8005292:	4293      	cmp	r3, r2
 8005294:	d011      	beq.n	80052ba <UART_SetConfig+0x31a>
 8005296:	2280      	movs	r2, #128	; 0x80
 8005298:	0092      	lsls	r2, r2, #2
 800529a:	4293      	cmp	r3, r2
 800529c:	d83b      	bhi.n	8005316 <UART_SetConfig+0x376>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d004      	beq.n	80052ac <UART_SetConfig+0x30c>
 80052a2:	2280      	movs	r2, #128	; 0x80
 80052a4:	0052      	lsls	r2, r2, #1
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00e      	beq.n	80052c8 <UART_SetConfig+0x328>
 80052aa:	e034      	b.n	8005316 <UART_SetConfig+0x376>
 80052ac:	231b      	movs	r3, #27
 80052ae:	2220      	movs	r2, #32
 80052b0:	189b      	adds	r3, r3, r2
 80052b2:	19db      	adds	r3, r3, r7
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	e03a      	b.n	8005330 <UART_SetConfig+0x390>
 80052ba:	231b      	movs	r3, #27
 80052bc:	2220      	movs	r2, #32
 80052be:	189b      	adds	r3, r3, r2
 80052c0:	19db      	adds	r3, r3, r7
 80052c2:	2202      	movs	r2, #2
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	e033      	b.n	8005330 <UART_SetConfig+0x390>
 80052c8:	231b      	movs	r3, #27
 80052ca:	2220      	movs	r2, #32
 80052cc:	189b      	adds	r3, r3, r2
 80052ce:	19db      	adds	r3, r3, r7
 80052d0:	2204      	movs	r2, #4
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	e02c      	b.n	8005330 <UART_SetConfig+0x390>
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	cfff69f3 	.word	0xcfff69f3
 80052dc:	ffffcfff 	.word	0xffffcfff
 80052e0:	40008000 	.word	0x40008000
 80052e4:	40008400 	.word	0x40008400
 80052e8:	11fff4ff 	.word	0x11fff4ff
 80052ec:	40013800 	.word	0x40013800
 80052f0:	40021000 	.word	0x40021000
 80052f4:	40004400 	.word	0x40004400
 80052f8:	40004800 	.word	0x40004800
 80052fc:	40004c00 	.word	0x40004c00
 8005300:	40005000 	.word	0x40005000
 8005304:	40013c00 	.word	0x40013c00
 8005308:	231b      	movs	r3, #27
 800530a:	2220      	movs	r2, #32
 800530c:	189b      	adds	r3, r3, r2
 800530e:	19db      	adds	r3, r3, r7
 8005310:	2208      	movs	r2, #8
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	e00c      	b.n	8005330 <UART_SetConfig+0x390>
 8005316:	231b      	movs	r3, #27
 8005318:	2220      	movs	r2, #32
 800531a:	189b      	adds	r3, r3, r2
 800531c:	19db      	adds	r3, r3, r7
 800531e:	2210      	movs	r2, #16
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	e005      	b.n	8005330 <UART_SetConfig+0x390>
 8005324:	231b      	movs	r3, #27
 8005326:	2220      	movs	r2, #32
 8005328:	189b      	adds	r3, r3, r2
 800532a:	19db      	adds	r3, r3, r7
 800532c:	2210      	movs	r2, #16
 800532e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4ac2      	ldr	r2, [pc, #776]	; (8005640 <UART_SetConfig+0x6a0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d005      	beq.n	8005346 <UART_SetConfig+0x3a6>
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4ac1      	ldr	r2, [pc, #772]	; (8005644 <UART_SetConfig+0x6a4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d000      	beq.n	8005346 <UART_SetConfig+0x3a6>
 8005344:	e093      	b.n	800546e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005346:	231b      	movs	r3, #27
 8005348:	2220      	movs	r2, #32
 800534a:	189b      	adds	r3, r3, r2
 800534c:	19db      	adds	r3, r3, r7
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d015      	beq.n	8005380 <UART_SetConfig+0x3e0>
 8005354:	dc18      	bgt.n	8005388 <UART_SetConfig+0x3e8>
 8005356:	2b04      	cmp	r3, #4
 8005358:	d00d      	beq.n	8005376 <UART_SetConfig+0x3d6>
 800535a:	dc15      	bgt.n	8005388 <UART_SetConfig+0x3e8>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <UART_SetConfig+0x3c6>
 8005360:	2b02      	cmp	r3, #2
 8005362:	d005      	beq.n	8005370 <UART_SetConfig+0x3d0>
 8005364:	e010      	b.n	8005388 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005366:	f7fe faf1 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 800536a:	0003      	movs	r3, r0
 800536c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800536e:	e014      	b.n	800539a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005370:	4bb5      	ldr	r3, [pc, #724]	; (8005648 <UART_SetConfig+0x6a8>)
 8005372:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005374:	e011      	b.n	800539a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005376:	f7fe fa5d 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 800537a:	0003      	movs	r3, r0
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800537e:	e00c      	b.n	800539a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005380:	2380      	movs	r3, #128	; 0x80
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005386:	e008      	b.n	800539a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800538c:	231a      	movs	r3, #26
 800538e:	2220      	movs	r2, #32
 8005390:	189b      	adds	r3, r3, r2
 8005392:	19db      	adds	r3, r3, r7
 8005394:	2201      	movs	r2, #1
 8005396:	701a      	strb	r2, [r3, #0]
        break;
 8005398:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800539a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539c:	2b00      	cmp	r3, #0
 800539e:	d100      	bne.n	80053a2 <UART_SetConfig+0x402>
 80053a0:	e136      	b.n	8005610 <UART_SetConfig+0x670>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053a6:	4ba9      	ldr	r3, [pc, #676]	; (800564c <UART_SetConfig+0x6ac>)
 80053a8:	0052      	lsls	r2, r2, #1
 80053aa:	5ad3      	ldrh	r3, [r2, r3]
 80053ac:	0019      	movs	r1, r3
 80053ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053b0:	f7fa fea8 	bl	8000104 <__udivsi3>
 80053b4:	0003      	movs	r3, r0
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	0013      	movs	r3, r2
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	189b      	adds	r3, r3, r2
 80053c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d305      	bcc.n	80053d4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d906      	bls.n	80053e2 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80053d4:	231a      	movs	r3, #26
 80053d6:	2220      	movs	r2, #32
 80053d8:	189b      	adds	r3, r3, r2
 80053da:	19db      	adds	r3, r3, r7
 80053dc:	2201      	movs	r2, #1
 80053de:	701a      	strb	r2, [r3, #0]
 80053e0:	e044      	b.n	800546c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053ee:	4b97      	ldr	r3, [pc, #604]	; (800564c <UART_SetConfig+0x6ac>)
 80053f0:	0052      	lsls	r2, r2, #1
 80053f2:	5ad3      	ldrh	r3, [r2, r3]
 80053f4:	613b      	str	r3, [r7, #16]
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	69b8      	ldr	r0, [r7, #24]
 8005400:	69f9      	ldr	r1, [r7, #28]
 8005402:	f7fb f82f 	bl	8000464 <__aeabi_uldivmod>
 8005406:	0002      	movs	r2, r0
 8005408:	000b      	movs	r3, r1
 800540a:	0e11      	lsrs	r1, r2, #24
 800540c:	021d      	lsls	r5, r3, #8
 800540e:	430d      	orrs	r5, r1
 8005410:	0214      	lsls	r4, r2, #8
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	60bb      	str	r3, [r7, #8]
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	68b8      	ldr	r0, [r7, #8]
 8005420:	68f9      	ldr	r1, [r7, #12]
 8005422:	1900      	adds	r0, r0, r4
 8005424:	4169      	adcs	r1, r5
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	2300      	movs	r3, #0
 800542e:	607b      	str	r3, [r7, #4]
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f7fb f816 	bl	8000464 <__aeabi_uldivmod>
 8005438:	0002      	movs	r2, r0
 800543a:	000b      	movs	r3, r1
 800543c:	0013      	movs	r3, r2
 800543e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005442:	23c0      	movs	r3, #192	; 0xc0
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	429a      	cmp	r2, r3
 8005448:	d309      	bcc.n	800545e <UART_SetConfig+0x4be>
 800544a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	035b      	lsls	r3, r3, #13
 8005450:	429a      	cmp	r2, r3
 8005452:	d204      	bcs.n	800545e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800545a:	60da      	str	r2, [r3, #12]
 800545c:	e006      	b.n	800546c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800545e:	231a      	movs	r3, #26
 8005460:	2220      	movs	r2, #32
 8005462:	189b      	adds	r3, r3, r2
 8005464:	19db      	adds	r3, r3, r7
 8005466:	2201      	movs	r2, #1
 8005468:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800546a:	e0d1      	b.n	8005610 <UART_SetConfig+0x670>
 800546c:	e0d0      	b.n	8005610 <UART_SetConfig+0x670>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	2380      	movs	r3, #128	; 0x80
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	429a      	cmp	r2, r3
 8005478:	d000      	beq.n	800547c <UART_SetConfig+0x4dc>
 800547a:	e071      	b.n	8005560 <UART_SetConfig+0x5c0>
  {
    switch (clocksource)
 800547c:	231b      	movs	r3, #27
 800547e:	2220      	movs	r2, #32
 8005480:	189b      	adds	r3, r3, r2
 8005482:	19db      	adds	r3, r3, r7
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b08      	cmp	r3, #8
 8005488:	d015      	beq.n	80054b6 <UART_SetConfig+0x516>
 800548a:	dc18      	bgt.n	80054be <UART_SetConfig+0x51e>
 800548c:	2b04      	cmp	r3, #4
 800548e:	d00d      	beq.n	80054ac <UART_SetConfig+0x50c>
 8005490:	dc15      	bgt.n	80054be <UART_SetConfig+0x51e>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <UART_SetConfig+0x4fc>
 8005496:	2b02      	cmp	r3, #2
 8005498:	d005      	beq.n	80054a6 <UART_SetConfig+0x506>
 800549a:	e010      	b.n	80054be <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800549c:	f7fe fa56 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 80054a0:	0003      	movs	r3, r0
 80054a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054a4:	e014      	b.n	80054d0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054a6:	4b68      	ldr	r3, [pc, #416]	; (8005648 <UART_SetConfig+0x6a8>)
 80054a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054aa:	e011      	b.n	80054d0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ac:	f7fe f9c2 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 80054b0:	0003      	movs	r3, r0
 80054b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054b4:	e00c      	b.n	80054d0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054b6:	2380      	movs	r3, #128	; 0x80
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054bc:	e008      	b.n	80054d0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80054c2:	231a      	movs	r3, #26
 80054c4:	2220      	movs	r2, #32
 80054c6:	189b      	adds	r3, r3, r2
 80054c8:	19db      	adds	r3, r3, r7
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
        break;
 80054ce:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d100      	bne.n	80054d8 <UART_SetConfig+0x538>
 80054d6:	e09b      	b.n	8005610 <UART_SetConfig+0x670>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054dc:	4b5b      	ldr	r3, [pc, #364]	; (800564c <UART_SetConfig+0x6ac>)
 80054de:	0052      	lsls	r2, r2, #1
 80054e0:	5ad3      	ldrh	r3, [r2, r3]
 80054e2:	0019      	movs	r1, r3
 80054e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054e6:	f7fa fe0d 	bl	8000104 <__udivsi3>
 80054ea:	0003      	movs	r3, r0
 80054ec:	005a      	lsls	r2, r3, #1
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	18d2      	adds	r2, r2, r3
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	0019      	movs	r1, r3
 80054fc:	0010      	movs	r0, r2
 80054fe:	f7fa fe01 	bl	8000104 <__udivsi3>
 8005502:	0003      	movs	r3, r0
 8005504:	b29b      	uxth	r3, r3
 8005506:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	2b0f      	cmp	r3, #15
 800550c:	d921      	bls.n	8005552 <UART_SetConfig+0x5b2>
 800550e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	025b      	lsls	r3, r3, #9
 8005514:	429a      	cmp	r2, r3
 8005516:	d21c      	bcs.n	8005552 <UART_SetConfig+0x5b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	b29a      	uxth	r2, r3
 800551c:	200e      	movs	r0, #14
 800551e:	2420      	movs	r4, #32
 8005520:	1903      	adds	r3, r0, r4
 8005522:	19db      	adds	r3, r3, r7
 8005524:	210f      	movs	r1, #15
 8005526:	438a      	bics	r2, r1
 8005528:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	085b      	lsrs	r3, r3, #1
 800552e:	b29b      	uxth	r3, r3
 8005530:	2207      	movs	r2, #7
 8005532:	4013      	ands	r3, r2
 8005534:	b299      	uxth	r1, r3
 8005536:	1903      	adds	r3, r0, r4
 8005538:	19db      	adds	r3, r3, r7
 800553a:	1902      	adds	r2, r0, r4
 800553c:	19d2      	adds	r2, r2, r7
 800553e:	8812      	ldrh	r2, [r2, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	1902      	adds	r2, r0, r4
 800554a:	19d2      	adds	r2, r2, r7
 800554c:	8812      	ldrh	r2, [r2, #0]
 800554e:	60da      	str	r2, [r3, #12]
 8005550:	e05e      	b.n	8005610 <UART_SetConfig+0x670>
      }
      else
      {
        ret = HAL_ERROR;
 8005552:	231a      	movs	r3, #26
 8005554:	2220      	movs	r2, #32
 8005556:	189b      	adds	r3, r3, r2
 8005558:	19db      	adds	r3, r3, r7
 800555a:	2201      	movs	r2, #1
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	e057      	b.n	8005610 <UART_SetConfig+0x670>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005560:	231b      	movs	r3, #27
 8005562:	2220      	movs	r2, #32
 8005564:	189b      	adds	r3, r3, r2
 8005566:	19db      	adds	r3, r3, r7
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b08      	cmp	r3, #8
 800556c:	d015      	beq.n	800559a <UART_SetConfig+0x5fa>
 800556e:	dc18      	bgt.n	80055a2 <UART_SetConfig+0x602>
 8005570:	2b04      	cmp	r3, #4
 8005572:	d00d      	beq.n	8005590 <UART_SetConfig+0x5f0>
 8005574:	dc15      	bgt.n	80055a2 <UART_SetConfig+0x602>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <UART_SetConfig+0x5e0>
 800557a:	2b02      	cmp	r3, #2
 800557c:	d005      	beq.n	800558a <UART_SetConfig+0x5ea>
 800557e:	e010      	b.n	80055a2 <UART_SetConfig+0x602>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005580:	f7fe f9e4 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 8005584:	0003      	movs	r3, r0
 8005586:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005588:	e014      	b.n	80055b4 <UART_SetConfig+0x614>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800558a:	4b2f      	ldr	r3, [pc, #188]	; (8005648 <UART_SetConfig+0x6a8>)
 800558c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800558e:	e011      	b.n	80055b4 <UART_SetConfig+0x614>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005590:	f7fe f950 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 8005594:	0003      	movs	r3, r0
 8005596:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005598:	e00c      	b.n	80055b4 <UART_SetConfig+0x614>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559a:	2380      	movs	r3, #128	; 0x80
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055a0:	e008      	b.n	80055b4 <UART_SetConfig+0x614>
      default:
        pclk = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80055a6:	231a      	movs	r3, #26
 80055a8:	2220      	movs	r2, #32
 80055aa:	189b      	adds	r3, r3, r2
 80055ac:	19db      	adds	r3, r3, r7
 80055ae:	2201      	movs	r2, #1
 80055b0:	701a      	strb	r2, [r3, #0]
        break;
 80055b2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80055b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d02a      	beq.n	8005610 <UART_SetConfig+0x670>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055be:	4b23      	ldr	r3, [pc, #140]	; (800564c <UART_SetConfig+0x6ac>)
 80055c0:	0052      	lsls	r2, r2, #1
 80055c2:	5ad3      	ldrh	r3, [r2, r3]
 80055c4:	0019      	movs	r1, r3
 80055c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80055c8:	f7fa fd9c 	bl	8000104 <__udivsi3>
 80055cc:	0003      	movs	r3, r0
 80055ce:	001a      	movs	r2, r3
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	085b      	lsrs	r3, r3, #1
 80055d6:	18d2      	adds	r2, r2, r3
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	0019      	movs	r1, r3
 80055de:	0010      	movs	r0, r2
 80055e0:	f7fa fd90 	bl	8000104 <__udivsi3>
 80055e4:	0003      	movs	r3, r0
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	2b0f      	cmp	r3, #15
 80055ee:	d909      	bls.n	8005604 <UART_SetConfig+0x664>
 80055f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	025b      	lsls	r3, r3, #9
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d204      	bcs.n	8005604 <UART_SetConfig+0x664>
      {
        huart->Instance->BRR = usartdiv;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005600:	60da      	str	r2, [r3, #12]
 8005602:	e005      	b.n	8005610 <UART_SetConfig+0x670>
      }
      else
      {
        ret = HAL_ERROR;
 8005604:	231a      	movs	r3, #26
 8005606:	2220      	movs	r2, #32
 8005608:	189b      	adds	r3, r3, r2
 800560a:	19db      	adds	r3, r3, r7
 800560c:	2201      	movs	r2, #1
 800560e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	226a      	movs	r2, #106	; 0x6a
 8005614:	2101      	movs	r1, #1
 8005616:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	2268      	movs	r2, #104	; 0x68
 800561c:	2101      	movs	r1, #1
 800561e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	2200      	movs	r2, #0
 8005624:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	2200      	movs	r2, #0
 800562a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800562c:	231a      	movs	r3, #26
 800562e:	2220      	movs	r2, #32
 8005630:	189b      	adds	r3, r3, r2
 8005632:	19db      	adds	r3, r3, r7
 8005634:	781b      	ldrb	r3, [r3, #0]
}
 8005636:	0018      	movs	r0, r3
 8005638:	46bd      	mov	sp, r7
 800563a:	b010      	add	sp, #64	; 0x40
 800563c:	bdb0      	pop	{r4, r5, r7, pc}
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	40008000 	.word	0x40008000
 8005644:	40008400 	.word	0x40008400
 8005648:	00f42400 	.word	0x00f42400
 800564c:	08006274 	.word	0x08006274

08005650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	2201      	movs	r2, #1
 800565e:	4013      	ands	r3, r2
 8005660:	d00b      	beq.n	800567a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	4a4a      	ldr	r2, [pc, #296]	; (8005794 <UART_AdvFeatureConfig+0x144>)
 800566a:	4013      	ands	r3, r2
 800566c:	0019      	movs	r1, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567e:	2202      	movs	r2, #2
 8005680:	4013      	ands	r3, r2
 8005682:	d00b      	beq.n	800569c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	4a43      	ldr	r2, [pc, #268]	; (8005798 <UART_AdvFeatureConfig+0x148>)
 800568c:	4013      	ands	r3, r2
 800568e:	0019      	movs	r1, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a0:	2204      	movs	r2, #4
 80056a2:	4013      	ands	r3, r2
 80056a4:	d00b      	beq.n	80056be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	4a3b      	ldr	r2, [pc, #236]	; (800579c <UART_AdvFeatureConfig+0x14c>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	0019      	movs	r1, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	2208      	movs	r2, #8
 80056c4:	4013      	ands	r3, r2
 80056c6:	d00b      	beq.n	80056e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	4a34      	ldr	r2, [pc, #208]	; (80057a0 <UART_AdvFeatureConfig+0x150>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	0019      	movs	r1, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	2210      	movs	r2, #16
 80056e6:	4013      	ands	r3, r2
 80056e8:	d00b      	beq.n	8005702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4a2c      	ldr	r2, [pc, #176]	; (80057a4 <UART_AdvFeatureConfig+0x154>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	0019      	movs	r1, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	2220      	movs	r2, #32
 8005708:	4013      	ands	r3, r2
 800570a:	d00b      	beq.n	8005724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	4a25      	ldr	r2, [pc, #148]	; (80057a8 <UART_AdvFeatureConfig+0x158>)
 8005714:	4013      	ands	r3, r2
 8005716:	0019      	movs	r1, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	2240      	movs	r2, #64	; 0x40
 800572a:	4013      	ands	r3, r2
 800572c:	d01d      	beq.n	800576a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4a1d      	ldr	r2, [pc, #116]	; (80057ac <UART_AdvFeatureConfig+0x15c>)
 8005736:	4013      	ands	r3, r2
 8005738:	0019      	movs	r1, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800574a:	2380      	movs	r3, #128	; 0x80
 800574c:	035b      	lsls	r3, r3, #13
 800574e:	429a      	cmp	r2, r3
 8005750:	d10b      	bne.n	800576a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	4a15      	ldr	r2, [pc, #84]	; (80057b0 <UART_AdvFeatureConfig+0x160>)
 800575a:	4013      	ands	r3, r2
 800575c:	0019      	movs	r1, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	2280      	movs	r2, #128	; 0x80
 8005770:	4013      	ands	r3, r2
 8005772:	d00b      	beq.n	800578c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	4a0e      	ldr	r2, [pc, #56]	; (80057b4 <UART_AdvFeatureConfig+0x164>)
 800577c:	4013      	ands	r3, r2
 800577e:	0019      	movs	r1, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	605a      	str	r2, [r3, #4]
  }
}
 800578c:	46c0      	nop			; (mov r8, r8)
 800578e:	46bd      	mov	sp, r7
 8005790:	b002      	add	sp, #8
 8005792:	bd80      	pop	{r7, pc}
 8005794:	fffdffff 	.word	0xfffdffff
 8005798:	fffeffff 	.word	0xfffeffff
 800579c:	fffbffff 	.word	0xfffbffff
 80057a0:	ffff7fff 	.word	0xffff7fff
 80057a4:	ffffefff 	.word	0xffffefff
 80057a8:	ffffdfff 	.word	0xffffdfff
 80057ac:	ffefffff 	.word	0xffefffff
 80057b0:	ff9fffff 	.word	0xff9fffff
 80057b4:	fff7ffff 	.word	0xfff7ffff

080057b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af02      	add	r7, sp, #8
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	228c      	movs	r2, #140	; 0x8c
 80057c4:	2100      	movs	r1, #0
 80057c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057c8:	f7fc fe14 	bl	80023f4 <HAL_GetTick>
 80057cc:	0003      	movs	r3, r0
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2208      	movs	r2, #8
 80057d8:	4013      	ands	r3, r2
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d10c      	bne.n	80057f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2280      	movs	r2, #128	; 0x80
 80057e2:	0391      	lsls	r1, r2, #14
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4a18      	ldr	r2, [pc, #96]	; (8005848 <UART_CheckIdleState+0x90>)
 80057e8:	9200      	str	r2, [sp, #0]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f000 f82e 	bl	800584c <UART_WaitOnFlagUntilTimeout>
 80057f0:	1e03      	subs	r3, r0, #0
 80057f2:	d001      	beq.n	80057f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e023      	b.n	8005840 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2204      	movs	r2, #4
 8005800:	4013      	ands	r3, r2
 8005802:	2b04      	cmp	r3, #4
 8005804:	d10c      	bne.n	8005820 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2280      	movs	r2, #128	; 0x80
 800580a:	03d1      	lsls	r1, r2, #15
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	4a0e      	ldr	r2, [pc, #56]	; (8005848 <UART_CheckIdleState+0x90>)
 8005810:	9200      	str	r2, [sp, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	f000 f81a 	bl	800584c <UART_WaitOnFlagUntilTimeout>
 8005818:	1e03      	subs	r3, r0, #0
 800581a:	d001      	beq.n	8005820 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e00f      	b.n	8005840 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2284      	movs	r2, #132	; 0x84
 8005824:	2120      	movs	r1, #32
 8005826:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2288      	movs	r2, #136	; 0x88
 800582c:	2120      	movs	r1, #32
 800582e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2280      	movs	r2, #128	; 0x80
 800583a:	2100      	movs	r1, #0
 800583c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	0018      	movs	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	b004      	add	sp, #16
 8005846:	bd80      	pop	{r7, pc}
 8005848:	01ffffff 	.word	0x01ffffff

0800584c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b094      	sub	sp, #80	; 0x50
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	1dfb      	adds	r3, r7, #7
 800585a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800585c:	e0a7      	b.n	80059ae <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800585e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005860:	3301      	adds	r3, #1
 8005862:	d100      	bne.n	8005866 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005864:	e0a3      	b.n	80059ae <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005866:	f7fc fdc5 	bl	80023f4 <HAL_GetTick>
 800586a:	0002      	movs	r2, r0
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005872:	429a      	cmp	r2, r3
 8005874:	d302      	bcc.n	800587c <UART_WaitOnFlagUntilTimeout+0x30>
 8005876:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005878:	2b00      	cmp	r3, #0
 800587a:	d13f      	bne.n	80058fc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800587c:	f3ef 8310 	mrs	r3, PRIMASK
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005884:	647b      	str	r3, [r7, #68]	; 0x44
 8005886:	2301      	movs	r3, #1
 8005888:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	f383 8810 	msr	PRIMASK, r3
}
 8005890:	46c0      	nop			; (mov r8, r8)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	494e      	ldr	r1, [pc, #312]	; (80059d8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800589e:	400a      	ands	r2, r1
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	f383 8810 	msr	PRIMASK, r3
}
 80058ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ae:	f3ef 8310 	mrs	r3, PRIMASK
 80058b2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80058b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b6:	643b      	str	r3, [r7, #64]	; 0x40
 80058b8:	2301      	movs	r3, #1
 80058ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058be:	f383 8810 	msr	PRIMASK, r3
}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2101      	movs	r1, #1
 80058d0:	438a      	bics	r2, r1
 80058d2:	609a      	str	r2, [r3, #8]
 80058d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058da:	f383 8810 	msr	PRIMASK, r3
}
 80058de:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2284      	movs	r2, #132	; 0x84
 80058e4:	2120      	movs	r1, #32
 80058e6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2288      	movs	r2, #136	; 0x88
 80058ec:	2120      	movs	r1, #32
 80058ee:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2280      	movs	r2, #128	; 0x80
 80058f4:	2100      	movs	r1, #0
 80058f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e069      	b.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2204      	movs	r2, #4
 8005904:	4013      	ands	r3, r2
 8005906:	d052      	beq.n	80059ae <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69da      	ldr	r2, [r3, #28]
 800590e:	2380      	movs	r3, #128	; 0x80
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	401a      	ands	r2, r3
 8005914:	2380      	movs	r3, #128	; 0x80
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	429a      	cmp	r2, r3
 800591a:	d148      	bne.n	80059ae <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2280      	movs	r2, #128	; 0x80
 8005922:	0112      	lsls	r2, r2, #4
 8005924:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005926:	f3ef 8310 	mrs	r3, PRIMASK
 800592a:	613b      	str	r3, [r7, #16]
  return(result);
 800592c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800592e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005930:	2301      	movs	r3, #1
 8005932:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f383 8810 	msr	PRIMASK, r3
}
 800593a:	46c0      	nop			; (mov r8, r8)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4924      	ldr	r1, [pc, #144]	; (80059d8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005948:	400a      	ands	r2, r1
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800594e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	f383 8810 	msr	PRIMASK, r3
}
 8005956:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005958:	f3ef 8310 	mrs	r3, PRIMASK
 800595c:	61fb      	str	r3, [r7, #28]
  return(result);
 800595e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005960:	64bb      	str	r3, [r7, #72]	; 0x48
 8005962:	2301      	movs	r3, #1
 8005964:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	f383 8810 	msr	PRIMASK, r3
}
 800596c:	46c0      	nop			; (mov r8, r8)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2101      	movs	r1, #1
 800597a:	438a      	bics	r2, r1
 800597c:	609a      	str	r2, [r3, #8]
 800597e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	f383 8810 	msr	PRIMASK, r3
}
 8005988:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2284      	movs	r2, #132	; 0x84
 800598e:	2120      	movs	r1, #32
 8005990:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2288      	movs	r2, #136	; 0x88
 8005996:	2120      	movs	r1, #32
 8005998:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	228c      	movs	r2, #140	; 0x8c
 800599e:	2120      	movs	r1, #32
 80059a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2280      	movs	r2, #128	; 0x80
 80059a6:	2100      	movs	r1, #0
 80059a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e010      	b.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	4013      	ands	r3, r2
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	425a      	negs	r2, r3
 80059be:	4153      	adcs	r3, r2
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	001a      	movs	r2, r3
 80059c4:	1dfb      	adds	r3, r7, #7
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d100      	bne.n	80059ce <UART_WaitOnFlagUntilTimeout+0x182>
 80059cc:	e747      	b.n	800585e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	0018      	movs	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b014      	add	sp, #80	; 0x50
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	fffffe5f 	.word	0xfffffe5f

080059dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b090      	sub	sp, #64	; 0x40
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	1dbb      	adds	r3, r7, #6
 80059e8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	1dba      	adds	r2, r7, #6
 80059f4:	215c      	movs	r1, #92	; 0x5c
 80059f6:	8812      	ldrh	r2, [r2, #0]
 80059f8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	228c      	movs	r2, #140	; 0x8c
 80059fe:	2100      	movs	r1, #0
 8005a00:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2288      	movs	r2, #136	; 0x88
 8005a06:	2122      	movs	r1, #34	; 0x22
 8005a08:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d02c      	beq.n	8005a6c <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a16:	4a40      	ldr	r2, [pc, #256]	; (8005b18 <UART_Start_Receive_DMA+0x13c>)
 8005a18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a1e:	4a3f      	ldr	r2, [pc, #252]	; (8005b1c <UART_Start_Receive_DMA+0x140>)
 8005a20:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a26:	4a3e      	ldr	r2, [pc, #248]	; (8005b20 <UART_Start_Receive_DMA+0x144>)
 8005a28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a2e:	2200      	movs	r2, #0
 8005a30:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3324      	adds	r3, #36	; 0x24
 8005a3c:	0019      	movs	r1, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a42:	001a      	movs	r2, r3
 8005a44:	1dbb      	adds	r3, r7, #6
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	f7fc fea2 	bl	8002790 <HAL_DMA_Start_IT>
 8005a4c:	1e03      	subs	r3, r0, #0
 8005a4e:	d00d      	beq.n	8005a6c <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	228c      	movs	r2, #140	; 0x8c
 8005a54:	2110      	movs	r1, #16
 8005a56:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2280      	movs	r2, #128	; 0x80
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2288      	movs	r2, #136	; 0x88
 8005a64:	2120      	movs	r1, #32
 8005a66:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e050      	b.n	8005b0e <UART_Start_Receive_DMA+0x132>
    }
  }
  __HAL_UNLOCK(huart);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2280      	movs	r2, #128	; 0x80
 8005a70:	2100      	movs	r1, #0
 8005a72:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a74:	f3ef 8310 	mrs	r3, PRIMASK
 8005a78:	613b      	str	r3, [r7, #16]
  return(result);
 8005a7a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a7e:	2301      	movs	r3, #1
 8005a80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f383 8810 	msr	PRIMASK, r3
}
 8005a88:	46c0      	nop			; (mov r8, r8)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2180      	movs	r1, #128	; 0x80
 8005a96:	0049      	lsls	r1, r1, #1
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	f383 8810 	msr	PRIMASK, r3
}
 8005aa6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8005aac:	61fb      	str	r3, [r7, #28]
  return(result);
 8005aae:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	f383 8810 	msr	PRIMASK, r3
}
 8005abc:	46c0      	nop			; (mov r8, r8)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2101      	movs	r1, #1
 8005aca:	430a      	orrs	r2, r1
 8005acc:	609a      	str	r2, [r3, #8]
 8005ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	f383 8810 	msr	PRIMASK, r3
}
 8005ad8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ada:	f3ef 8310 	mrs	r3, PRIMASK
 8005ade:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	f383 8810 	msr	PRIMASK, r3
}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2140      	movs	r1, #64	; 0x40
 8005afc:	430a      	orrs	r2, r1
 8005afe:	609a      	str	r2, [r3, #8]
 8005b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b02:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b06:	f383 8810 	msr	PRIMASK, r3
}
 8005b0a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	0018      	movs	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b010      	add	sp, #64	; 0x40
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	08005c71 	.word	0x08005c71
 8005b1c:	08005d99 	.word	0x08005d99
 8005b20:	08005dd5 	.word	0x08005dd5

08005b24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	; 0x28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b30:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b32:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
 8005b36:	2301      	movs	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f383 8810 	msr	PRIMASK, r3
}
 8005b40:	46c0      	nop			; (mov r8, r8)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	21c0      	movs	r1, #192	; 0xc0
 8005b4e:	438a      	bics	r2, r1
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f383 8810 	msr	PRIMASK, r3
}
 8005b5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b62:	617b      	str	r3, [r7, #20]
  return(result);
 8005b64:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005b66:	623b      	str	r3, [r7, #32]
 8005b68:	2301      	movs	r3, #1
 8005b6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	f383 8810 	msr	PRIMASK, r3
}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4908      	ldr	r1, [pc, #32]	; (8005ba0 <UART_EndTxTransfer+0x7c>)
 8005b80:	400a      	ands	r2, r1
 8005b82:	609a      	str	r2, [r3, #8]
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f383 8810 	msr	PRIMASK, r3
}
 8005b8e:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2284      	movs	r2, #132	; 0x84
 8005b94:	2120      	movs	r1, #32
 8005b96:	5099      	str	r1, [r3, r2]
}
 8005b98:	46c0      	nop			; (mov r8, r8)
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	b00a      	add	sp, #40	; 0x28
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	ff7fffff 	.word	0xff7fffff

08005ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08e      	sub	sp, #56	; 0x38
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bac:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb0:	617b      	str	r3, [r7, #20]
  return(result);
 8005bb2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	f383 8810 	msr	PRIMASK, r3
}
 8005bc0:	46c0      	nop			; (mov r8, r8)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4926      	ldr	r1, [pc, #152]	; (8005c68 <UART_EndRxTransfer+0xc4>)
 8005bce:	400a      	ands	r2, r1
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f383 8810 	msr	PRIMASK, r3
}
 8005bdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bde:	f3ef 8310 	mrs	r3, PRIMASK
 8005be2:	623b      	str	r3, [r7, #32]
  return(result);
 8005be4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005be6:	633b      	str	r3, [r7, #48]	; 0x30
 8005be8:	2301      	movs	r3, #1
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	f383 8810 	msr	PRIMASK, r3
}
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	491b      	ldr	r1, [pc, #108]	; (8005c6c <UART_EndRxTransfer+0xc8>)
 8005c00:	400a      	ands	r2, r1
 8005c02:	609a      	str	r2, [r3, #8]
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	f383 8810 	msr	PRIMASK, r3
}
 8005c0e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d118      	bne.n	8005c4a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c18:	f3ef 8310 	mrs	r3, PRIMASK
 8005c1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c1e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c22:	2301      	movs	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f383 8810 	msr	PRIMASK, r3
}
 8005c2c:	46c0      	nop			; (mov r8, r8)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2110      	movs	r1, #16
 8005c3a:	438a      	bics	r2, r1
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f383 8810 	msr	PRIMASK, r3
}
 8005c48:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2288      	movs	r2, #136	; 0x88
 8005c4e:	2120      	movs	r1, #32
 8005c50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005c5e:	46c0      	nop			; (mov r8, r8)
 8005c60:	46bd      	mov	sp, r7
 8005c62:	b00e      	add	sp, #56	; 0x38
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	46c0      	nop			; (mov r8, r8)
 8005c68:	fffffedf 	.word	0xfffffedf
 8005c6c:	effffffe 	.word	0xeffffffe

08005c70 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b094      	sub	sp, #80	; 0x50
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2220      	movs	r2, #32
 8005c86:	4013      	ands	r3, r2
 8005c88:	d16f      	bne.n	8005d6a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c8c:	225e      	movs	r2, #94	; 0x5e
 8005c8e:	2100      	movs	r1, #0
 8005c90:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c92:	f3ef 8310 	mrs	r3, PRIMASK
 8005c96:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c98:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	f383 8810 	msr	PRIMASK, r3
}
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4938      	ldr	r1, [pc, #224]	; (8005d94 <UART_DMAReceiveCplt+0x124>)
 8005cb4:	400a      	ands	r2, r1
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	f383 8810 	msr	PRIMASK, r3
}
 8005cc2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cce:	2301      	movs	r3, #1
 8005cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd4:	f383 8810 	msr	PRIMASK, r3
}
 8005cd8:	46c0      	nop			; (mov r8, r8)
 8005cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	438a      	bics	r2, r1
 8005ce8:	609a      	str	r2, [r3, #8]
 8005cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	f383 8810 	msr	PRIMASK, r3
}
 8005cf4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cfa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cfe:	643b      	str	r3, [r7, #64]	; 0x40
 8005d00:	2301      	movs	r3, #1
 8005d02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d06:	f383 8810 	msr	PRIMASK, r3
}
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2140      	movs	r1, #64	; 0x40
 8005d18:	438a      	bics	r2, r1
 8005d1a:	609a      	str	r2, [r3, #8]
 8005d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	f383 8810 	msr	PRIMASK, r3
}
 8005d26:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d2a:	2288      	movs	r2, #136	; 0x88
 8005d2c:	2120      	movs	r1, #32
 8005d2e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d118      	bne.n	8005d6a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d38:	f3ef 8310 	mrs	r3, PRIMASK
 8005d3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d42:	2301      	movs	r3, #1
 8005d44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f383 8810 	msr	PRIMASK, r3
}
 8005d4c:	46c0      	nop			; (mov r8, r8)
 8005d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2110      	movs	r1, #16
 8005d5a:	438a      	bics	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f383 8810 	msr	PRIMASK, r3
}
 8005d68:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d108      	bne.n	8005d84 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d74:	225c      	movs	r2, #92	; 0x5c
 8005d76:	5a9a      	ldrh	r2, [r3, r2]
 8005d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d7a:	0011      	movs	r1, r2
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f7ff f903 	bl	8004f88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d82:	e003      	b.n	8005d8c <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8005d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d86:	0018      	movs	r0, r3
 8005d88:	f7ff f8e6 	bl	8004f58 <HAL_UART_RxCpltCallback>
}
 8005d8c:	46c0      	nop			; (mov r8, r8)
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	b014      	add	sp, #80	; 0x50
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	fffffeff 	.word	0xfffffeff

08005d98 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d10a      	bne.n	8005dc4 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	225c      	movs	r2, #92	; 0x5c
 8005db2:	5a9b      	ldrh	r3, [r3, r2]
 8005db4:	085b      	lsrs	r3, r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	0011      	movs	r1, r2
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f7ff f8e3 	bl	8004f88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005dc2:	e003      	b.n	8005dcc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f7ff f8ce 	bl	8004f68 <HAL_UART_RxHalfCpltCallback>
}
 8005dcc:	46c0      	nop			; (mov r8, r8)
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	b004      	add	sp, #16
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2284      	movs	r2, #132	; 0x84
 8005de6:	589b      	ldr	r3, [r3, r2]
 8005de8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2288      	movs	r2, #136	; 0x88
 8005dee:	589b      	ldr	r3, [r3, r2]
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	2280      	movs	r2, #128	; 0x80
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	2b80      	cmp	r3, #128	; 0x80
 8005dfe:	d10a      	bne.n	8005e16 <UART_DMAError+0x42>
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b21      	cmp	r3, #33	; 0x21
 8005e04:	d107      	bne.n	8005e16 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2256      	movs	r2, #86	; 0x56
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	0018      	movs	r0, r3
 8005e12:	f7ff fe87 	bl	8005b24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2240      	movs	r2, #64	; 0x40
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2b40      	cmp	r3, #64	; 0x40
 8005e22:	d10a      	bne.n	8005e3a <UART_DMAError+0x66>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b22      	cmp	r3, #34	; 0x22
 8005e28:	d107      	bne.n	8005e3a <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	225e      	movs	r2, #94	; 0x5e
 8005e2e:	2100      	movs	r1, #0
 8005e30:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	0018      	movs	r0, r3
 8005e36:	f7ff feb5 	bl	8005ba4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	228c      	movs	r2, #140	; 0x8c
 8005e3e:	589b      	ldr	r3, [r3, r2]
 8005e40:	2210      	movs	r2, #16
 8005e42:	431a      	orrs	r2, r3
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	218c      	movs	r1, #140	; 0x8c
 8005e48:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f7ff f893 	bl	8004f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	46bd      	mov	sp, r7
 8005e56:	b006      	add	sp, #24
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2280      	movs	r2, #128	; 0x80
 8005e68:	5c9b      	ldrb	r3, [r3, r2]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e027      	b.n	8005ec2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2280      	movs	r2, #128	; 0x80
 8005e76:	2101      	movs	r1, #1
 8005e78:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2284      	movs	r2, #132	; 0x84
 8005e7e:	2124      	movs	r1, #36	; 0x24
 8005e80:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2101      	movs	r1, #1
 8005e96:	438a      	bics	r2, r1
 8005e98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4a0b      	ldr	r2, [pc, #44]	; (8005ecc <HAL_UARTEx_DisableFifoMode+0x70>)
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2284      	movs	r2, #132	; 0x84
 8005eb4:	2120      	movs	r1, #32
 8005eb6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2280      	movs	r2, #128	; 0x80
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	b004      	add	sp, #16
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	46c0      	nop			; (mov r8, r8)
 8005ecc:	dfffffff 	.word	0xdfffffff

08005ed0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2280      	movs	r2, #128	; 0x80
 8005ede:	5c9b      	ldrb	r3, [r3, r2]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e02e      	b.n	8005f46 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2280      	movs	r2, #128	; 0x80
 8005eec:	2101      	movs	r1, #1
 8005eee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2284      	movs	r2, #132	; 0x84
 8005ef4:	2124      	movs	r1, #36	; 0x24
 8005ef6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	438a      	bics	r2, r1
 8005f0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	08d9      	lsrs	r1, r3, #3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	0018      	movs	r0, r3
 8005f28:	f000 f854 	bl	8005fd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2284      	movs	r2, #132	; 0x84
 8005f38:	2120      	movs	r1, #32
 8005f3a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2280      	movs	r2, #128	; 0x80
 8005f40:	2100      	movs	r1, #0
 8005f42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	0018      	movs	r0, r3
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	b004      	add	sp, #16
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2280      	movs	r2, #128	; 0x80
 8005f5e:	5c9b      	ldrb	r3, [r3, r2]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e02f      	b.n	8005fc8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2280      	movs	r2, #128	; 0x80
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2284      	movs	r2, #132	; 0x84
 8005f74:	2124      	movs	r1, #36	; 0x24
 8005f76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	438a      	bics	r2, r1
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	4a0e      	ldr	r2, [pc, #56]	; (8005fd0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	0019      	movs	r1, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	0018      	movs	r0, r3
 8005faa:	f000 f813 	bl	8005fd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2284      	movs	r2, #132	; 0x84
 8005fba:	2120      	movs	r1, #32
 8005fbc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2280      	movs	r2, #128	; 0x80
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	0018      	movs	r0, r3
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b004      	add	sp, #16
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	f1ffffff 	.word	0xf1ffffff

08005fd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d108      	bne.n	8005ff6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	226a      	movs	r2, #106	; 0x6a
 8005fe8:	2101      	movs	r1, #1
 8005fea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2268      	movs	r2, #104	; 0x68
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ff4:	e043      	b.n	800607e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ff6:	260f      	movs	r6, #15
 8005ff8:	19bb      	adds	r3, r7, r6
 8005ffa:	2208      	movs	r2, #8
 8005ffc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ffe:	200e      	movs	r0, #14
 8006000:	183b      	adds	r3, r7, r0
 8006002:	2208      	movs	r2, #8
 8006004:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	0e5b      	lsrs	r3, r3, #25
 800600e:	b2da      	uxtb	r2, r3
 8006010:	240d      	movs	r4, #13
 8006012:	193b      	adds	r3, r7, r4
 8006014:	2107      	movs	r1, #7
 8006016:	400a      	ands	r2, r1
 8006018:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	0f5b      	lsrs	r3, r3, #29
 8006022:	b2da      	uxtb	r2, r3
 8006024:	250c      	movs	r5, #12
 8006026:	197b      	adds	r3, r7, r5
 8006028:	2107      	movs	r1, #7
 800602a:	400a      	ands	r2, r1
 800602c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800602e:	183b      	adds	r3, r7, r0
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	197a      	adds	r2, r7, r5
 8006034:	7812      	ldrb	r2, [r2, #0]
 8006036:	4914      	ldr	r1, [pc, #80]	; (8006088 <UARTEx_SetNbDataToProcess+0xb4>)
 8006038:	5c8a      	ldrb	r2, [r1, r2]
 800603a:	435a      	muls	r2, r3
 800603c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800603e:	197b      	adds	r3, r7, r5
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	4a12      	ldr	r2, [pc, #72]	; (800608c <UARTEx_SetNbDataToProcess+0xb8>)
 8006044:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006046:	0019      	movs	r1, r3
 8006048:	f7fa f8e6 	bl	8000218 <__divsi3>
 800604c:	0003      	movs	r3, r0
 800604e:	b299      	uxth	r1, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	226a      	movs	r2, #106	; 0x6a
 8006054:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006056:	19bb      	adds	r3, r7, r6
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	193a      	adds	r2, r7, r4
 800605c:	7812      	ldrb	r2, [r2, #0]
 800605e:	490a      	ldr	r1, [pc, #40]	; (8006088 <UARTEx_SetNbDataToProcess+0xb4>)
 8006060:	5c8a      	ldrb	r2, [r1, r2]
 8006062:	435a      	muls	r2, r3
 8006064:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006066:	193b      	adds	r3, r7, r4
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	4a08      	ldr	r2, [pc, #32]	; (800608c <UARTEx_SetNbDataToProcess+0xb8>)
 800606c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800606e:	0019      	movs	r1, r3
 8006070:	f7fa f8d2 	bl	8000218 <__divsi3>
 8006074:	0003      	movs	r3, r0
 8006076:	b299      	uxth	r1, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2268      	movs	r2, #104	; 0x68
 800607c:	5299      	strh	r1, [r3, r2]
}
 800607e:	46c0      	nop			; (mov r8, r8)
 8006080:	46bd      	mov	sp, r7
 8006082:	b005      	add	sp, #20
 8006084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006086:	46c0      	nop			; (mov r8, r8)
 8006088:	0800628c 	.word	0x0800628c
 800608c:	08006294 	.word	0x08006294

08006090 <__libc_init_array>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	2600      	movs	r6, #0
 8006094:	4d0c      	ldr	r5, [pc, #48]	; (80060c8 <__libc_init_array+0x38>)
 8006096:	4c0d      	ldr	r4, [pc, #52]	; (80060cc <__libc_init_array+0x3c>)
 8006098:	1b64      	subs	r4, r4, r5
 800609a:	10a4      	asrs	r4, r4, #2
 800609c:	42a6      	cmp	r6, r4
 800609e:	d109      	bne.n	80060b4 <__libc_init_array+0x24>
 80060a0:	2600      	movs	r6, #0
 80060a2:	f000 f821 	bl	80060e8 <_init>
 80060a6:	4d0a      	ldr	r5, [pc, #40]	; (80060d0 <__libc_init_array+0x40>)
 80060a8:	4c0a      	ldr	r4, [pc, #40]	; (80060d4 <__libc_init_array+0x44>)
 80060aa:	1b64      	subs	r4, r4, r5
 80060ac:	10a4      	asrs	r4, r4, #2
 80060ae:	42a6      	cmp	r6, r4
 80060b0:	d105      	bne.n	80060be <__libc_init_array+0x2e>
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	00b3      	lsls	r3, r6, #2
 80060b6:	58eb      	ldr	r3, [r5, r3]
 80060b8:	4798      	blx	r3
 80060ba:	3601      	adds	r6, #1
 80060bc:	e7ee      	b.n	800609c <__libc_init_array+0xc>
 80060be:	00b3      	lsls	r3, r6, #2
 80060c0:	58eb      	ldr	r3, [r5, r3]
 80060c2:	4798      	blx	r3
 80060c4:	3601      	adds	r6, #1
 80060c6:	e7f2      	b.n	80060ae <__libc_init_array+0x1e>
 80060c8:	080062a4 	.word	0x080062a4
 80060cc:	080062a4 	.word	0x080062a4
 80060d0:	080062a4 	.word	0x080062a4
 80060d4:	080062a8 	.word	0x080062a8

080060d8 <memset>:
 80060d8:	0003      	movs	r3, r0
 80060da:	1882      	adds	r2, r0, r2
 80060dc:	4293      	cmp	r3, r2
 80060de:	d100      	bne.n	80060e2 <memset+0xa>
 80060e0:	4770      	bx	lr
 80060e2:	7019      	strb	r1, [r3, #0]
 80060e4:	3301      	adds	r3, #1
 80060e6:	e7f9      	b.n	80060dc <memset+0x4>

080060e8 <_init>:
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ee:	bc08      	pop	{r3}
 80060f0:	469e      	mov	lr, r3
 80060f2:	4770      	bx	lr

080060f4 <_fini>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fa:	bc08      	pop	{r3}
 80060fc:	469e      	mov	lr, r3
 80060fe:	4770      	bx	lr
